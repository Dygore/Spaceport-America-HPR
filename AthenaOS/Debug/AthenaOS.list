
AthenaOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800f5c0  0800f5c0  0001f5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fadc  0800fadc  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fadc  0800fadc  0001fadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fae4  0800fae4  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fae4  0800fae4  0001fae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fae8  0800fae8  0001fae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800faec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  200002e0  0800fdcc  000202e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002118  0800fdcc  00022118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adcd  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d3e  00000000  00000000  0003b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0003ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  00040608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028107  00000000  00000000  00041c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edb5  00000000  00000000  00069d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4c27  00000000  00000000  00088aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aac  00000000  00000000  0016d764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e0 	.word	0x200002e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f5a8 	.word	0x0800f5a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e4 	.word	0x200002e4
 800020c:	0800f5a8 	.word	0x0800f5a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <status_LED_Swap>:
 */

#include "stm32f4xx_hal.h"
#include "Status_LED.h"

void status_LED_Swap(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(GPIOB, Status_LED_Pin)){
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <status_LED_Swap+0x34>)
 8001042:	f002 f87f 	bl	8003144 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d106      	bne.n	800105a <status_LED_Swap+0x22>
		HAL_GPIO_WritePin(GPIOB, Status_LED_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <status_LED_Swap+0x34>)
 8001054:	f002 f88e 	bl	8003174 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, Status_LED_Pin, GPIO_PIN_RESET);
	}
}
 8001058:	e005      	b.n	8001066 <status_LED_Swap+0x2e>
		HAL_GPIO_WritePin(GPIOB, Status_LED_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <status_LED_Swap+0x34>)
 8001062:	f002 f887 	bl	8003174 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020400 	.word	0x40020400

08001070 <stepper_Step>:
 */

#include "stm32f4xx_hal.h"
#include "stepper.h"

void stepper_Step (int dir, int step){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, Step_EN_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001080:	481b      	ldr	r0, [pc, #108]	; (80010f0 <stepper_Step+0x80>)
 8001082:	f002 f877 	bl	8003174 <HAL_GPIO_WritePin>

	if (dir == 1){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d106      	bne.n	800109a <stepper_Step+0x2a>
		HAL_GPIO_WritePin(GPIOB, Step_DIR_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <stepper_Step+0x84>)
 8001094:	f002 f86e 	bl	8003174 <HAL_GPIO_WritePin>
 8001098:	e005      	b.n	80010a6 <stepper_Step+0x36>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, Step_DIR_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4814      	ldr	r0, [pc, #80]	; (80010f4 <stepper_Step+0x84>)
 80010a2:	f002 f867 	bl	8003174 <HAL_GPIO_WritePin>
	}

	for(int i = 0; i < step; i++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e012      	b.n	80010d2 <stepper_Step+0x62>
		HAL_GPIO_WritePin(GPIOB, Step_PWM_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <stepper_Step+0x84>)
 80010b2:	f002 f85f 	bl	8003174 <HAL_GPIO_WritePin>
		delay(200);
 80010b6:	20c8      	movs	r0, #200	; 0xc8
 80010b8:	f000 fb26 	bl	8001708 <delay>
		HAL_GPIO_WritePin(GPIOB, Step_PWM_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <stepper_Step+0x84>)
 80010c2:	f002 f857 	bl	8003174 <HAL_GPIO_WritePin>
		delay(200);
 80010c6:	20c8      	movs	r0, #200	; 0xc8
 80010c8:	f000 fb1e 	bl	8001708 <delay>
	for(int i = 0; i < step; i++){
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3301      	adds	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbe8      	blt.n	80010ac <stepper_Step+0x3c>
	}

	HAL_GPIO_WritePin(GPIOC, Step_EN_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <stepper_Step+0x80>)
 80010e2:	f002 f847 	bl	8003174 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020400 	.word	0x40020400

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	HAL_GPIO_WritePin(GPIOB, Step_PWM_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2110      	movs	r1, #16
 8001102:	481f      	ldr	r0, [pc, #124]	; (8001180 <main+0x88>)
 8001104:	f002 f836 	bl	8003174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Step_EN_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110e:	481d      	ldr	r0, [pc, #116]	; (8001184 <main+0x8c>)
 8001110:	f002 f830 	bl	8003174 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f001 f8fe 	bl	8002314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f83c 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fa36 	bl	800158c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001120:	f000 f8a4 	bl	800126c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001124:	f000 f8f4 	bl	8001310 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001128:	f000 f920 	bl	800136c <MX_SPI1_Init>
  MX_SPI2_Init();
 800112c:	f000 f950 	bl	80013d0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001130:	f000 f984 	bl	800143c <MX_SPI3_Init>
  MX_TIM2_Init();
 8001134:	f000 f9b8 	bl	80014a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001138:	f009 f804 	bl	800a144 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);
 800113c:	4812      	ldr	r0, [pc, #72]	; (8001188 <main+0x90>)
 800113e:	f004 fe15 	bl	8005d6c <HAL_TIM_Base_Start>

  startup();
 8001142:	f000 fafd 	bl	8001740 <startup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(txBuff, "Battery Voltage: %fV\n", VBatt);
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <main+0x94>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	1d38      	adds	r0, r7, #4
 800114e:	4910      	ldr	r1, [pc, #64]	; (8001190 <main+0x98>)
 8001150:	f00a fc3a 	bl	800b9c8 <siprintf>

	  status_LED_Swap();
 8001154:	f7ff ff70 	bl	8001038 <status_LED_Swap>
	  HAL_Delay(100);
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f001 f94d 	bl	80023f8 <HAL_Delay>
	  status_LED_Swap();
 800115e:	f7ff ff6b 	bl	8001038 <status_LED_Swap>
	  HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f001 f948 	bl	80023f8 <HAL_Delay>

	  CDC_Transmit_FS((uint8_t *)txBuff, strlen(txBuff));
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f850 	bl	8000210 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f009 f8a1 	bl	800a2c0 <CDC_Transmit_FS>
	  sprintf(txBuff, "Battery Voltage: %fV\n", VBatt);
 800117e:	e7e2      	b.n	8001146 <main+0x4e>
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	200004ac 	.word	0x200004ac
 800118c:	20000300 	.word	0x20000300
 8001190:	0800f5c0 	.word	0x0800f5c0

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fd88 	bl	800acb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <SystemClock_Config+0xd0>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <SystemClock_Config+0xd0>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <SystemClock_Config+0xd0>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <SystemClock_Config+0xd4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <SystemClock_Config+0xd4>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <SystemClock_Config+0xd4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001208:	2308      	movs	r3, #8
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800120c:	2348      	movs	r3, #72	; 0x48
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001218:	2302      	movs	r3, #2
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4618      	mov	r0, r3
 8001222:	f004 fa2d 	bl	8005680 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800122c:	f000 fd60 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2302      	movs	r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fbb9 	bl	80049c4 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001258:	f000 fd4a 	bl	8001cf0 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	; 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_ADC1_Init+0x98>)
 8001280:	4a21      	ldr	r2, [pc, #132]	; (8001308 <MX_ADC1_Init+0x9c>)
 8001282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_ADC1_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_ADC1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_ADC1_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_ADC1_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_ADC1_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_ADC1_Init+0x98>)
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_ADC1_Init+0xa0>)
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_ADC1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_ADC1_Init+0x98>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_ADC1_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_ADC1_Init+0x98>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <MX_ADC1_Init+0x98>)
 80012cc:	f001 f8b8 	bl	8002440 <HAL_ADC_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 fd0b 	bl	8001cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012da:	2301      	movs	r3, #1
 80012dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_ADC1_Init+0x98>)
 80012ec:	f001 fa56 	bl	800279c <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012f6:	f000 fcfb 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000308 	.word	0x20000308
 8001308:	40012000 	.word	0x40012000
 800130c:	0f000001 	.word	0x0f000001

08001310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f001 ff2b 	bl	80031a8 <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 fcca 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000350 	.word	0x20000350
 8001364:	40005400 	.word	0x40005400
 8001368:	000186a0 	.word	0x000186a0

0800136c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_SPI1_Init+0x5c>)
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <MX_SPI1_Init+0x60>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_SPI1_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_SPI1_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_SPI1_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_SPI1_Init+0x5c>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_SPI1_Init+0x5c>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_SPI1_Init+0x5c>)
 8001396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_SPI1_Init+0x5c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_SPI1_Init+0x5c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_SPI1_Init+0x5c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_SPI1_Init+0x5c>)
 80013b0:	220a      	movs	r2, #10
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_SPI1_Init+0x5c>)
 80013b6:	f004 fc01 	bl	8005bbc <HAL_SPI_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 fc96 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200003a4 	.word	0x200003a4
 80013cc:	40013000 	.word	0x40013000

080013d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_SPI2_Init+0x64>)
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <MX_SPI2_Init+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_SPI2_Init+0x64>)
 80013dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_SPI2_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_SPI2_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI2_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_SPI2_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_SPI2_Init+0x64>)
 80013fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001400:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_SPI2_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_SPI2_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_SPI2_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <MX_SPI2_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_SPI2_Init+0x64>)
 800141c:	220a      	movs	r2, #10
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_SPI2_Init+0x64>)
 8001422:	f004 fbcb 	bl	8005bbc <HAL_SPI_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800142c:	f000 fc60 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003fc 	.word	0x200003fc
 8001438:	40003800 	.word	0x40003800

0800143c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <MX_SPI3_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI3_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI3_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI3_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_SPI3_Init+0x64>)
 800148e:	f004 fb95 	bl	8005bbc <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001498:	f000 fc2a 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000454 	.word	0x20000454
 80014a4:	40003c00 	.word	0x40003c00

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_TIM2_Init+0xe0>)
 80014da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_TIM2_Init+0xe0>)
 80014e2:	2247      	movs	r2, #71	; 0x47
 80014e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_TIM2_Init+0xe0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_TIM2_Init+0xe0>)
 80014ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_TIM2_Init+0xe0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_TIM2_Init+0xe0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_TIM2_Init+0xe0>)
 8001502:	f004 fbe4 	bl	8005cce <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800150c:	f000 fbf0 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151a:	4619      	mov	r1, r3
 800151c:	481a      	ldr	r0, [pc, #104]	; (8001588 <MX_TIM2_Init+0xe0>)
 800151e:	f004 fda9 	bl	8006074 <HAL_TIM_ConfigClockSource>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001528:	f000 fbe2 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800152c:	4816      	ldr	r0, [pc, #88]	; (8001588 <MX_TIM2_Init+0xe0>)
 800152e:	f004 fc85 	bl	8005e3c <HAL_TIM_PWM_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001538:	f000 fbda 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4619      	mov	r1, r3
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <MX_TIM2_Init+0xe0>)
 800154c:	f005 f944 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001556:	f000 fbcb 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155a:	2360      	movs	r3, #96	; 0x60
 800155c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_TIM2_Init+0xe0>)
 8001572:	f004 fcbd 	bl	8005ef0 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800157c:	f000 fbb8 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200004ac 	.word	0x200004ac

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <MX_GPIO_Init+0x168>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <MX_GPIO_Init+0x168>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <MX_GPIO_Init+0x168>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <MX_GPIO_Init+0x168>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a36      	ldr	r2, [pc, #216]	; (80016f4 <MX_GPIO_Init+0x168>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <MX_GPIO_Init+0x168>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Flash_CS_Pin|Extra_out_Pin|Step_EN_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 7122 	mov.w	r1, #648	; 0x288
 8001634:	4830      	ldr	r0, [pc, #192]	; (80016f8 <MX_GPIO_Init+0x16c>)
 8001636:	f001 fd9d 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_Pin|Step_DIR_Pin|Step_PWM_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f249 0110 	movw	r1, #36880	; 0x9010
 8001640:	482e      	ldr	r0, [pc, #184]	; (80016fc <MX_GPIO_Init+0x170>)
 8001642:	f001 fd97 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164c:	482c      	ldr	r0, [pc, #176]	; (8001700 <MX_GPIO_Init+0x174>)
 800164e:	f001 fd91 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2104      	movs	r1, #4
 8001656:	482b      	ldr	r0, [pc, #172]	; (8001704 <MX_GPIO_Init+0x178>)
 8001658:	f001 fd8c 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Flash_CS_Pin Extra_out_Pin Step_EN_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin|Extra_out_Pin|Step_EN_Pin;
 800165c:	f44f 7322 	mov.w	r3, #648	; 0x288
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4820      	ldr	r0, [pc, #128]	; (80016f8 <MX_GPIO_Init+0x16c>)
 8001676:	f001 fbd1 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Altus_CS_Pin */
  GPIO_InitStruct.Pin = Altus_CS_Pin;
 800167a:	2310      	movs	r3, #16
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Altus_CS_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	481a      	ldr	r0, [pc, #104]	; (80016f8 <MX_GPIO_Init+0x16c>)
 800168e:	f001 fbc5 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Status_LED_Pin Step_DIR_Pin Step_PWM_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin|Step_DIR_Pin|Step_PWM_Pin;
 8001692:	f249 0310 	movw	r3, #36880	; 0x9010
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <MX_GPIO_Init+0x170>)
 80016ac:	f001 fbb6 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzz_PWM_Pin */
  GPIO_InitStruct.Pin = Buzz_PWM_Pin;
 80016b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2302      	movs	r3, #2
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzz_PWM_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_GPIO_Init+0x174>)
 80016ca:	f001 fba7 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80016ce:	2304      	movs	r3, #4
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_GPIO_Init+0x178>)
 80016e6:	f001 fb99 	bl	8002e1c <HAL_GPIO_Init>

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020000 	.word	0x40020000
 8001704:	40020c00 	.word	0x40020c00

08001708 <delay>:

/* USER CODE BEGIN 4 */
void delay (uint16_t us)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <delay+0x30>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 800171a:	bf00      	nop
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <delay+0x30>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	429a      	cmp	r2, r3
 8001726:	d3f9      	bcc.n	800171c <delay+0x14>
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200004ac 	.word	0x200004ac
 800173c:	00000000 	.word	0x00000000

08001740 <startup>:

void startup(void){
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0
	double f = 256.41;
 8001746:	a3ae      	add	r3, pc, #696	; (adr r3, 8001a00 <startup+0x2c0>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < 5; i++){
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
 8001754:	e03f      	b.n	80017d6 <startup+0x96>
			for(int i = 0; i < 500; i++){
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
 800175a:	e032      	b.n	80017c2 <startup+0x82>
				HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001762:	48a9      	ldr	r0, [pc, #676]	; (8001a08 <startup+0x2c8>)
 8001764:	f001 fd06 	bl	8003174 <HAL_GPIO_WritePin>
				delay(f*0.5);
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4ba7      	ldr	r3, [pc, #668]	; (8001a0c <startup+0x2cc>)
 800176e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001772:	f7fe ff61 	bl	8000638 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa33 	bl	8000be8 <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	b29b      	uxth	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffbe 	bl	8001708 <delay>
				HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001792:	489d      	ldr	r0, [pc, #628]	; (8001a08 <startup+0x2c8>)
 8001794:	f001 fcee 	bl	8003174 <HAL_GPIO_WritePin>
				delay(f*0.5);
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b9b      	ldr	r3, [pc, #620]	; (8001a0c <startup+0x2cc>)
 800179e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a2:	f7fe ff49 	bl	8000638 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff fa1b 	bl	8000be8 <__aeabi_d2uiz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffa6 	bl	8001708 <delay>
			for(int i = 0; i < 500; i++){
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	3301      	adds	r3, #1
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017c8:	dbc8      	blt.n	800175c <startup+0x1c>
			}
			HAL_Delay(100);
 80017ca:	2064      	movs	r0, #100	; 0x64
 80017cc:	f000 fe14 	bl	80023f8 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	3301      	adds	r3, #1
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	2b04      	cmp	r3, #4
 80017da:	ddbc      	ble.n	8001756 <startup+0x16>
	}

	HAL_Delay(1000);
 80017dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e0:	f000 fe0a 	bl	80023f8 <HAL_Delay>

	HAL_ADC_Start(&hadc1);
 80017e4:	488a      	ldr	r0, [pc, #552]	; (8001a10 <startup+0x2d0>)
 80017e6:	f000 fe6f 	bl	80024c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017ea:	f04f 31ff 	mov.w	r1, #4294967295
 80017ee:	4888      	ldr	r0, [pc, #544]	; (8001a10 <startup+0x2d0>)
 80017f0:	f000 ff3c 	bl	800266c <HAL_ADC_PollForConversion>

	VBatt = (((double)HAL_ADC_GetValue(&hadc1)*2)/4095)*3.3;
 80017f4:	4886      	ldr	r0, [pc, #536]	; (8001a10 <startup+0x2d0>)
 80017f6:	f000 ffc4 	bl	8002782 <HAL_ADC_GetValue>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fea1 	bl	8000544 <__aeabi_ui2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	f7fe fd61 	bl	80002cc <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a373      	add	r3, pc, #460	; (adr r3, 80019e0 <startup+0x2a0>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7ff f838 	bl	800088c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	a370      	add	r3, pc, #448	; (adr r3, 80019e8 <startup+0x2a8>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff05 	bl	8000638 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4978      	ldr	r1, [pc, #480]	; (8001a14 <startup+0x2d4>)
 8001834:	e9c1 2300 	strd	r2, r3, [r1]

	f = 250;
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <startup+0x2d8>)
 800183e:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < (int)VBatt; i++){
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001846:	e040      	b.n	80018ca <startup+0x18a>
		for(int i = 0; i < 700; i++){
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
 800184c:	e032      	b.n	80018b4 <startup+0x174>
			HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001854:	486c      	ldr	r0, [pc, #432]	; (8001a08 <startup+0x2c8>)
 8001856:	f001 fc8d 	bl	8003174 <HAL_GPIO_WritePin>
			delay(f*0.60);
 800185a:	a365      	add	r3, pc, #404	; (adr r3, 80019f0 <startup+0x2b0>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001864:	f7fe fee8 	bl	8000638 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f9ba 	bl	8000be8 <__aeabi_d2uiz>
 8001874:	4603      	mov	r3, r0
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff45 	bl	8001708 <delay>
			HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001884:	4860      	ldr	r0, [pc, #384]	; (8001a08 <startup+0x2c8>)
 8001886:	f001 fc75 	bl	8003174 <HAL_GPIO_WritePin>
			delay(f*0.40);
 800188a:	a35b      	add	r3, pc, #364	; (adr r3, 80019f8 <startup+0x2b8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001894:	f7fe fed0 	bl	8000638 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f9a2 	bl	8000be8 <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff2d 	bl	8001708 <delay>
		for(int i = 0; i < 700; i++){
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	3301      	adds	r3, #1
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80018ba:	dbc8      	blt.n	800184e <startup+0x10e>
		}
		HAL_Delay(400);
 80018bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018c0:	f000 fd9a 	bl	80023f8 <HAL_Delay>
	for(int i = 0; i < (int)VBatt; i++){
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	3301      	adds	r3, #1
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <startup+0x2d4>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f960 	bl	8000b98 <__aeabi_d2iz>
 80018d8:	4602      	mov	r2, r0
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	4293      	cmp	r3, r2
 80018de:	dbb3      	blt.n	8001848 <startup+0x108>
	}

	HAL_Delay(600);
 80018e0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80018e4:	f000 fd88 	bl	80023f8 <HAL_Delay>

	f = 250;
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <startup+0x2d8>)
 80018ee:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < (int)((VBatt-(int)VBatt)*10); i++){
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	e040      	b.n	800197a <startup+0x23a>
		for(int i = 0; i < 700; i++){
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
 80018fc:	e032      	b.n	8001964 <startup+0x224>
			HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001904:	4840      	ldr	r0, [pc, #256]	; (8001a08 <startup+0x2c8>)
 8001906:	f001 fc35 	bl	8003174 <HAL_GPIO_WritePin>
			delay(f*0.60);
 800190a:	a339      	add	r3, pc, #228	; (adr r3, 80019f0 <startup+0x2b0>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001914:	f7fe fe90 	bl	8000638 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f962 	bl	8000be8 <__aeabi_d2uiz>
 8001924:	4603      	mov	r3, r0
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff feed 	bl	8001708 <delay>
			HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001934:	4834      	ldr	r0, [pc, #208]	; (8001a08 <startup+0x2c8>)
 8001936:	f001 fc1d 	bl	8003174 <HAL_GPIO_WritePin>
			delay(f*0.40);
 800193a:	a32f      	add	r3, pc, #188	; (adr r3, 80019f8 <startup+0x2b8>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001944:	f7fe fe78 	bl	8000638 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f94a 	bl	8000be8 <__aeabi_d2uiz>
 8001954:	4603      	mov	r3, r0
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fed5 	bl	8001708 <delay>
		for(int i = 0; i < 700; i++){
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	3301      	adds	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800196a:	dbc8      	blt.n	80018fe <startup+0x1be>
		}
		HAL_Delay(400);
 800196c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001970:	f000 fd42 	bl	80023f8 <HAL_Delay>
	for(int i = 0; i < (int)((VBatt-(int)VBatt)*10); i++){
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <startup+0x2d4>)
 800197c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <startup+0x2d4>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f905 	bl	8000b98 <__aeabi_d2iz>
 800198e:	4603      	mov	r3, r0
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fde7 	bl	8000564 <__aeabi_i2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7fe fc93 	bl	80002c8 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <startup+0x2dc>)
 80019b0:	f7fe fe42 	bl	8000638 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f8ec 	bl	8000b98 <__aeabi_d2iz>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	4293      	cmp	r3, r2
 80019c6:	db97      	blt.n	80018f8 <startup+0x1b8>
	}

	HAL_Delay(1000);
 80019c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019cc:	f000 fd14 	bl	80023f8 <HAL_Delay>

	f = 256.41;
 80019d0:	a30b      	add	r3, pc, #44	; (adr r3, 8001a00 <startup+0x2c0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < 500; i++){
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e052      	b.n	8001a86 <startup+0x346>
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40affe00 	.word	0x40affe00
 80019e8:	66666666 	.word	0x66666666
 80019ec:	400a6666 	.word	0x400a6666
 80019f0:	33333333 	.word	0x33333333
 80019f4:	3fe33333 	.word	0x3fe33333
 80019f8:	9999999a 	.word	0x9999999a
 80019fc:	3fd99999 	.word	0x3fd99999
 8001a00:	5c28f5c3 	.word	0x5c28f5c3
 8001a04:	4070068f 	.word	0x4070068f
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	3fe00000 	.word	0x3fe00000
 8001a10:	20000308 	.word	0x20000308
 8001a14:	20000300 	.word	0x20000300
 8001a18:	406f4000 	.word	0x406f4000
 8001a1c:	40240000 	.word	0x40240000
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a26:	48b0      	ldr	r0, [pc, #704]	; (8001ce8 <startup+0x5a8>)
 8001a28:	f001 fba4 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.60);
 8001a2c:	a3a4      	add	r3, pc, #656	; (adr r3, 8001cc0 <startup+0x580>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a36:	f7fe fdff 	bl	8000638 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f8d1 	bl	8000be8 <__aeabi_d2uiz>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fe5c 	bl	8001708 <delay>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a56:	48a4      	ldr	r0, [pc, #656]	; (8001ce8 <startup+0x5a8>)
 8001a58:	f001 fb8c 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.40);
 8001a5c:	a39a      	add	r3, pc, #616	; (adr r3, 8001cc8 <startup+0x588>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a66:	f7fe fde7 	bl	8000638 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8b9 	bl	8000be8 <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fe44 	bl	8001708 <delay>
	for(int i = 0; i < 500; i++){
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	3301      	adds	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8c:	dbc8      	blt.n	8001a20 <startup+0x2e0>
	}

	HAL_Delay(100);
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f000 fcb2 	bl	80023f8 <HAL_Delay>

	f = 250;
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <startup+0x5ac>)
 8001a9a:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < 500; i++){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	e032      	b.n	8001b0a <startup+0x3ca>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aaa:	488f      	ldr	r0, [pc, #572]	; (8001ce8 <startup+0x5a8>)
 8001aac:	f001 fb62 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.60);
 8001ab0:	a383      	add	r3, pc, #524	; (adr r3, 8001cc0 <startup+0x580>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aba:	f7fe fdbd 	bl	8000638 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f88f 	bl	8000be8 <__aeabi_d2uiz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fe1a 	bl	8001708 <delay>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ada:	4883      	ldr	r0, [pc, #524]	; (8001ce8 <startup+0x5a8>)
 8001adc:	f001 fb4a 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.40);
 8001ae0:	a379      	add	r3, pc, #484	; (adr r3, 8001cc8 <startup+0x588>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aea:	f7fe fda5 	bl	8000638 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f877 	bl	8000be8 <__aeabi_d2uiz>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe02 	bl	8001708 <delay>
	for(int i = 0; i < 500; i++){
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b10:	dbc8      	blt.n	8001aa4 <startup+0x364>
	}

	HAL_Delay(100);
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f000 fc70 	bl	80023f8 <HAL_Delay>

	f = 243.9;
 8001b18:	a36d      	add	r3, pc, #436	; (adr r3, 8001cd0 <startup+0x590>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < 500; i++){
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e032      	b.n	8001b8e <startup+0x44e>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2e:	486e      	ldr	r0, [pc, #440]	; (8001ce8 <startup+0x5a8>)
 8001b30:	f001 fb20 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.60);
 8001b34:	a362      	add	r3, pc, #392	; (adr r3, 8001cc0 <startup+0x580>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f84d 	bl	8000be8 <__aeabi_d2uiz>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fdd8 	bl	8001708 <delay>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5e:	4862      	ldr	r0, [pc, #392]	; (8001ce8 <startup+0x5a8>)
 8001b60:	f001 fb08 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.40);
 8001b64:	a358      	add	r3, pc, #352	; (adr r3, 8001cc8 <startup+0x588>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b6e:	f7fe fd63 	bl	8000638 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff f835 	bl	8000be8 <__aeabi_d2uiz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fdc0 	bl	8001708 <delay>
	for(int i = 0; i < 500; i++){
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b94:	dbc8      	blt.n	8001b28 <startup+0x3e8>
	}

	HAL_Delay(100);
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f000 fc2e 	bl	80023f8 <HAL_Delay>

	f = 238.095;
 8001b9c:	a34e      	add	r3, pc, #312	; (adr r3, 8001cd8 <startup+0x598>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < 500; i++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e032      	b.n	8001c12 <startup+0x4d2>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb2:	484d      	ldr	r0, [pc, #308]	; (8001ce8 <startup+0x5a8>)
 8001bb4:	f001 fade 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.60);
 8001bb8:	a341      	add	r3, pc, #260	; (adr r3, 8001cc0 <startup+0x580>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bc2:	f7fe fd39 	bl	8000638 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff f80b 	bl	8000be8 <__aeabi_d2uiz>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fd96 	bl	8001708 <delay>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be2:	4841      	ldr	r0, [pc, #260]	; (8001ce8 <startup+0x5a8>)
 8001be4:	f001 fac6 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.40);
 8001be8:	a337      	add	r3, pc, #220	; (adr r3, 8001cc8 <startup+0x588>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf2:	f7fe fd21 	bl	8000638 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fff3 	bl	8000be8 <__aeabi_d2uiz>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd7e 	bl	8001708 <delay>
	for(int i = 0; i < 500; i++){
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c18:	dbc8      	blt.n	8001bac <startup+0x46c>
	}

	HAL_Delay(100);
 8001c1a:	2064      	movs	r0, #100	; 0x64
 8001c1c:	f000 fbec 	bl	80023f8 <HAL_Delay>

	stepper_Step (1, 50); //Step in direction 1, 50 steps
 8001c20:	2132      	movs	r1, #50	; 0x32
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fa24 	bl	8001070 <stepper_Step>
	stepper_Step (0, 50); //Step in direction 0, 50 steps
 8001c28:	2132      	movs	r1, #50	; 0x32
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff fa20 	bl	8001070 <stepper_Step>

	f = 232.55814;
 8001c30:	a32b      	add	r3, pc, #172	; (adr r3, 8001ce0 <startup+0x5a0>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i = 0; i < 10000; i++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e032      	b.n	8001ca6 <startup+0x566>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <startup+0x5a8>)
 8001c48:	f001 fa94 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.60);
 8001c4c:	a31c      	add	r3, pc, #112	; (adr r3, 8001cc0 <startup+0x580>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c56:	f7fe fcef 	bl	8000638 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ffc1 	bl	8000be8 <__aeabi_d2uiz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fd4c 	bl	8001708 <delay>
		HAL_GPIO_WritePin(Buzz_PWM_GPIO_Port, Buzz_PWM_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c76:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <startup+0x5a8>)
 8001c78:	f001 fa7c 	bl	8003174 <HAL_GPIO_WritePin>
		delay(f*0.40);
 8001c7c:	a312      	add	r3, pc, #72	; (adr r3, 8001cc8 <startup+0x588>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c86:	f7fe fcd7 	bl	8000638 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ffa9 	bl	8000be8 <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fd34 	bl	8001708 <delay>
	for(int i = 0; i < 10000; i++){
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cac:	4293      	cmp	r3, r2
 8001cae:	ddc7      	ble.n	8001c40 <startup+0x500>
	}

	HAL_Delay(100);
 8001cb0:	2064      	movs	r0, #100	; 0x64
 8001cb2:	f000 fba1 	bl	80023f8 <HAL_Delay>
}
 8001cb6:	bf00      	nop
 8001cb8:	3738      	adds	r7, #56	; 0x38
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	33333333 	.word	0x33333333
 8001cc4:	3fe33333 	.word	0x3fe33333
 8001cc8:	9999999a 	.word	0x9999999a
 8001ccc:	3fd99999 	.word	0x3fd99999
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	406e7ccc 	.word	0x406e7ccc
 8001cd8:	3d70a3d7 	.word	0x3d70a3d7
 8001cdc:	406dc30a 	.word	0x406dc30a
 8001ce0:	486ad2dd 	.word	0x486ad2dd
 8001ce4:	406d11dc 	.word	0x406d11dc
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	406f4000 	.word	0x406f4000

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_ADC_MspInit+0x7c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d127      	bne.n	8001dbe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_ADC_MspInit+0x80>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <HAL_ADC_MspInit+0x80>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_ADC_MspInit+0x80>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_ADC_MspInit+0x80>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_ADC_MspInit+0x80>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_ADC_MspInit+0x80>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Batt_Pin;
 8001da6:	2302      	movs	r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001daa:	2303      	movs	r3, #3
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Batt_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_ADC_MspInit+0x84>)
 8001dba:	f001 f82f 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40012000 	.word	0x40012000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_I2C_MspInit+0x84>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12b      	bne.n	8001e4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Extra_SCL_Pin|Extra_SDA_Pin;
 8001e12:	23c0      	movs	r3, #192	; 0xc0
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e16:	2312      	movs	r3, #18
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e22:	2304      	movs	r3, #4
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <HAL_I2C_MspInit+0x8c>)
 8001e2e:	f000 fff5 	bl	8002e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005400 	.word	0x40005400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020400 	.word	0x40020400

08001e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b090      	sub	sp, #64	; 0x40
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a72      	ldr	r2, [pc, #456]	; (800204c <HAL_SPI_MspInit+0x1e8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8a:	4b71      	ldr	r3, [pc, #452]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a70      	ldr	r2, [pc, #448]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a69      	ldr	r2, [pc, #420]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Altus_SCK_Pin|Altus_MISO_Pin|Altus_MOSI_Pin;
 8001ebe:	23e0      	movs	r3, #224	; 0xe0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	485e      	ldr	r0, [pc, #376]	; (8002054 <HAL_SPI_MspInit+0x1f0>)
 8001eda:	f000 ff9f 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ede:	e0b0      	b.n	8002042 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <HAL_SPI_MspInit+0x1f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d15b      	bne.n	8001fa2 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a57      	ldr	r2, [pc, #348]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b55      	ldr	r3, [pc, #340]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	4b51      	ldr	r3, [pc, #324]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Flash_MOSI_Pin;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Flash_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	4840      	ldr	r0, [pc, #256]	; (800205c <HAL_SPI_MspInit+0x1f8>)
 8001f5a:	f000 ff5f 	bl	8002e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	4838      	ldr	r0, [pc, #224]	; (800205c <HAL_SPI_MspInit+0x1f8>)
 8001f7a:	f000 ff4f 	bl	8002e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Flash_SCK_Pin;
 8001f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f90:	2305      	movs	r3, #5
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Flash_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4831      	ldr	r0, [pc, #196]	; (8002060 <HAL_SPI_MspInit+0x1fc>)
 8001f9c:	f000 ff3e 	bl	8002e1c <HAL_GPIO_Init>
}
 8001fa0:	e04f      	b.n	8002042 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <HAL_SPI_MspInit+0x200>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d14a      	bne.n	8002042 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_SPI_MspInit+0x1ec>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_MOSI_Pin;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002010:	2307      	movs	r3, #7
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	4811      	ldr	r0, [pc, #68]	; (8002060 <HAL_SPI_MspInit+0x1fc>)
 800201c:	f000 fefe 	bl	8002e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin;
 8002020:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002032:	2306      	movs	r3, #6
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203a:	4619      	mov	r1, r3
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <HAL_SPI_MspInit+0x1f8>)
 800203e:	f000 feed 	bl	8002e1c <HAL_GPIO_Init>
}
 8002042:	bf00      	nop
 8002044:	3740      	adds	r7, #64	; 0x40
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40013000 	.word	0x40013000
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000
 8002058:	40003800 	.word	0x40003800
 800205c:	40020800 	.word	0x40020800
 8002060:	40020400 	.word	0x40020400
 8002064:	40003c00 	.word	0x40003c00

08002068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d10d      	bne.n	8002096 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_TIM_Base_MspInit+0x3c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <NMI_Handler+0x4>

080020ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler+0x4>

080020ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f4:	f000 f960 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <OTG_FS_IRQHandler+0x10>)
 8002102:	f001 faec 	bl	80036de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200019dc 	.word	0x200019dc

08002110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
	return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_kill>:

int _kill(int pid, int sig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800212a:	f008 fd9b 	bl	800ac64 <__errno>
 800212e:	4603      	mov	r3, r0
 8002130:	2216      	movs	r2, #22
 8002132:	601a      	str	r2, [r3, #0]
	return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_exit>:

void _exit (int status)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffe7 	bl	8002120 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002152:	e7fe      	b.n	8002152 <_exit+0x12>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
	}

return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
	}
	return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
	return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
	return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f008 fd00 	bl	800ac64 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20020000 	.word	0x20020000
 8002290:	00000400 	.word	0x00000400
 8002294:	200004f4 	.word	0x200004f4
 8002298:	20002118 	.word	0x20002118

0800229c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <SystemInit+0x20>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <SystemInit+0x20>)
 80022a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022c6:	490e      	ldr	r1, [pc, #56]	; (8002300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022dc:	4c0b      	ldr	r4, [pc, #44]	; (800230c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ea:	f7ff ffd7 	bl	800229c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ee:	f008 fcbf 	bl	800ac70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f2:	f7fe ff01 	bl	80010f8 <main>
  bx  lr    
 80022f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002300:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002304:	0800faec 	.word	0x0800faec
  ldr r2, =_sbss
 8002308:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800230c:	20002118 	.word	0x20002118

08002310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <ADC_IRQHandler>
	...

08002314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_Init+0x40>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_Init+0x40>)
 800232a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HAL_Init+0x40>)
 8002336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233c:	2003      	movs	r0, #3
 800233e:	f000 fd2b 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002342:	200f      	movs	r0, #15
 8002344:	f000 f808 	bl	8002358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002348:	f7ff fcd8 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023c00 	.word	0x40023c00

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_InitTick+0x54>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x58>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fd43 	bl	8002e02 <HAL_SYSTICK_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 fd0b 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <HAL_InitTick+0x5c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000008 	.word	0x20000008
 80023dc:	200004f8 	.word	0x200004f8

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200004f8 	.word	0x200004f8

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000008 	.word	0x20000008

08002440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e033      	b.n	80024be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fc74 	bl	8001d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002486:	f023 0302 	bic.w	r3, r3, #2
 800248a:	f043 0202 	orr.w	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fab4 	bl	8002a00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
 80024ae:	e001      	b.n	80024b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Start+0x1a>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0b2      	b.n	8002648 <HAL_ADC_Start+0x180>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d018      	beq.n	800252a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002508:	4b52      	ldr	r3, [pc, #328]	; (8002654 <HAL_ADC_Start+0x18c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_ADC_Start+0x190>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9a      	lsrs	r2, r3, #18
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800251c:	e002      	b.n	8002524 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3b01      	subs	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d17a      	bne.n	800262e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002562:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	d106      	bne.n	8002586 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f023 0206 	bic.w	r2, r3, #6
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
 8002584:	e002      	b.n	800258c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_ADC_Start+0x194>)
 8002596:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d12a      	bne.n	8002604 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_ADC_Start+0x198>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d015      	beq.n	80025e4 <HAL_ADC_Start+0x11c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a29      	ldr	r2, [pc, #164]	; (8002664 <HAL_ADC_Start+0x19c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d105      	bne.n	80025ce <HAL_ADC_Start+0x106>
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_ADC_Start+0x194>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_ADC_Start+0x1a0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d136      	bne.n	8002646 <HAL_ADC_Start+0x17e>
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_ADC_Start+0x194>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d130      	bne.n	8002646 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d129      	bne.n	8002646 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	e020      	b.n	8002646 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_ADC_Start+0x198>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11b      	bne.n	8002646 <HAL_ADC_Start+0x17e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d114      	bne.n	8002646 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	e00b      	b.n	8002646 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	20000000 	.word	0x20000000
 8002658:	431bde83 	.word	0x431bde83
 800265c:	40012300 	.word	0x40012300
 8002660:	40012000 	.word	0x40012000
 8002664:	40012100 	.word	0x40012100
 8002668:	40012200 	.word	0x40012200

0800266c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002688:	d113      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002698:	d10b      	bne.n	80026b2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e063      	b.n	800277a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026b2:	f7ff fe95 	bl	80023e0 <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026b8:	e021      	b.n	80026fe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d01d      	beq.n	80026fe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x6c>
 80026c8:	f7ff fe8a 	bl	80023e0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d212      	bcs.n	80026fe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d00b      	beq.n	80026fe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e03d      	b.n	800277a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d1d6      	bne.n	80026ba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0212 	mvn.w	r2, #18
 8002714:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d123      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11f      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e113      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x244>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b09      	cmp	r3, #9
 80027c6:	d925      	bls.n	8002814 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	3b1e      	subs	r3, #30
 80027de:	2207      	movs	r2, #7
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43da      	mvns	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	400a      	ands	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68d9      	ldr	r1, [r3, #12]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	4603      	mov	r3, r0
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4403      	add	r3, r0
 8002806:	3b1e      	subs	r3, #30
 8002808:	409a      	lsls	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	e022      	b.n	800285a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	2207      	movs	r2, #7
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	400a      	ands	r2, r1
 8002836:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	4603      	mov	r3, r0
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4403      	add	r3, r0
 8002850:	409a      	lsls	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b06      	cmp	r3, #6
 8002860:	d824      	bhi.n	80028ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3b05      	subs	r3, #5
 8002874:	221f      	movs	r2, #31
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	400a      	ands	r2, r1
 8002882:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	3b05      	subs	r3, #5
 800289e:	fa00 f203 	lsl.w	r2, r0, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
 80028aa:	e04c      	b.n	8002946 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d824      	bhi.n	80028fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b23      	subs	r3, #35	; 0x23
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43da      	mvns	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	400a      	ands	r2, r1
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b23      	subs	r3, #35	; 0x23
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
 80028fc:	e023      	b.n	8002946 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3b41      	subs	r3, #65	; 0x41
 8002910:	221f      	movs	r2, #31
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	400a      	ands	r2, r1
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b41      	subs	r3, #65	; 0x41
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_ADC_ConfigChannel+0x250>)
 8002948:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a28      	ldr	r2, [pc, #160]	; (80029f0 <HAL_ADC_ConfigChannel+0x254>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d10f      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1d8>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b12      	cmp	r3, #18
 800295a:	d10b      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_ADC_ConfigChannel+0x254>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d12b      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x23a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_ADC_ConfigChannel+0x258>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d003      	beq.n	8002990 <HAL_ADC_ConfigChannel+0x1f4>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b11      	cmp	r3, #17
 800298e:	d122      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <HAL_ADC_ConfigChannel+0x258>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d111      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_ADC_ConfigChannel+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_ADC_ConfigChannel+0x260>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	0c9a      	lsrs	r2, r3, #18
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029c8:	e002      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f9      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40012300 	.word	0x40012300
 80029f0:	40012000 	.word	0x40012000
 80029f4:	10000012 	.word	0x10000012
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a08:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <ADC_Init+0x1f0>)
 8002a0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	021a      	lsls	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <ADC_Init+0x1f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d022      	beq.n	8002ade <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	e00f      	b.n	8002afe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0202 	bic.w	r2, r2, #2
 8002b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7e1b      	ldrb	r3, [r3, #24]
 8002b18:	005a      	lsls	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01b      	beq.n	8002b64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	3b01      	subs	r3, #1
 8002b58:	035a      	lsls	r2, r3, #13
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	e007      	b.n	8002b74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	051a      	lsls	r2, r3, #20
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bb6:	025a      	lsls	r2, r3, #9
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6899      	ldr	r1, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	029a      	lsls	r2, r3, #10
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40012300 	.word	0x40012300
 8002bf4:	0f000001 	.word	0x0f000001

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff29 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff3e 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff31 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e165      	b.n	8003104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e38:	2201      	movs	r2, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	f040 8154 	bne.w	80030fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d005      	beq.n	8002e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d130      	bne.n	8002ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 0201 	and.w	r2, r3, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d017      	beq.n	8002f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d123      	bne.n	8002f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	08da      	lsrs	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3208      	adds	r2, #8
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0203 	and.w	r2, r3, #3
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80ae 	beq.w	80030fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_GPIO_Init+0x300>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a5c      	ldr	r2, [pc, #368]	; (800311c <HAL_GPIO_Init+0x300>)
 8002fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b5a      	ldr	r3, [pc, #360]	; (800311c <HAL_GPIO_Init+0x300>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fbe:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_GPIO_Init+0x304>)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4f      	ldr	r2, [pc, #316]	; (8003124 <HAL_GPIO_Init+0x308>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d025      	beq.n	8003036 <HAL_GPIO_Init+0x21a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4e      	ldr	r2, [pc, #312]	; (8003128 <HAL_GPIO_Init+0x30c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01f      	beq.n	8003032 <HAL_GPIO_Init+0x216>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4d      	ldr	r2, [pc, #308]	; (800312c <HAL_GPIO_Init+0x310>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0x212>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4c      	ldr	r2, [pc, #304]	; (8003130 <HAL_GPIO_Init+0x314>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0x20e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4b      	ldr	r2, [pc, #300]	; (8003134 <HAL_GPIO_Init+0x318>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00d      	beq.n	8003026 <HAL_GPIO_Init+0x20a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <HAL_GPIO_Init+0x31c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <HAL_GPIO_Init+0x206>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_GPIO_Init+0x320>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_GPIO_Init+0x202>
 800301a:	2306      	movs	r3, #6
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 800301e:	2307      	movs	r3, #7
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x21c>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	; (8003120 <HAL_GPIO_Init+0x304>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_GPIO_Init+0x324>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a31      	ldr	r2, [pc, #196]	; (8003140 <HAL_GPIO_Init+0x324>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_GPIO_Init+0x324>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_GPIO_Init+0x324>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_GPIO_Init+0x324>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_GPIO_Init+0x324>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_GPIO_Init+0x324>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f8:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_GPIO_Init+0x324>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae96 	bls.w	8002e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40013c00 	.word	0x40013c00

08003144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e001      	b.n	8003166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
 8003180:	4613      	mov	r3, r2
 8003182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003184:	787b      	ldrb	r3, [r7, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003190:	e003      	b.n	800319a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	619a      	str	r2, [r3, #24]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e12b      	b.n	8003412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe fe00 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800320a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800320c:	f001 fccc 	bl	8004ba8 <HAL_RCC_GetPCLK1Freq>
 8003210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a81      	ldr	r2, [pc, #516]	; (800341c <HAL_I2C_Init+0x274>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d807      	bhi.n	800322c <HAL_I2C_Init+0x84>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a80      	ldr	r2, [pc, #512]	; (8003420 <HAL_I2C_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	bf94      	ite	ls
 8003224:	2301      	movls	r3, #1
 8003226:	2300      	movhi	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e006      	b.n	800323a <HAL_I2C_Init+0x92>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a7d      	ldr	r2, [pc, #500]	; (8003424 <HAL_I2C_Init+0x27c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	bf94      	ite	ls
 8003234:	2301      	movls	r3, #1
 8003236:	2300      	movhi	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0e7      	b.n	8003412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a78      	ldr	r2, [pc, #480]	; (8003428 <HAL_I2C_Init+0x280>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0c9b      	lsrs	r3, r3, #18
 800324c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_I2C_Init+0x274>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d802      	bhi.n	800327c <HAL_I2C_Init+0xd4>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3301      	adds	r3, #1
 800327a:	e009      	b.n	8003290 <HAL_I2C_Init+0xe8>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	4a69      	ldr	r2, [pc, #420]	; (800342c <HAL_I2C_Init+0x284>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	3301      	adds	r3, #1
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	430b      	orrs	r3, r1
 8003296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	495c      	ldr	r1, [pc, #368]	; (800341c <HAL_I2C_Init+0x274>)
 80032ac:	428b      	cmp	r3, r1
 80032ae:	d819      	bhi.n	80032e4 <HAL_I2C_Init+0x13c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e59      	subs	r1, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032c4:	400b      	ands	r3, r1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_I2C_Init+0x138>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e59      	subs	r1, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032de:	e051      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e04f      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_I2C_Init+0x168>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e012      	b.n	8003336 <HAL_I2C_Init+0x18e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Init+0x196>
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <HAL_I2C_Init+0x1bc>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1e58      	subs	r0, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	440b      	add	r3, r1
 8003354:	fbb0 f3f3 	udiv	r3, r0, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	e00f      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1e58      	subs	r0, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	0099      	lsls	r1, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	fbb0 f3f3 	udiv	r3, r0, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6809      	ldr	r1, [r1, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6911      	ldr	r1, [r2, #16]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68d2      	ldr	r2, [r2, #12]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	000186a0 	.word	0x000186a0
 8003420:	001e847f 	.word	0x001e847f
 8003424:	003d08ff 	.word	0x003d08ff
 8003428:	431bde83 	.word	0x431bde83
 800342c:	10624dd3 	.word	0x10624dd3

08003430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b08f      	sub	sp, #60	; 0x3c
 8003434:	af0a      	add	r7, sp, #40	; 0x28
 8003436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e116      	b.n	8003670 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f007 f889 	bl	800a574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2203      	movs	r2, #3
 8003466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f003 fb3a 	bl	8006afa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	687e      	ldr	r6, [r7, #4]
 800348e:	466d      	mov	r5, sp
 8003490:	f106 0410 	add.w	r4, r6, #16
 8003494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800349a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800349c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034a4:	1d33      	adds	r3, r6, #4
 80034a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f003 fa11 	bl	80068d0 <USB_CoreInit>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0d7      	b.n	8003670 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fb28 	bl	8006b1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e04a      	b.n	8003568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	333d      	adds	r3, #61	; 0x3d
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	333c      	adds	r3, #60	; 0x3c
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	b298      	uxth	r0, r3
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3344      	adds	r3, #68	; 0x44
 800350e:	4602      	mov	r2, r0
 8003510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3340      	adds	r3, #64	; 0x40
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3348      	adds	r3, #72	; 0x48
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334c      	adds	r3, #76	; 0x4c
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3354      	adds	r3, #84	; 0x54
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	3301      	adds	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d3af      	bcc.n	80034d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e044      	b.n	8003602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	3301      	adds	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	d3b5      	bcc.n	8003578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	687e      	ldr	r6, [r7, #4]
 8003614:	466d      	mov	r5, sp
 8003616:	f106 0410 	add.w	r4, r6, #16
 800361a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003626:	e885 0003 	stmia.w	r5, {r0, r1}
 800362a:	1d33      	adds	r3, r6, #4
 800362c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362e:	6838      	ldr	r0, [r7, #0]
 8003630:	f003 fac0 	bl	8006bb4 <USB_DevInit>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e014      	b.n	8003670 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b01      	cmp	r3, #1
 800365c:	d102      	bne.n	8003664 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 f98c 	bl	800497c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fc02 	bl	8007e72 <USB_DevDisconnect>

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003678 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_PCD_Start+0x1c>
 8003690:	2302      	movs	r3, #2
 8003692:	e020      	b.n	80036d6 <HAL_PCD_Start+0x5e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d109      	bne.n	80036b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d005      	beq.n	80036b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fa0b 	bl	8006ad8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f004 fbb2 	bl	8007e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036de:	b590      	push	{r4, r7, lr}
 80036e0:	b08d      	sub	sp, #52	; 0x34
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 fc70 	bl	8007fda <USB_GetMode>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 84b7 	bne.w	8004070 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f004 fbd4 	bl	8007eb4 <USB_ReadInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 84ad 	beq.w	800406e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f004 fbc1 	bl	8007eb4 <USB_ReadInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d107      	bne.n	800374c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f002 0202 	and.w	r2, r2, #2
 800374a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f004 fbaf 	bl	8007eb4 <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b10      	cmp	r3, #16
 800375e:	d161      	bne.n	8003824 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	0c5b      	lsrs	r3, r3, #17
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	2b02      	cmp	r3, #2
 800379a:	d124      	bne.n	80037e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d035      	beq.n	8003814 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6a38      	ldr	r0, [r7, #32]
 80037bc:	f004 f9e6 	bl	8007b8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037cc:	441a      	add	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	6a1a      	ldr	r2, [r3, #32]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037de:	441a      	add	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]
 80037e4:	e016      	b.n	8003814 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	0c5b      	lsrs	r3, r3, #17
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d110      	bne.n	8003814 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037f8:	2208      	movs	r2, #8
 80037fa:	4619      	mov	r1, r3
 80037fc:	6a38      	ldr	r0, [r7, #32]
 80037fe:	f004 f9c5 	bl	8007b8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800380e:	441a      	add	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0210 	orr.w	r2, r2, #16
 8003822:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f004 fb43 	bl	8007eb4 <USB_ReadInterrupts>
 800382e:	4603      	mov	r3, r0
 8003830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003834:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003838:	f040 80a7 	bne.w	800398a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f004 fb48 	bl	8007eda <USB_ReadDevAllOutEpInterrupt>
 800384a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800384c:	e099      	b.n	8003982 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 808e 	beq.w	8003976 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fb6c 	bl	8007f42 <USB_ReadDevOutEPInterrupt>
 800386a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	461a      	mov	r2, r3
 8003884:	2301      	movs	r3, #1
 8003886:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fef0 	bl	8004670 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	2308      	movs	r3, #8
 80038aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 ffc6 	bl	8004840 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	2310      	movs	r3, #16
 80038ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d030      	beq.n	800393c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d109      	bne.n	80038fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	3304      	adds	r3, #4
 800390e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	78db      	ldrb	r3, [r3, #3]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f006 ff41 	bl	800a7ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003936:	461a      	mov	r2, r3
 8003938:	2302      	movs	r3, #2
 800393a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	2320      	movs	r3, #32
 8003956:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003974:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f af62 	bne.w	800384e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f004 fa90 	bl	8007eb4 <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800399e:	f040 80db 	bne.w	8003b58 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 fab1 	bl	8007f0e <USB_ReadDevAllInEpInterrupt>
 80039ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039b2:	e0cd      	b.n	8003b50 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80c2 	beq.w	8003b44 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fad7 	bl	8007f7e <USB_ReadDevInEPInterrupt>
 80039d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d057      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69f9      	ldr	r1, [r7, #28]
 80039f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fc:	4013      	ands	r3, r2
 80039fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2301      	movs	r3, #1
 8003a10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d132      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334c      	adds	r3, #76	; 0x4c
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4403      	add	r3, r0
 8003a3a:	3348      	adds	r3, #72	; 0x48
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4419      	add	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4403      	add	r3, r0
 8003a4e:	334c      	adds	r3, #76	; 0x4c
 8003a50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d113      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x3a2>
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3354      	adds	r3, #84	; 0x54
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d108      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	f004 fade 	bl	800803c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f006 fe0b 	bl	800a6a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	461a      	mov	r2, r3
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d023      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aec:	6a38      	ldr	r0, [r7, #32]
 8003aee:	f003 f9bf 	bl	8006e70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	3338      	adds	r3, #56	; 0x38
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	78db      	ldrb	r3, [r3, #3]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f006 fe58 	bl	800a7d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2302      	movs	r3, #2
 8003b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fd08 	bl	8004554 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	3301      	adds	r3, #1
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f47f af2e 	bne.w	80039b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 f9a9 	bl	8007eb4 <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b6c:	d122      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d108      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b94:	2100      	movs	r1, #0
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f006 ffd2 	bl	800ab40 <HAL_PCDEx_LPM_Callback>
 8003b9c:	e002      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f006 fdf6 	bl	800a790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 f97b 	bl	8007eb4 <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc8:	d112      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f006 fdb2 	bl	800a744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bee:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f004 f95d 	bl	8007eb4 <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c04:	d121      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003c14:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d111      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f006 ff7f 	bl	800ab40 <HAL_PCDEx_LPM_Callback>
 8003c42:	e002      	b.n	8003c4a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f006 fd7d 	bl	800a744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 f930 	bl	8007eb4 <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	f040 80b7 	bne.w	8003dd0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2110      	movs	r1, #16
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 f8f7 	bl	8006e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c86:	e046      	b.n	8003d16 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	3301      	adds	r3, #1
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d3b3      	bcc.n	8003c88 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4c:	f043 030b 	orr.w	r3, r3, #11
 8003d50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d62:	f043 030b 	orr.w	r3, r3, #11
 8003d66:	6453      	str	r3, [r2, #68]	; 0x44
 8003d68:	e015      	b.n	8003d96 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d7c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d80:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d90:	f043 030b 	orr.w	r3, r3, #11
 8003d94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003da8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f004 f93e 	bl	800803c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f004 f86d 	bl	8007eb4 <USB_ReadInterrupts>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d124      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 f903 	bl	8007ff6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 f8b8 	bl	8006f6a <USB_GetDevSpeed>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681c      	ldr	r4, [r3, #0]
 8003e06:	f000 fec3 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8003e0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	4620      	mov	r0, r4
 8003e16:	f002 fdbd 	bl	8006994 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f006 fc69 	bl	800a6f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f004 f83d 	bl	8007eb4 <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d10a      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f006 fc46 	bl	800a6d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 0208 	and.w	r2, r2, #8
 8003e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 f828 	bl	8007eb4 <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b80      	cmp	r3, #128	; 0x80
 8003e6c:	d122      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	e014      	b.n	8003eaa <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb27 	bl	80044f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3e5      	bcc.n	8003e80 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 fffb 	bl	8007eb4 <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec8:	d13b      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eca:	2301      	movs	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e02b      	b.n	8003f28 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3340      	adds	r3, #64	; 0x40
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d115      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ef6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da12      	bge.n	8003f22 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	333f      	adds	r3, #63	; 0x3f
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fae8 	bl	80044f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	3301      	adds	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3ce      	bcc.n	8003ed0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 ffb4 	bl	8007eb4 <USB_ReadInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f56:	d155      	bne.n	8004004 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f58:	2301      	movs	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	e045      	b.n	8003fea <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d12e      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da2b      	bge.n	8003fe4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d121      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe0:	6053      	str	r3, [r2, #4]
            break;
 8003fe2:	e007      	b.n	8003ff4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3b4      	bcc.n	8003f5e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f003 ff53 	bl	8007eb4 <USB_ReadInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d10a      	bne.n	8004030 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f006 fbea 	bl	800a7f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800402e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f003 ff3d 	bl	8007eb4 <USB_ReadInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d115      	bne.n	8004070 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f006 fbda 	bl	800a810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	e000      	b.n	8004070 <HAL_PCD_IRQHandler+0x992>
      return;
 800406e:	bf00      	nop
    }
  }
}
 8004070:	3734      	adds	r7, #52	; 0x34
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}

08004076 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_PCD_SetAddress+0x1a>
 800408c:	2302      	movs	r3, #2
 800408e:	e013      	b.n	80040b8 <HAL_PCD_SetAddress+0x42>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f003 fe9b 	bl	8007de4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	70fb      	strb	r3, [r7, #3]
 80040d2:	460b      	mov	r3, r1
 80040d4:	803b      	strh	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da0f      	bge.n	8004106 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	3338      	adds	r3, #56	; 0x38
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	705a      	strb	r2, [r3, #1]
 8004104:	e00f      	b.n	8004126 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	f003 020f 	and.w	r2, r3, #15
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004132:	883a      	ldrh	r2, [r7, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	78ba      	ldrb	r2, [r7, #2]
 800413c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004150:	78bb      	ldrb	r3, [r7, #2]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d102      	bne.n	800415c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_PCD_EP_Open+0xaa>
 8004166:	2302      	movs	r3, #2
 8004168:	e00e      	b.n	8004188 <HAL_PCD_EP_Open+0xc8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	4618      	mov	r0, r3
 800417a:	f002 ff1b 	bl	8006fb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004186:	7afb      	ldrb	r3, [r7, #11]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800419c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da0f      	bge.n	80041c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 020f 	and.w	r2, r3, #15
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3338      	adds	r3, #56	; 0x38
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	705a      	strb	r2, [r3, #1]
 80041c2:	e00f      	b.n	80041e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_PCD_EP_Close+0x6e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e00e      	b.n	800421c <HAL_PCD_EP_Close+0x8c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	4618      	mov	r0, r3
 800420e:	f002 ff59 	bl	80070c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	460b      	mov	r3, r1
 8004232:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004234:	7afb      	ldrb	r3, [r7, #11]
 8004236:	f003 020f 	and.w	r2, r3, #15
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	3304      	adds	r3, #4
 800424c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2200      	movs	r2, #0
 8004264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	b2da      	uxtb	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d102      	bne.n	8004280 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	f003 fa38 	bl	800770c <USB_EP0StartXfer>
 800429c:	e008      	b.n	80042b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	f002 ffe6 	bl	800727c <USB_EPStartXfer>
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042dc:	681b      	ldr	r3, [r3, #0]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	460b      	mov	r3, r1
 80042f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	3338      	adds	r3, #56	; 0x38
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2201      	movs	r2, #1
 8004328:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	b2da      	uxtb	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d102      	bne.n	8004344 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004344:	7afb      	ldrb	r3, [r7, #11]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	f003 f9d6 	bl	800770c <USB_EP0StartXfer>
 8004360:	e008      	b.n	8004374 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	6979      	ldr	r1, [r7, #20]
 8004370:	f002 ff84 	bl	800727c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	d901      	bls.n	800439c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e050      	b.n	800443e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da0f      	bge.n	80043c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	3338      	adds	r3, #56	; 0x38
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	705a      	strb	r2, [r3, #1]
 80043c2:	e00d      	b.n	80043e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	3304      	adds	r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_PCD_EP_SetStall+0x82>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e01e      	b.n	800443e <HAL_PCD_EP_SetStall+0xc0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	4618      	mov	r0, r3
 8004410:	f003 fc14 	bl	8007c3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	b2d9      	uxtb	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800442e:	461a      	mov	r2, r3
 8004430:	f003 fe04 	bl	800803c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 020f 	and.w	r2, r3, #15
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	429a      	cmp	r2, r3
 800445e:	d901      	bls.n	8004464 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e042      	b.n	80044ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004468:	2b00      	cmp	r3, #0
 800446a:	da0f      	bge.n	800448c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 020f 	and.w	r2, r3, #15
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	3338      	adds	r3, #56	; 0x38
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	3304      	adds	r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	705a      	strb	r2, [r3, #1]
 800448a:	e00f      	b.n	80044ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3304      	adds	r3, #4
 80044a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_PCD_EP_ClrStall+0x86>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e00e      	b.n	80044ea <HAL_PCD_EP_ClrStall+0xa4>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68f9      	ldr	r1, [r7, #12]
 80044da:	4618      	mov	r0, r3
 80044dc:	f003 fc1c 	bl	8007d18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004502:	2b00      	cmp	r3, #0
 8004504:	da0c      	bge.n	8004520 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	f003 020f 	and.w	r2, r3, #15
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	3338      	adds	r3, #56	; 0x38
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e00c      	b.n	800453a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	4618      	mov	r0, r3
 8004542:	f003 fa3b 	bl	80079bc <USB_EPStopXfer>
 8004546:	4603      	mov	r3, r0
 8004548:	72fb      	strb	r3, [r7, #11]

  return ret;
 800454a:	7afb      	ldrb	r3, [r7, #11]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	3338      	adds	r3, #56	; 0x38
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	3304      	adds	r3, #4
 800457a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d901      	bls.n	800458c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e06c      	b.n	8004666 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d902      	bls.n	80045a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3303      	adds	r3, #3
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045b0:	e02b      	b.n	800460a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d902      	bls.n	80045ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3303      	adds	r3, #3
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6919      	ldr	r1, [r3, #16]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4603      	mov	r3, r0
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f003 fa8f 	bl	8007b10 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	441a      	add	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	441a      	add	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	b29b      	uxth	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d809      	bhi.n	8004634 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004628:	429a      	cmp	r2, r3
 800462a:	d203      	bcs.n	8004634 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1be      	bne.n	80045b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	429a      	cmp	r2, r3
 800463e:	d811      	bhi.n	8004664 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	2201      	movs	r2, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	43db      	mvns	r3, r3
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004660:	4013      	ands	r3, r2
 8004662:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	333c      	adds	r3, #60	; 0x3c
 8004688:	3304      	adds	r3, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d17b      	bne.n	800479e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4a61      	ldr	r2, [pc, #388]	; (8004838 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	f240 80b9 	bls.w	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80b3 	beq.w	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	461a      	mov	r2, r3
 80046d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d8:	6093      	str	r3, [r2, #8]
 80046da:	e0a7      	b.n	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2320      	movs	r3, #32
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	e098      	b.n	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 8093 	bne.w	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4a4b      	ldr	r2, [pc, #300]	; (8004838 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d90f      	bls.n	800472e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	461a      	mov	r2, r3
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	6093      	str	r3, [r2, #8]
 800472c:	e07e      	b.n	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4413      	add	r3, r2
 8004740:	3304      	adds	r3, #4
 8004742:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	0159      	lsls	r1, r3, #5
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	440b      	add	r3, r1
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d114      	bne.n	8004790 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004778:	461a      	mov	r2, r3
 800477a:	2101      	movs	r1, #1
 800477c:	f003 fc5e 	bl	800803c <USB_EP0_OutStart>
 8004780:	e006      	b.n	8004790 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	441a      	add	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f005 ff68 	bl	800a66c <HAL_PCD_DataOutStageCallback>
 800479c:	e046      	b.n	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4a26      	ldr	r2, [pc, #152]	; (800483c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d124      	bne.n	80047f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	461a      	mov	r2, r3
 80047be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c2:	6093      	str	r3, [r2, #8]
 80047c4:	e032      	b.n	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	2320      	movs	r3, #32
 80047e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f005 ff3f 	bl	800a66c <HAL_PCD_DataOutStageCallback>
 80047ee:	e01d      	b.n	800482c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d114      	bne.n	8004820 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004818:	461a      	mov	r2, r3
 800481a:	2100      	movs	r1, #0
 800481c:	f003 fc0e 	bl	800803c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f005 ff20 	bl	800a66c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	4f54300a 	.word	0x4f54300a
 800483c:	4f54310a 	.word	0x4f54310a

08004840 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	333c      	adds	r3, #60	; 0x3c
 8004858:	3304      	adds	r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d90e      	bls.n	8004894 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	461a      	mov	r2, r3
 800488e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004892:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f005 fed7 	bl	800a648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d90c      	bls.n	80048bc <PCD_EP_OutSetupPacket_int+0x7c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d108      	bne.n	80048bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048b4:	461a      	mov	r2, r3
 80048b6:	2101      	movs	r1, #1
 80048b8:	f003 fbc0 	bl	800803c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	4f54300a 	.word	0x4f54300a

080048cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
 80048d8:	4613      	mov	r3, r2
 80048da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048ea:	883b      	ldrh	r3, [r7, #0]
 80048ec:	0419      	lsls	r1, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28
 80048f8:	e028      	b.n	800494c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
 800490c:	e00d      	b.n	800492a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	3340      	adds	r3, #64	; 0x40
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4413      	add	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	3301      	adds	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	3b01      	subs	r3, #1
 8004930:	429a      	cmp	r2, r3
 8004932:	d3ec      	bcc.n	800490e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004934:	883b      	ldrh	r3, [r7, #0]
 8004936:	0418      	lsls	r0, r3, #16
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	3b01      	subs	r3, #1
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	4302      	orrs	r2, r0
 8004944:	3340      	adds	r3, #64	; 0x40
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	887a      	ldrh	r2, [r7, #2]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ae:	f043 0303 	orr.w	r3, r3, #3
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0cc      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b65      	ldr	r3, [pc, #404]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0b8      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b59      	ldr	r3, [pc, #356]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a30:	4b53      	ldr	r3, [pc, #332]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a52      	ldr	r2, [pc, #328]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	494d      	ldr	r1, [pc, #308]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d044      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d119      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e07f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e067      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b37      	ldr	r3, [pc, #220]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4934      	ldr	r1, [pc, #208]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fc94 	bl	80023e0 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fd fc90 	bl	80023e0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e04f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d20c      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4916      	ldr	r1, [pc, #88]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4a:	f000 fb6b 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490a      	ldr	r1, [pc, #40]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fbf4 	bl	8002358 <HAL_InitTick>

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800f620 	.word	0x0800f620
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000004 	.word	0x20000004

08004b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000000 	.word	0x20000000

08004ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bac:	f7ff fff0 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0a9b      	lsrs	r3, r3, #10
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800f630 	.word	0x0800f630

08004bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004c08:	4b6f      	ldr	r3, [pc, #444]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	496c      	ldr	r1, [pc, #432]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004c26:	2301      	movs	r3, #1
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004c36:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	4960      	ldr	r1, [pc, #384]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004c54:	2301      	movs	r3, #1
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d017      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c64:	4b58      	ldr	r3, [pc, #352]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	4955      	ldr	r1, [pc, #340]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c82:	d101      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004c84:	2301      	movs	r3, #1
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004c90:	2301      	movs	r3, #1
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d017      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ca0:	4b49      	ldr	r3, [pc, #292]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	4946      	ldr	r1, [pc, #280]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 808a 	beq.w	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cfa:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a33      	ldr	r2, [pc, #204]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d06:	f7fd fb6b 	bl	80023e0 <HAL_GetTick>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fd fb67 	bl	80023e0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e278      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d20:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d34:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02f      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d44:	6a3a      	ldr	r2, [r7, #32]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d028      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d54:	4b1e      	ldr	r3, [pc, #120]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d114      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fd fb35 	bl	80023e0 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fb31 	bl	80023e0 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e240      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da8:	d114      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbe:	4902      	ldr	r1, [pc, #8]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]
 8004dc4:	e00c      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42470e40 	.word	0x42470e40
 8004dd4:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a49      	ldr	r2, [pc, #292]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dde:	6093      	str	r3, [r2, #8]
 8004de0:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	4944      	ldr	r1, [pc, #272]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004e04:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004e06:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e14:	4b3a      	ldr	r3, [pc, #232]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	4937      	ldr	r1, [pc, #220]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e44:	492e      	ldr	r1, [pc, #184]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d011      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e58:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	4926      	ldr	r1, [pc, #152]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e76:	d101      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	491a      	ldr	r1, [pc, #104]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb8:	4911      	ldr	r1, [pc, #68]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec8:	d101      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	f040 80ff 	bne.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd fa7b 	bl	80023e0 <HAL_GetTick>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eec:	e00e      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eee:	f7fd fa77 	bl	80023e0 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d907      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e188      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004f00:	40023800 	.word	0x40023800
 8004f04:	424711e0 	.word	0x424711e0
 8004f08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f0c:	4b7e      	ldr	r3, [pc, #504]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ea      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d028      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d124      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004f40:	4b71      	ldr	r3, [pc, #452]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f52:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f58:	0e1b      	lsrs	r3, r3, #24
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	019b      	lsls	r3, r3, #6
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	3b01      	subs	r3, #1
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	061b      	lsls	r3, r3, #24
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	071b      	lsls	r3, r3, #28
 8004f82:	4961      	ldr	r1, [pc, #388]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d004      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d035      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb4:	d130      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004fb6:	4b54      	ldr	r3, [pc, #336]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fc8:	4b4f      	ldr	r3, [pc, #316]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fce:	0f1b      	lsrs	r3, r3, #28
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	019b      	lsls	r3, r3, #6
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	071b      	lsls	r3, r3, #28
 8004ff8:	4943      	ldr	r1, [pc, #268]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005000:	4b41      	ldr	r3, [pc, #260]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005006:	f023 021f 	bic.w	r2, r3, #31
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	493d      	ldr	r1, [pc, #244]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d029      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502c:	d124      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800502e:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	3301      	adds	r3, #1
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005040:	4b31      	ldr	r3, [pc, #196]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	0f1b      	lsrs	r3, r3, #28
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	019b      	lsls	r3, r3, #6
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	3b01      	subs	r3, #1
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	071b      	lsls	r3, r3, #28
 8005070:	4925      	ldr	r1, [pc, #148]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005080:	2b00      	cmp	r3, #0
 8005082:	d016      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	3b01      	subs	r3, #1
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	071b      	lsls	r3, r3, #28
 80050aa:	4917      	ldr	r1, [pc, #92]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b8:	f7fd f992 	bl	80023e0 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c0:	f7fd f98e 	bl	80023e0 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e09f      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d2:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	f040 8095 	bne.w	8005210 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fd f978 	bl	80023e0 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050f2:	e00f      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050f4:	f7fd f974 	bl	80023e0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d908      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e085      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	42470068 	.word	0x42470068
 8005110:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005114:	4b41      	ldr	r3, [pc, #260]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005120:	d0e8      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d02b      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	2b00      	cmp	r3, #0
 8005148:	d127      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800514a:	4b34      	ldr	r3, [pc, #208]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	3301      	adds	r3, #1
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	019b      	lsls	r3, r3, #6
 8005166:	431a      	orrs	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	4928      	ldr	r1, [pc, #160]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005186:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	3b01      	subs	r3, #1
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	4922      	ldr	r1, [pc, #136]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01d      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ae:	d118      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051b0:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	0e1b      	lsrs	r3, r3, #24
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	019b      	lsls	r3, r3, #6
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	3b01      	subs	r3, #1
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	4910      	ldr	r1, [pc, #64]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e8:	f7fd f8fa 	bl	80023e0 <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051f0:	f7fd f8f6 	bl	80023e0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e007      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800520a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520e:	d1ef      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3730      	adds	r7, #48	; 0x30
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	42470070 	.word	0x42470070

08005224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b0ae      	sub	sp, #184	; 0xb8
 800522a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800524a:	4bcb      	ldr	r3, [pc, #812]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b0c      	cmp	r3, #12
 8005254:	f200 8204 	bhi.w	8005660 <HAL_RCC_GetSysClockFreq+0x43c>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <HAL_RCC_GetSysClockFreq+0x3c>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005295 	.word	0x08005295
 8005264:	08005661 	.word	0x08005661
 8005268:	08005661 	.word	0x08005661
 800526c:	08005661 	.word	0x08005661
 8005270:	0800529d 	.word	0x0800529d
 8005274:	08005661 	.word	0x08005661
 8005278:	08005661 	.word	0x08005661
 800527c:	08005661 	.word	0x08005661
 8005280:	080052a5 	.word	0x080052a5
 8005284:	08005661 	.word	0x08005661
 8005288:	08005661 	.word	0x08005661
 800528c:	08005661 	.word	0x08005661
 8005290:	08005495 	.word	0x08005495
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4bb9      	ldr	r3, [pc, #740]	; (800557c <HAL_RCC_GetSysClockFreq+0x358>)
 8005296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800529a:	e1e5      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800529c:	4bb7      	ldr	r3, [pc, #732]	; (800557c <HAL_RCC_GetSysClockFreq+0x358>)
 800529e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80052a2:	e1e1      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a4:	4bb4      	ldr	r3, [pc, #720]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b0:	4bb1      	ldr	r3, [pc, #708]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d071      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052bc:	4bae      	ldr	r3, [pc, #696]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	099b      	lsrs	r3, r3, #6
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80052cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052d8:	2300      	movs	r3, #0
 80052da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052e2:	4622      	mov	r2, r4
 80052e4:	462b      	mov	r3, r5
 80052e6:	f04f 0000 	mov.w	r0, #0
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	0159      	lsls	r1, r3, #5
 80052f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f4:	0150      	lsls	r0, r2, #5
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4621      	mov	r1, r4
 80052fc:	1a51      	subs	r1, r2, r1
 80052fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005300:	4629      	mov	r1, r5
 8005302:	eb63 0301 	sbc.w	r3, r3, r1
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005314:	4649      	mov	r1, r9
 8005316:	018b      	lsls	r3, r1, #6
 8005318:	4641      	mov	r1, r8
 800531a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800531e:	4641      	mov	r1, r8
 8005320:	018a      	lsls	r2, r1, #6
 8005322:	4641      	mov	r1, r8
 8005324:	1a51      	subs	r1, r2, r1
 8005326:	63b9      	str	r1, [r7, #56]	; 0x38
 8005328:	4649      	mov	r1, r9
 800532a:	eb63 0301 	sbc.w	r3, r3, r1
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800533c:	4649      	mov	r1, r9
 800533e:	00cb      	lsls	r3, r1, #3
 8005340:	4641      	mov	r1, r8
 8005342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005346:	4641      	mov	r1, r8
 8005348:	00ca      	lsls	r2, r1, #3
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	4603      	mov	r3, r0
 8005350:	4622      	mov	r2, r4
 8005352:	189b      	adds	r3, r3, r2
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
 8005356:	462b      	mov	r3, r5
 8005358:	460a      	mov	r2, r1
 800535a:	eb42 0303 	adc.w	r3, r2, r3
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800536c:	4629      	mov	r1, r5
 800536e:	028b      	lsls	r3, r1, #10
 8005370:	4621      	mov	r1, r4
 8005372:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005376:	4621      	mov	r1, r4
 8005378:	028a      	lsls	r2, r1, #10
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800538c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005390:	f7fb fc9a 	bl	8000cc8 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800539e:	e067      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a0:	4b75      	ldr	r3, [pc, #468]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	099b      	lsrs	r3, r3, #6
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80053b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ba:	2300      	movs	r3, #0
 80053bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f04f 0000 	mov.w	r0, #0
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	0159      	lsls	r1, r3, #5
 80053d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d4:	0150      	lsls	r0, r2, #5
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4621      	mov	r1, r4
 80053dc:	1a51      	subs	r1, r2, r1
 80053de:	62b9      	str	r1, [r7, #40]	; 0x28
 80053e0:	4629      	mov	r1, r5
 80053e2:	eb63 0301 	sbc.w	r3, r3, r1
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80053f4:	4649      	mov	r1, r9
 80053f6:	018b      	lsls	r3, r1, #6
 80053f8:	4641      	mov	r1, r8
 80053fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053fe:	4641      	mov	r1, r8
 8005400:	018a      	lsls	r2, r1, #6
 8005402:	4641      	mov	r1, r8
 8005404:	ebb2 0a01 	subs.w	sl, r2, r1
 8005408:	4649      	mov	r1, r9
 800540a:	eb63 0b01 	sbc.w	fp, r3, r1
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800541a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800541e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005422:	4692      	mov	sl, r2
 8005424:	469b      	mov	fp, r3
 8005426:	4623      	mov	r3, r4
 8005428:	eb1a 0303 	adds.w	r3, sl, r3
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	462b      	mov	r3, r5
 8005430:	eb4b 0303 	adc.w	r3, fp, r3
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005442:	4629      	mov	r1, r5
 8005444:	028b      	lsls	r3, r1, #10
 8005446:	4621      	mov	r1, r4
 8005448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800544c:	4621      	mov	r1, r4
 800544e:	028a      	lsls	r2, r1, #10
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005458:	2200      	movs	r2, #0
 800545a:	673b      	str	r3, [r7, #112]	; 0x70
 800545c:	677a      	str	r2, [r7, #116]	; 0x74
 800545e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005462:	f7fb fc31 	bl	8000cc8 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4613      	mov	r3, r2
 800546c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	3301      	adds	r3, #1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005492:	e0e9      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005494:	4b38      	ldr	r3, [pc, #224]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800549c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d069      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ac:	4b32      	ldr	r3, [pc, #200]	; (8005578 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	099b      	lsrs	r3, r3, #6
 80054b2:	2200      	movs	r2, #0
 80054b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054be:	663b      	str	r3, [r7, #96]	; 0x60
 80054c0:	2300      	movs	r3, #0
 80054c2:	667b      	str	r3, [r7, #100]	; 0x64
 80054c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80054c8:	4622      	mov	r2, r4
 80054ca:	462b      	mov	r3, r5
 80054cc:	f04f 0000 	mov.w	r0, #0
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	0159      	lsls	r1, r3, #5
 80054d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054da:	0150      	lsls	r0, r2, #5
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4621      	mov	r1, r4
 80054e2:	1a51      	subs	r1, r2, r1
 80054e4:	61b9      	str	r1, [r7, #24]
 80054e6:	4629      	mov	r1, r5
 80054e8:	eb63 0301 	sbc.w	r3, r3, r1
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80054fa:	4659      	mov	r1, fp
 80054fc:	018b      	lsls	r3, r1, #6
 80054fe:	4651      	mov	r1, sl
 8005500:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005504:	4651      	mov	r1, sl
 8005506:	018a      	lsls	r2, r1, #6
 8005508:	4651      	mov	r1, sl
 800550a:	ebb2 0801 	subs.w	r8, r2, r1
 800550e:	4659      	mov	r1, fp
 8005510:	eb63 0901 	sbc.w	r9, r3, r1
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005528:	4690      	mov	r8, r2
 800552a:	4699      	mov	r9, r3
 800552c:	4623      	mov	r3, r4
 800552e:	eb18 0303 	adds.w	r3, r8, r3
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	462b      	mov	r3, r5
 8005536:	eb49 0303 	adc.w	r3, r9, r3
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005548:	4629      	mov	r1, r5
 800554a:	028b      	lsls	r3, r1, #10
 800554c:	4621      	mov	r1, r4
 800554e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005552:	4621      	mov	r1, r4
 8005554:	028a      	lsls	r2, r1, #10
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800555e:	2200      	movs	r2, #0
 8005560:	65bb      	str	r3, [r7, #88]	; 0x58
 8005562:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005564:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005568:	f7fb fbae 	bl	8000cc8 <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4613      	mov	r3, r2
 8005572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005576:	e063      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x41c>
 8005578:	40023800 	.word	0x40023800
 800557c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005580:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <HAL_RCC_GetSysClockFreq+0x454>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	099b      	lsrs	r3, r3, #6
 8005586:	2200      	movs	r2, #0
 8005588:	4618      	mov	r0, r3
 800558a:	4611      	mov	r1, r2
 800558c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005590:	653b      	str	r3, [r7, #80]	; 0x50
 8005592:	2300      	movs	r3, #0
 8005594:	657b      	str	r3, [r7, #84]	; 0x54
 8005596:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	f04f 0100 	mov.w	r1, #0
 80055a6:	0159      	lsls	r1, r3, #5
 80055a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ac:	0150      	lsls	r0, r2, #5
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4641      	mov	r1, r8
 80055b4:	1a51      	subs	r1, r2, r1
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	4649      	mov	r1, r9
 80055ba:	eb63 0301 	sbc.w	r3, r3, r1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80055cc:	4659      	mov	r1, fp
 80055ce:	018b      	lsls	r3, r1, #6
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055d6:	4651      	mov	r1, sl
 80055d8:	018a      	lsls	r2, r1, #6
 80055da:	4651      	mov	r1, sl
 80055dc:	1a54      	subs	r4, r2, r1
 80055de:	4659      	mov	r1, fp
 80055e0:	eb63 0501 	sbc.w	r5, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	00eb      	lsls	r3, r5, #3
 80055ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f2:	00e2      	lsls	r2, r4, #3
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	18e3      	adds	r3, r4, r3
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	464b      	mov	r3, r9
 8005600:	eb45 0303 	adc.w	r3, r5, r3
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005612:	4629      	mov	r1, r5
 8005614:	028b      	lsls	r3, r1, #10
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800561c:	4621      	mov	r1, r4
 800561e:	028a      	lsls	r2, r1, #10
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005628:	2200      	movs	r2, #0
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800562e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005632:	f7fb fb49 	bl	8000cc8 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4613      	mov	r3, r2
 800563c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCC_GetSysClockFreq+0x454>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0f1b      	lsrs	r3, r3, #28
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800564e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800565e:	e003      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_RCC_GetSysClockFreq+0x458>)
 8005662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005666:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800566c:	4618      	mov	r0, r3
 800566e:	37b8      	adds	r7, #184	; 0xb8
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	00f42400 	.word	0x00f42400

08005680 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e28d      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8083 	beq.w	80057a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056a0:	4b94      	ldr	r3, [pc, #592]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d019      	beq.n	80056e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056ac:	4b91      	ldr	r3, [pc, #580]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d106      	bne.n	80056c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056b8:	4b8e      	ldr	r3, [pc, #568]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c4:	d00c      	beq.n	80056e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c6:	4b8b      	ldr	r3, [pc, #556]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056ce:	2b0c      	cmp	r3, #12
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d10b      	bne.n	80056f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	4b84      	ldr	r3, [pc, #528]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x124>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d157      	bne.n	80057a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e25a      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d106      	bne.n	8005710 <HAL_RCC_OscConfig+0x90>
 8005702:	4b7c      	ldr	r3, [pc, #496]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a7b      	ldr	r2, [pc, #492]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e01d      	b.n	800574c <HAL_RCC_OscConfig+0xcc>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0xb4>
 800571a:	4b76      	ldr	r3, [pc, #472]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a75      	ldr	r2, [pc, #468]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b73      	ldr	r3, [pc, #460]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a72      	ldr	r2, [pc, #456]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e00b      	b.n	800574c <HAL_RCC_OscConfig+0xcc>
 8005734:	4b6f      	ldr	r3, [pc, #444]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6e      	ldr	r2, [pc, #440]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b6c      	ldr	r3, [pc, #432]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6b      	ldr	r2, [pc, #428]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fc fe44 	bl	80023e0 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800575c:	f7fc fe40 	bl	80023e0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e21f      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0xdc>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fc fe30 	bl	80023e0 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fc fe2c 	bl	80023e0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e20b      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	4b57      	ldr	r3, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x104>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d06f      	beq.n	8005892 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057b2:	4b50      	ldr	r3, [pc, #320]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057be:	4b4d      	ldr	r3, [pc, #308]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d105      	bne.n	80057d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ca:	4b4a      	ldr	r3, [pc, #296]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b47      	ldr	r3, [pc, #284]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d11c      	bne.n	800581c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b44      	ldr	r3, [pc, #272]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d116      	bne.n	800581c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_RCC_OscConfig+0x186>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d001      	beq.n	8005806 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e1d3      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005806:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4937      	ldr	r1, [pc, #220]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581a:	e03a      	b.n	8005892 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <HAL_RCC_OscConfig+0x278>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fc fdd9 	bl	80023e0 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005832:	f7fc fdd5 	bl	80023e0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1b4      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005844:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4925      	ldr	r1, [pc, #148]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]
 8005864:	e015      	b.n	8005892 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_RCC_OscConfig+0x278>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fc fdb8 	bl	80023e0 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005874:	f7fc fdb4 	bl	80023e0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e193      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d036      	beq.n	800590c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <HAL_RCC_OscConfig+0x27c>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fc fd98 	bl	80023e0 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b4:	f7fc fd94 	bl	80023e0 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e173      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80058c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x234>
 80058d2:	e01b      	b.n	800590c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <HAL_RCC_OscConfig+0x27c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058da:	f7fc fd81 	bl	80023e0 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e0:	e00e      	b.n	8005900 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e2:	f7fc fd7d 	bl	80023e0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d907      	bls.n	8005900 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e15c      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	42470000 	.word	0x42470000
 80058fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005900:	4b8a      	ldr	r3, [pc, #552]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ea      	bne.n	80058e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8097 	beq.w	8005a48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591e:	4b83      	ldr	r3, [pc, #524]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	4b7f      	ldr	r3, [pc, #508]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	4a7e      	ldr	r2, [pc, #504]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	; 0x40
 800593a:	4b7c      	ldr	r3, [pc, #496]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594a:	4b79      	ldr	r3, [pc, #484]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d118      	bne.n	8005988 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005956:	4b76      	ldr	r3, [pc, #472]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a75      	ldr	r2, [pc, #468]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005962:	f7fc fd3d 	bl	80023e0 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7fc fd39 	bl	80023e0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e118      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b6c      	ldr	r3, [pc, #432]	; (8005b30 <HAL_RCC_OscConfig+0x4b0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x31e>
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	4a65      	ldr	r2, [pc, #404]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	; 0x70
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x358>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x340>
 80059a6:	4b61      	ldr	r3, [pc, #388]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a60      	ldr	r2, [pc, #384]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
 80059b2:	4b5e      	ldr	r3, [pc, #376]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	4a5d      	ldr	r2, [pc, #372]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0x358>
 80059c0:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	4a59      	ldr	r2, [pc, #356]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70
 80059cc:	4b57      	ldr	r3, [pc, #348]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a56      	ldr	r2, [pc, #344]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 80059d2:	f023 0304 	bic.w	r3, r3, #4
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fc fcfe 	bl	80023e0 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e8:	f7fc fcfa 	bl	80023e0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0d7      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fe:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ee      	beq.n	80059e8 <HAL_RCC_OscConfig+0x368>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fc fce8 	bl	80023e0 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a14:	f7fc fce4 	bl	80023e0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0c1      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2a:	4b40      	ldr	r3, [pc, #256]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ee      	bne.n	8005a14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a3c:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	4a3a      	ldr	r2, [pc, #232]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80ad 	beq.w	8005bac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d060      	beq.n	8005b20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d145      	bne.n	8005af2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCC_OscConfig+0x4b4>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fc fcb8 	bl	80023e0 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fc fcb4 	bl	80023e0 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e093      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	061b      	lsls	r3, r3, #24
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	491b      	ldr	r1, [pc, #108]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_OscConfig+0x4b4>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fc fc89 	bl	80023e0 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fc fc85 	bl	80023e0 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e064      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x452>
 8005af0:	e05c      	b.n	8005bac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0x4b4>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fc fc72 	bl	80023e0 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fc6e 	bl	80023e0 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e04d      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCC_OscConfig+0x4ac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x480>
 8005b1e:	e045      	b.n	8005bac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e040      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40007000 	.word	0x40007000
 8005b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCC_OscConfig+0x538>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d030      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d129      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d122      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d119      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d10f      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d001      	beq.n	8005bac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800

08005bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e07b      	b.n	8005cc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d108      	bne.n	8005be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bde:	d009      	beq.n	8005bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	61da      	str	r2, [r3, #28]
 8005be6:	e005      	b.n	8005bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fc f928 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c78:	ea42 0103 	orr.w	r1, r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	f003 0104 	and.w	r1, r3, #4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f003 0210 	and.w	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e041      	b.n	8005d64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fc f9b7 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f000 fa79 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e046      	b.n	8005e12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a23      	ldr	r2, [pc, #140]	; (8005e20 <HAL_TIM_Base_Start+0xb4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d01d      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <HAL_TIM_Base_Start+0xb8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <HAL_TIM_Base_Start+0xbc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <HAL_TIM_Base_Start+0xc0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <HAL_TIM_Base_Start+0xc4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <HAL_TIM_Base_Start+0xc8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Base_Start+0x70>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_TIM_Base_Start+0xcc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d111      	bne.n	8005e00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d010      	beq.n	8005e10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e007      	b.n	8005e10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40001800 	.word	0x40001800

08005e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e041      	b.n	8005ed2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f839 	bl	8005eda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f000 f9c2 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e0ae      	b.n	800606c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	f200 809f 	bhi.w	800605c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	0800605d 	.word	0x0800605d
 8005f2c:	0800605d 	.word	0x0800605d
 8005f30:	0800605d 	.word	0x0800605d
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	0800605d 	.word	0x0800605d
 8005f3c:	0800605d 	.word	0x0800605d
 8005f40:	0800605d 	.word	0x0800605d
 8005f44:	08005fdb 	.word	0x08005fdb
 8005f48:	0800605d 	.word	0x0800605d
 8005f4c:	0800605d 	.word	0x0800605d
 8005f50:	0800605d 	.word	0x0800605d
 8005f54:	0800601b 	.word	0x0800601b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f9f0 	bl	8006344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0208 	orr.w	r2, r2, #8
 8005f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0204 	bic.w	r2, r2, #4
 8005f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	619a      	str	r2, [r3, #24]
      break;
 8005f96:	e064      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fa40 	bl	8006424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6999      	ldr	r1, [r3, #24]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	021a      	lsls	r2, r3, #8
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	619a      	str	r2, [r3, #24]
      break;
 8005fd8:	e043      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa95 	bl	8006510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0208 	orr.w	r2, r2, #8
 8005ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0204 	bic.w	r2, r2, #4
 8006004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	61da      	str	r2, [r3, #28]
      break;
 8006018:	e023      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fae9 	bl	80065f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69d9      	ldr	r1, [r3, #28]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	021a      	lsls	r2, r3, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	61da      	str	r2, [r3, #28]
      break;
 800605a:	e002      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
      break;
 8006060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIM_ConfigClockSource+0x1c>
 800608c:	2302      	movs	r3, #2
 800608e:	e0b4      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x186>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c8:	d03e      	beq.n	8006148 <HAL_TIM_ConfigClockSource+0xd4>
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ce:	f200 8087 	bhi.w	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d6:	f000 8086 	beq.w	80061e6 <HAL_TIM_ConfigClockSource+0x172>
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060de:	d87f      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060e0:	2b70      	cmp	r3, #112	; 0x70
 80060e2:	d01a      	beq.n	800611a <HAL_TIM_ConfigClockSource+0xa6>
 80060e4:	2b70      	cmp	r3, #112	; 0x70
 80060e6:	d87b      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b60      	cmp	r3, #96	; 0x60
 80060ea:	d050      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x11a>
 80060ec:	2b60      	cmp	r3, #96	; 0x60
 80060ee:	d877      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060f0:	2b50      	cmp	r3, #80	; 0x50
 80060f2:	d03c      	beq.n	800616e <HAL_TIM_ConfigClockSource+0xfa>
 80060f4:	2b50      	cmp	r3, #80	; 0x50
 80060f6:	d873      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d058      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x13a>
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d86f      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b30      	cmp	r3, #48	; 0x30
 8006102:	d064      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 8006104:	2b30      	cmp	r3, #48	; 0x30
 8006106:	d86b      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d060      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 800610c:	2b20      	cmp	r3, #32
 800610e:	d867      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d05c      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 8006114:	2b10      	cmp	r3, #16
 8006116:	d05a      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 8006118:	e062      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6899      	ldr	r1, [r3, #8]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f000 fb35 	bl	8006798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800613c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	609a      	str	r2, [r3, #8]
      break;
 8006146:	e04f      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	6899      	ldr	r1, [r3, #8]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f000 fb1e 	bl	8006798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800616a:	609a      	str	r2, [r3, #8]
      break;
 800616c:	e03c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	461a      	mov	r2, r3
 800617c:	f000 fa92 	bl	80066a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2150      	movs	r1, #80	; 0x50
 8006186:	4618      	mov	r0, r3
 8006188:	f000 faeb 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 800618c:	e02c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	461a      	mov	r2, r3
 800619c:	f000 fab1 	bl	8006702 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2160      	movs	r1, #96	; 0x60
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fadb 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 80061ac:	e01c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f000 fa72 	bl	80066a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2140      	movs	r1, #64	; 0x40
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 facb 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 80061cc:	e00c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f000 fac2 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 80061de:	e003      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
      break;
 80061e4:	e000      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a40      	ldr	r2, [pc, #256]	; (8006318 <TIM_Base_SetConfig+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d00f      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3d      	ldr	r2, [pc, #244]	; (800631c <TIM_Base_SetConfig+0x118>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00b      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3c      	ldr	r2, [pc, #240]	; (8006320 <TIM_Base_SetConfig+0x11c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <TIM_Base_SetConfig+0x120>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <TIM_Base_SetConfig+0x124>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <TIM_Base_SetConfig+0x114>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d02b      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d027      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <TIM_Base_SetConfig+0x118>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d023      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <TIM_Base_SetConfig+0x11c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01f      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2a      	ldr	r2, [pc, #168]	; (8006324 <TIM_Base_SetConfig+0x120>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01b      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a29      	ldr	r2, [pc, #164]	; (8006328 <TIM_Base_SetConfig+0x124>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d017      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <TIM_Base_SetConfig+0x128>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a27      	ldr	r2, [pc, #156]	; (8006330 <TIM_Base_SetConfig+0x12c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a26      	ldr	r2, [pc, #152]	; (8006334 <TIM_Base_SetConfig+0x130>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a25      	ldr	r2, [pc, #148]	; (8006338 <TIM_Base_SetConfig+0x134>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a24      	ldr	r2, [pc, #144]	; (800633c <TIM_Base_SetConfig+0x138>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a23      	ldr	r2, [pc, #140]	; (8006340 <TIM_Base_SetConfig+0x13c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <TIM_Base_SetConfig+0x114>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_Base_SetConfig+0xf8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <TIM_Base_SetConfig+0x124>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d103      	bne.n	8006304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	615a      	str	r2, [r3, #20]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800
 8006338:	40001800 	.word	0x40001800
 800633c:	40001c00 	.word	0x40001c00
 8006340:	40002000 	.word	0x40002000

08006344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a20      	ldr	r2, [pc, #128]	; (800641c <TIM_OC1_SetConfig+0xd8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC1_SetConfig+0x64>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <TIM_OC1_SetConfig+0xdc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10c      	bne.n	80063c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0308 	bic.w	r3, r3, #8
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 0304 	bic.w	r3, r3, #4
 80063c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <TIM_OC1_SetConfig+0xd8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC1_SetConfig+0x8e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <TIM_OC1_SetConfig+0xdc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d111      	bne.n	80063f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400

08006424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0210 	bic.w	r2, r3, #16
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0320 	bic.w	r3, r3, #32
 800646e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <TIM_OC2_SetConfig+0xe4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC2_SetConfig+0x68>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a21      	ldr	r2, [pc, #132]	; (800650c <TIM_OC2_SetConfig+0xe8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10d      	bne.n	80064a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <TIM_OC2_SetConfig+0xe4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC2_SetConfig+0x94>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a16      	ldr	r2, [pc, #88]	; (800650c <TIM_OC2_SetConfig+0xe8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d113      	bne.n	80064e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40010400 	.word	0x40010400

08006510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <TIM_OC3_SetConfig+0xe0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC3_SetConfig+0x66>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <TIM_OC3_SetConfig+0xe4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10d      	bne.n	8006592 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800657c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC3_SetConfig+0xe0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC3_SetConfig+0x92>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <TIM_OC3_SetConfig+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d113      	bne.n	80065ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	621a      	str	r2, [r3, #32]
}
 80065e4:	bf00      	nop
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40010400 	.word	0x40010400

080065f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <TIM_OC4_SetConfig+0xa4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC4_SetConfig+0x68>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a11      	ldr	r2, [pc, #68]	; (80066a0 <TIM_OC4_SetConfig+0xa8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d109      	bne.n	8006674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	621a      	str	r2, [r3, #32]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 030a 	bic.w	r3, r3, #10
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b087      	sub	sp, #28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f023 0210 	bic.w	r2, r3, #16
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800672c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	f043 0307 	orr.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	021a      	lsls	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e05a      	b.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d01d      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10c      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4313      	orrs	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40010400 	.word	0x40010400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40001800 	.word	0x40001800

080068d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068d0:	b084      	sub	sp, #16
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	f107 001c 	add.w	r0, r7, #28
 80068de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d122      	bne.n	800692e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d105      	bne.n	8006922 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fbe8 	bl	80080f8 <USB_CoreReset>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	e01a      	b.n	8006964 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fbdc 	bl	80080f8 <USB_CoreReset>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
 8006956:	e005      	b.n	8006964 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10b      	bne.n	8006982 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f043 0206 	orr.w	r2, r3, #6
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800698e:	b004      	add	sp, #16
 8006990:	4770      	bx	lr
	...

08006994 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d165      	bne.n	8006a74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4a41      	ldr	r2, [pc, #260]	; (8006ab0 <USB_SetTurnaroundTime+0x11c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d906      	bls.n	80069be <USB_SetTurnaroundTime+0x2a>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4a40      	ldr	r2, [pc, #256]	; (8006ab4 <USB_SetTurnaroundTime+0x120>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d202      	bcs.n	80069be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069b8:	230f      	movs	r3, #15
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	e062      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4a3c      	ldr	r2, [pc, #240]	; (8006ab4 <USB_SetTurnaroundTime+0x120>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d306      	bcc.n	80069d4 <USB_SetTurnaroundTime+0x40>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4a3b      	ldr	r2, [pc, #236]	; (8006ab8 <USB_SetTurnaroundTime+0x124>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d202      	bcs.n	80069d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069ce:	230e      	movs	r3, #14
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e057      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4a38      	ldr	r2, [pc, #224]	; (8006ab8 <USB_SetTurnaroundTime+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d306      	bcc.n	80069ea <USB_SetTurnaroundTime+0x56>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4a37      	ldr	r2, [pc, #220]	; (8006abc <USB_SetTurnaroundTime+0x128>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d202      	bcs.n	80069ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069e4:	230d      	movs	r3, #13
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e04c      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4a33      	ldr	r2, [pc, #204]	; (8006abc <USB_SetTurnaroundTime+0x128>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d306      	bcc.n	8006a00 <USB_SetTurnaroundTime+0x6c>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4a32      	ldr	r2, [pc, #200]	; (8006ac0 <USB_SetTurnaroundTime+0x12c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d802      	bhi.n	8006a00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069fa:	230c      	movs	r3, #12
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e041      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4a2f      	ldr	r2, [pc, #188]	; (8006ac0 <USB_SetTurnaroundTime+0x12c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d906      	bls.n	8006a16 <USB_SetTurnaroundTime+0x82>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4a2e      	ldr	r2, [pc, #184]	; (8006ac4 <USB_SetTurnaroundTime+0x130>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d802      	bhi.n	8006a16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a10:	230b      	movs	r3, #11
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	e036      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <USB_SetTurnaroundTime+0x130>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d906      	bls.n	8006a2c <USB_SetTurnaroundTime+0x98>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	4a29      	ldr	r2, [pc, #164]	; (8006ac8 <USB_SetTurnaroundTime+0x134>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d802      	bhi.n	8006a2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a26:	230a      	movs	r3, #10
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e02b      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <USB_SetTurnaroundTime+0x134>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d906      	bls.n	8006a42 <USB_SetTurnaroundTime+0xae>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4a25      	ldr	r2, [pc, #148]	; (8006acc <USB_SetTurnaroundTime+0x138>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d202      	bcs.n	8006a42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a3c:	2309      	movs	r3, #9
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e020      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a21      	ldr	r2, [pc, #132]	; (8006acc <USB_SetTurnaroundTime+0x138>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d306      	bcc.n	8006a58 <USB_SetTurnaroundTime+0xc4>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <USB_SetTurnaroundTime+0x13c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d802      	bhi.n	8006a58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a52:	2308      	movs	r3, #8
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e015      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <USB_SetTurnaroundTime+0x13c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d906      	bls.n	8006a6e <USB_SetTurnaroundTime+0xda>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4a1c      	ldr	r2, [pc, #112]	; (8006ad4 <USB_SetTurnaroundTime+0x140>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d202      	bcs.n	8006a6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a68:	2307      	movs	r3, #7
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	e00a      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a6e:	2306      	movs	r3, #6
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e007      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a7a:	2309      	movs	r3, #9
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e001      	b.n	8006a84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a80:	2309      	movs	r3, #9
 8006a82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	00d8acbf 	.word	0x00d8acbf
 8006ab4:	00e4e1c0 	.word	0x00e4e1c0
 8006ab8:	00f42400 	.word	0x00f42400
 8006abc:	01067380 	.word	0x01067380
 8006ac0:	011a499f 	.word	0x011a499f
 8006ac4:	01312cff 	.word	0x01312cff
 8006ac8:	014ca43f 	.word	0x014ca43f
 8006acc:	016e3600 	.word	0x016e3600
 8006ad0:	01a6ab1f 	.word	0x01a6ab1f
 8006ad4:	01e84800 	.word	0x01e84800

08006ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f043 0201 	orr.w	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f023 0201 	bic.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d115      	bne.n	8006b6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	f7fb fc54 	bl	80023f8 <HAL_Delay>
      ms++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fa3f 	bl	8007fda <USB_GetMode>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d01e      	beq.n	8006ba0 <USB_SetCurrentMode+0x84>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b31      	cmp	r3, #49	; 0x31
 8006b66:	d9f0      	bls.n	8006b4a <USB_SetCurrentMode+0x2e>
 8006b68:	e01a      	b.n	8006ba0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d115      	bne.n	8006b9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7fb fc3b 	bl	80023f8 <HAL_Delay>
      ms++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fa26 	bl	8007fda <USB_GetMode>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <USB_SetCurrentMode+0x84>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b31      	cmp	r3, #49	; 0x31
 8006b98:	d9f0      	bls.n	8006b7c <USB_SetCurrentMode+0x60>
 8006b9a:	e001      	b.n	8006ba0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e005      	b.n	8006bac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b32      	cmp	r3, #50	; 0x32
 8006ba4:	d101      	bne.n	8006baa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e009      	b.n	8006be8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3340      	adds	r3, #64	; 0x40
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	3301      	adds	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b0e      	cmp	r3, #14
 8006bec:	d9f2      	bls.n	8006bd4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11c      	bne.n	8006c2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e005      	b.n	8006c3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c40:	461a      	mov	r2, r3
 8006c42:	2300      	movs	r3, #0
 8006c44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c54:	461a      	mov	r2, r3
 8006c56:	680b      	ldr	r3, [r1, #0]
 8006c58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10c      	bne.n	8006c7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c66:	2100      	movs	r1, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f965 	bl	8006f38 <USB_SetDevSpeed>
 8006c6e:	e008      	b.n	8006c82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c70:	2101      	movs	r1, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f960 	bl	8006f38 <USB_SetDevSpeed>
 8006c78:	e003      	b.n	8006c82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c7a:	2103      	movs	r1, #3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f95b 	bl	8006f38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c82:	2110      	movs	r1, #16
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f8f3 	bl	8006e70 <USB_FlushTxFifo>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f91f 	bl	8006ed8 <USB_FlushRxFifo>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	461a      	mov	r2, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	e043      	b.n	8006d56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce4:	d118      	bne.n	8006d18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	e013      	b.n	8006d2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	e008      	b.n	8006d2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	461a      	mov	r2, r3
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d3b7      	bcc.n	8006cce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e043      	b.n	8006dec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7a:	d118      	bne.n	8006dae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e013      	b.n	8006dc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	461a      	mov	r2, r3
 8006da6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e008      	b.n	8006dc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	461a      	mov	r2, r3
 8006de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3301      	adds	r3, #1
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3b7      	bcc.n	8006d64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	f043 0210 	orr.w	r2, r3, #16
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <USB_DevInit+0x2b8>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f043 0208 	orr.w	r2, r3, #8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d107      	bne.n	8006e5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e54:	f043 0304 	orr.w	r3, r3, #4
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	803c3800 	.word	0x803c3800

08006e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <USB_FlushTxFifo+0x64>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d901      	bls.n	8006e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e01b      	b.n	8006ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	daf2      	bge.n	8006e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	019b      	lsls	r3, r3, #6
 8006ea0:	f043 0220 	orr.w	r2, r3, #32
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <USB_FlushTxFifo+0x64>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e006      	b.n	8006ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d0f0      	beq.n	8006ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	00030d40 	.word	0x00030d40

08006ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <USB_FlushRxFifo+0x5c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e018      	b.n	8006f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	daf2      	bge.n	8006ee4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2210      	movs	r2, #16
 8006f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <USB_FlushRxFifo+0x5c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e006      	b.n	8006f28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d0f0      	beq.n	8006f08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	00030d40 	.word	0x00030d40

08006f38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0306 	and.w	r3, r3, #6
 8006f82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]
 8006f8e:	e00a      	b.n	8006fa6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d002      	beq.n	8006f9c <USB_GetDevSpeed+0x32>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b06      	cmp	r3, #6
 8006f9a:	d102      	bne.n	8006fa2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	75fb      	strb	r3, [r7, #23]
 8006fa0:	e001      	b.n	8006fa6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006fa2:	230f      	movs	r3, #15
 8006fa4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d13a      	bne.n	8007046 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	68f9      	ldr	r1, [r7, #12]
 8006fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d155      	bne.n	80070b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007024:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	059b      	lsls	r3, r3, #22
 800702a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800702c:	4313      	orrs	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	440a      	add	r2, r1
 8007036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	e036      	b.n	80070b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	69da      	ldr	r2, [r3, #28]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	2101      	movs	r1, #1
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	041b      	lsls	r3, r3, #16
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007064:	4313      	orrs	r3, r2
 8007066:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d11a      	bne.n	80070b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	791b      	ldrb	r3, [r3, #4]
 8007098:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800709a:	430b      	orrs	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d161      	bne.n	80071a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f6:	d11f      	bne.n	8007138 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007116:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007136:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	2101      	movs	r1, #1
 800714a:	fa01 f303 	lsl.w	r3, r1, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	43db      	mvns	r3, r3
 8007152:	68f9      	ldr	r1, [r7, #12]
 8007154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007158:	4013      	ands	r3, r2
 800715a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	b29b      	uxth	r3, r3
 8007174:	43db      	mvns	r3, r3
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800717c:	4013      	ands	r3, r2
 800717e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	0159      	lsls	r1, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	440b      	add	r3, r1
 8007196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719a:	4619      	mov	r1, r3
 800719c:	4b35      	ldr	r3, [pc, #212]	; (8007274 <USB_DeactivateEndpoint+0x1b0>)
 800719e:	4013      	ands	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]
 80071a2:	e060      	b.n	8007266 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ba:	d11f      	bne.n	80071fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	43db      	mvns	r3, r3
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800721c:	4013      	ands	r3, r2
 800721e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	2101      	movs	r1, #1
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	041b      	lsls	r3, r3, #16
 8007238:	43db      	mvns	r3, r3
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007240:	4013      	ands	r3, r2
 8007242:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	0159      	lsls	r1, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	440b      	add	r3, r1
 800725a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725e:	4619      	mov	r1, r3
 8007260:	4b05      	ldr	r3, [pc, #20]	; (8007278 <USB_DeactivateEndpoint+0x1b4>)
 8007262:	4013      	ands	r3, r2
 8007264:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	ec337800 	.word	0xec337800
 8007278:	eff37800 	.word	0xeff37800

0800727c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	2b01      	cmp	r3, #1
 800729a:	f040 815c 	bne.w	8007556 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d132      	bne.n	800730c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007304:	0cdb      	lsrs	r3, r3, #19
 8007306:	04db      	lsls	r3, r3, #19
 8007308:	6113      	str	r3, [r2, #16]
 800730a:	e074      	b.n	80073f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007326:	0cdb      	lsrs	r3, r3, #19
 8007328:	04db      	lsls	r3, r3, #19
 800732a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800734a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800734e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6999      	ldr	r1, [r3, #24]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	440b      	add	r3, r1
 8007368:	1e59      	subs	r1, r3, #1
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007372:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007374:	4b9d      	ldr	r3, [pc, #628]	; (80075ec <USB_EPStartXfer+0x370>)
 8007376:	400b      	ands	r3, r1
 8007378:	69b9      	ldr	r1, [r7, #24]
 800737a:	0148      	lsls	r0, r1, #5
 800737c:	69f9      	ldr	r1, [r7, #28]
 800737e:	4401      	add	r1, r0
 8007380:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007384:	4313      	orrs	r3, r2
 8007386:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800739e:	69b9      	ldr	r1, [r7, #24]
 80073a0:	0148      	lsls	r0, r1, #5
 80073a2:	69f9      	ldr	r1, [r7, #28]
 80073a4:	4401      	add	r1, r0
 80073a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073aa:	4313      	orrs	r3, r2
 80073ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	791b      	ldrb	r3, [r3, #4]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d11f      	bne.n	80073f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d14b      	bne.n	8007494 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d009      	beq.n	8007418 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	461a      	mov	r2, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	791b      	ldrb	r3, [r3, #4]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d128      	bne.n	8007472 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742c:	2b00      	cmp	r3, #0
 800742e:	d110      	bne.n	8007452 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e00f      	b.n	8007472 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007470:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e133      	b.n	80076fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	791b      	ldrb	r3, [r3, #4]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d015      	beq.n	80074e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 811b 	beq.w	80076fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	2101      	movs	r1, #1
 80074d8:	fa01 f303 	lsl.w	r3, r1, r3
 80074dc:	69f9      	ldr	r1, [r7, #28]
 80074de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e2:	4313      	orrs	r3, r2
 80074e4:	634b      	str	r3, [r1, #52]	; 0x34
 80074e6:	e109      	b.n	80076fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d110      	bne.n	800751a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	440a      	add	r2, r1
 800750e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007512:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	e00f      	b.n	800753a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007538:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6919      	ldr	r1, [r3, #16]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	b298      	uxth	r0, r3
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4603      	mov	r3, r0
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fade 	bl	8007b10 <USB_WritePacket>
 8007554:	e0d2      	b.n	80076fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007570:	0cdb      	lsrs	r3, r3, #19
 8007572:	04db      	lsls	r3, r3, #19
 8007574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007590:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007594:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007598:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d126      	bne.n	80075f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b8:	69b9      	ldr	r1, [r7, #24]
 80075ba:	0148      	lsls	r0, r1, #5
 80075bc:	69f9      	ldr	r1, [r7, #28]
 80075be:	4401      	add	r1, r0
 80075c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075c4:	4313      	orrs	r3, r2
 80075c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075e6:	6113      	str	r3, [r2, #16]
 80075e8:	e03a      	b.n	8007660 <USB_EPStartXfer+0x3e4>
 80075ea:	bf00      	nop
 80075ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	699a      	ldr	r2, [r3, #24]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	1e5a      	subs	r2, r3, #1
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	fbb2 f3f3 	udiv	r3, r2, r3
 8007604:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	8afa      	ldrh	r2, [r7, #22]
 800760c:	fb03 f202 	mul.w	r2, r3, r2
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	8afb      	ldrh	r3, [r7, #22]
 8007624:	04d9      	lsls	r1, r3, #19
 8007626:	4b38      	ldr	r3, [pc, #224]	; (8007708 <USB_EPStartXfer+0x48c>)
 8007628:	400b      	ands	r3, r1
 800762a:	69b9      	ldr	r1, [r7, #24]
 800762c:	0148      	lsls	r0, r1, #5
 800762e:	69f9      	ldr	r1, [r7, #28]
 8007630:	4401      	add	r1, r0
 8007632:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007650:	69b9      	ldr	r1, [r7, #24]
 8007652:	0148      	lsls	r0, r1, #5
 8007654:	69f9      	ldr	r1, [r7, #28]
 8007656:	4401      	add	r1, r0
 8007658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800765c:	4313      	orrs	r3, r2
 800765e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d10d      	bne.n	8007682 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6919      	ldr	r1, [r3, #16]
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	460a      	mov	r2, r1
 8007680:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d128      	bne.n	80076dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007696:	2b00      	cmp	r3, #0
 8007698:	d110      	bne.n	80076bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	0151      	lsls	r1, r2, #5
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	440a      	add	r2, r1
 80076b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	e00f      	b.n	80076dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	1ff80000 	.word	0x1ff80000

0800770c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b01      	cmp	r3, #1
 800772a:	f040 80ce 	bne.w	80078ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d132      	bne.n	800779c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	440a      	add	r2, r1
 800774c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	440a      	add	r2, r1
 8007790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007794:	0cdb      	lsrs	r3, r3, #19
 8007796:	04db      	lsls	r3, r3, #19
 8007798:	6113      	str	r3, [r2, #16]
 800779a:	e04e      	b.n	800783a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	0cdb      	lsrs	r3, r3, #19
 80077b8:	04db      	lsls	r3, r3, #19
 80077ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d903      	bls.n	80077f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007812:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	691a      	ldr	r2, [r3, #16]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800782a:	6939      	ldr	r1, [r7, #16]
 800782c:	0148      	lsls	r0, r1, #5
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	4401      	add	r1, r0
 8007832:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007836:	4313      	orrs	r3, r2
 8007838:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d11e      	bne.n	800787e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	0151      	lsls	r1, r2, #5
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	440a      	add	r2, r1
 8007872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e097      	b.n	80079ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007898:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800789c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 8083 	beq.w	80079ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	2101      	movs	r1, #1
 80078ba:	fa01 f303 	lsl.w	r3, r1, r3
 80078be:	6979      	ldr	r1, [r7, #20]
 80078c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c4:	4313      	orrs	r3, r2
 80078c6:	634b      	str	r3, [r1, #52]	; 0x34
 80078c8:	e071      	b.n	80079ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	0151      	lsls	r1, r2, #5
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	440a      	add	r2, r1
 80078e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e4:	0cdb      	lsrs	r3, r3, #19
 80078e6:	04db      	lsls	r3, r3, #19
 80078e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	0151      	lsls	r1, r2, #5
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	440a      	add	r2, r1
 8007900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800790c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	0151      	lsls	r1, r2, #5
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	440a      	add	r2, r1
 800793c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800795c:	6939      	ldr	r1, [r7, #16]
 800795e:	0148      	lsls	r0, r1, #5
 8007960:	6979      	ldr	r1, [r7, #20]
 8007962:	4401      	add	r1, r0
 8007964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007968:	4313      	orrs	r3, r2
 800796a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10d      	bne.n	800798e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6919      	ldr	r1, [r3, #16]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	460a      	mov	r2, r1
 800798c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d14a      	bne.n	8007a70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f2:	f040 8086 	bne.w	8007b02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	7812      	ldrb	r2, [r2, #0]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3301      	adds	r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d902      	bls.n	8007a54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
          break;
 8007a52:	e056      	b.n	8007b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a6c:	d0e7      	beq.n	8007a3e <USB_EPStopXfer+0x82>
 8007a6e:	e048      	b.n	8007b02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a88:	d13b      	bne.n	8007b02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d902      	bls.n	8007ae8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ae6:	e00c      	b.n	8007b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b00:	d0e7      	beq.n	8007ad2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	; 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	460b      	mov	r3, r1
 8007b20:	71fb      	strb	r3, [r7, #7]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d123      	bne.n	8007b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b36:	88bb      	ldrh	r3, [r7, #4]
 8007b38:	3303      	adds	r3, #3
 8007b3a:	089b      	lsrs	r3, r3, #2
 8007b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	e018      	b.n	8007b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	031a      	lsls	r2, r3, #12
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b50:	461a      	mov	r2, r3
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	3301      	adds	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	3301      	adds	r3, #1
 8007b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	3301      	adds	r3, #1
 8007b74:	61bb      	str	r3, [r7, #24]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d3e2      	bcc.n	8007b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3724      	adds	r7, #36	; 0x24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b08b      	sub	sp, #44	; 0x2c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	e014      	b.n	8007be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	3301      	adds	r3, #1
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	3301      	adds	r3, #1
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	3301      	adds	r3, #1
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3e6      	bcc.n	8007bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bea:	8bfb      	ldrh	r3, [r7, #30]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01e      	beq.n	8007c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	701a      	strb	r2, [r3, #0]
      i++;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	3301      	adds	r3, #1
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c22:	8bfb      	ldrh	r3, [r7, #30]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c28:	8bfb      	ldrh	r3, [r7, #30]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ea      	bne.n	8007c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	372c      	adds	r7, #44	; 0x2c
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d12c      	bne.n	8007cb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	db12      	blt.n	8007c90 <USB_EPSetStall+0x54>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00f      	beq.n	8007c90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	e02b      	b.n	8007d0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	db12      	blt.n	8007cea <USB_EPSetStall+0xae>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ce8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	0151      	lsls	r1, r2, #5
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	440a      	add	r2, r1
 8007d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d128      	bne.n	8007d86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	791b      	ldrb	r3, [r3, #4]
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d003      	beq.n	8007d64 <USB_EPClearStall+0x4c>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	791b      	ldrb	r3, [r3, #4]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d138      	bne.n	8007dd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	e027      	b.n	8007dd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007da4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d003      	beq.n	8007db6 <USB_EPClearStall+0x9e>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d10f      	bne.n	8007dd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007e18:	68f9      	ldr	r1, [r7, #12]
 8007e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e5e:	f023 0302 	bic.w	r3, r3, #2
 8007e62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e8c:	f023 0303 	bic.w	r3, r3, #3
 8007e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea0:	f043 0302 	orr.w	r3, r3, #2
 8007ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	4013      	ands	r3, r2
 8007efc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	0c1b      	lsrs	r3, r3, #16
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	b29b      	uxth	r3, r3
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f70:	68bb      	ldr	r3, [r7, #8]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	01db      	lsls	r3, r3, #7
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008010:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	460b      	mov	r3, r1
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	333c      	adds	r3, #60	; 0x3c
 8008052:	3304      	adds	r3, #4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4a26      	ldr	r2, [pc, #152]	; (80080f4 <USB_EP0_OutStart+0xb8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d90a      	bls.n	8008076 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800806c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008070:	d101      	bne.n	8008076 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	e037      	b.n	80080e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a4:	f043 0318 	orr.w	r3, r3, #24
 80080a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80080bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080be:	7afb      	ldrb	r3, [r7, #11]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d10f      	bne.n	80080e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80080e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	4f54300a 	.word	0x4f54300a

080080f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4a13      	ldr	r2, [pc, #76]	; (800815c <USB_CoreReset+0x64>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d901      	bls.n	8008116 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e01b      	b.n	800814e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	daf2      	bge.n	8008104 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f043 0201 	orr.w	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4a09      	ldr	r2, [pc, #36]	; (800815c <USB_CoreReset+0x64>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d901      	bls.n	8008140 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e006      	b.n	800814e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	d0f0      	beq.n	800812e <USB_CoreReset+0x36>

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	00030d40 	.word	0x00030d40

08008160 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800816c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008170:	f002 fd34 	bl	800abdc <USBD_static_malloc>
 8008174:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	32b0      	adds	r2, #176	; 0xb0
 8008186:	2100      	movs	r1, #0
 8008188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800818c:	2302      	movs	r3, #2
 800818e:	e0d4      	b.n	800833a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008190:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008194:	2100      	movs	r1, #0
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f002 fd8e 	bl	800acb8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	32b0      	adds	r2, #176	; 0xb0
 80081a6:	68f9      	ldr	r1, [r7, #12]
 80081a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	32b0      	adds	r2, #176	; 0xb0
 80081b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7c1b      	ldrb	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d138      	bne.n	800823a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081c8:	4b5e      	ldr	r3, [pc, #376]	; (8008344 <USBD_CDC_Init+0x1e4>)
 80081ca:	7819      	ldrb	r1, [r3, #0]
 80081cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d0:	2202      	movs	r2, #2
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f002 fb91 	bl	800a8fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081d8:	4b5a      	ldr	r3, [pc, #360]	; (8008344 <USBD_CDC_Init+0x1e4>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3324      	adds	r3, #36	; 0x24
 80081ee:	2201      	movs	r2, #1
 80081f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081f2:	4b55      	ldr	r3, [pc, #340]	; (8008348 <USBD_CDC_Init+0x1e8>)
 80081f4:	7819      	ldrb	r1, [r3, #0]
 80081f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081fa:	2202      	movs	r2, #2
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f002 fb7c 	bl	800a8fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008202:	4b51      	ldr	r3, [pc, #324]	; (8008348 <USBD_CDC_Init+0x1e8>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800821a:	2201      	movs	r2, #1
 800821c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800821e:	4b4b      	ldr	r3, [pc, #300]	; (800834c <USBD_CDC_Init+0x1ec>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	f003 020f 	and.w	r2, r3, #15
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	3326      	adds	r3, #38	; 0x26
 8008234:	2210      	movs	r2, #16
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e035      	b.n	80082a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800823a:	4b42      	ldr	r3, [pc, #264]	; (8008344 <USBD_CDC_Init+0x1e4>)
 800823c:	7819      	ldrb	r1, [r3, #0]
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	2202      	movs	r2, #2
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f002 fb59 	bl	800a8fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008248:	4b3e      	ldr	r3, [pc, #248]	; (8008344 <USBD_CDC_Init+0x1e4>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 020f 	and.w	r2, r3, #15
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	3324      	adds	r3, #36	; 0x24
 800825e:	2201      	movs	r2, #1
 8008260:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008262:	4b39      	ldr	r3, [pc, #228]	; (8008348 <USBD_CDC_Init+0x1e8>)
 8008264:	7819      	ldrb	r1, [r3, #0]
 8008266:	2340      	movs	r3, #64	; 0x40
 8008268:	2202      	movs	r2, #2
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f002 fb45 	bl	800a8fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008270:	4b35      	ldr	r3, [pc, #212]	; (8008348 <USBD_CDC_Init+0x1e8>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 020f 	and.w	r2, r3, #15
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008288:	2201      	movs	r2, #1
 800828a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800828c:	4b2f      	ldr	r3, [pc, #188]	; (800834c <USBD_CDC_Init+0x1ec>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	3326      	adds	r3, #38	; 0x26
 80082a2:	2210      	movs	r2, #16
 80082a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082a6:	4b29      	ldr	r3, [pc, #164]	; (800834c <USBD_CDC_Init+0x1ec>)
 80082a8:	7819      	ldrb	r1, [r3, #0]
 80082aa:	2308      	movs	r3, #8
 80082ac:	2203      	movs	r2, #3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f002 fb23 	bl	800a8fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80082b4:	4b25      	ldr	r3, [pc, #148]	; (800834c <USBD_CDC_Init+0x1ec>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 020f 	and.w	r2, r3, #15
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2201      	movs	r2, #1
 80082cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	33b0      	adds	r3, #176	; 0xb0
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008304:	2302      	movs	r3, #2
 8008306:	e018      	b.n	800833a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7c1b      	ldrb	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008310:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <USBD_CDC_Init+0x1e8>)
 8008312:	7819      	ldrb	r1, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800831a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f002 fbda 	bl	800aad8 <USBD_LL_PrepareReceive>
 8008324:	e008      	b.n	8008338 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <USBD_CDC_Init+0x1e8>)
 8008328:	7819      	ldrb	r1, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 fbd0 	bl	800aad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000093 	.word	0x20000093
 8008348:	20000094 	.word	0x20000094
 800834c:	20000095 	.word	0x20000095

08008350 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800835c:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <USBD_CDC_DeInit+0xf8>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f002 faef 	bl	800a946 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008368:	4b37      	ldr	r3, [pc, #220]	; (8008448 <USBD_CDC_DeInit+0xf8>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	f003 020f 	and.w	r2, r3, #15
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	3324      	adds	r3, #36	; 0x24
 800837e:	2200      	movs	r2, #0
 8008380:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008382:	4b32      	ldr	r3, [pc, #200]	; (800844c <USBD_CDC_DeInit+0xfc>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f002 fadc 	bl	800a946 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800838e:	4b2f      	ldr	r3, [pc, #188]	; (800844c <USBD_CDC_DeInit+0xfc>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f003 020f 	and.w	r2, r3, #15
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083a6:	2200      	movs	r2, #0
 80083a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80083aa:	4b29      	ldr	r3, [pc, #164]	; (8008450 <USBD_CDC_DeInit+0x100>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f002 fac8 	bl	800a946 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80083b6:	4b26      	ldr	r3, [pc, #152]	; (8008450 <USBD_CDC_DeInit+0x100>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 020f 	and.w	r2, r3, #15
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	3324      	adds	r3, #36	; 0x24
 80083cc:	2200      	movs	r2, #0
 80083ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80083d0:	4b1f      	ldr	r3, [pc, #124]	; (8008450 <USBD_CDC_DeInit+0x100>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	3326      	adds	r3, #38	; 0x26
 80083e6:	2200      	movs	r2, #0
 80083e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	32b0      	adds	r2, #176	; 0xb0
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01f      	beq.n	800843c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	33b0      	adds	r3, #176	; 0xb0
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	32b0      	adds	r2, #176	; 0xb0
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	4618      	mov	r0, r3
 8008420:	f002 fbea 	bl	800abf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32b0      	adds	r2, #176	; 0xb0
 800842e:	2100      	movs	r1, #0
 8008430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000093 	.word	0x20000093
 800844c:	20000094 	.word	0x20000094
 8008450:	20000095 	.word	0x20000095

08008454 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	32b0      	adds	r2, #176	; 0xb0
 8008468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	e0bf      	b.n	8008604 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800848c:	2b00      	cmp	r3, #0
 800848e:	d050      	beq.n	8008532 <USBD_CDC_Setup+0xde>
 8008490:	2b20      	cmp	r3, #32
 8008492:	f040 80af 	bne.w	80085f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d03a      	beq.n	8008514 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	b25b      	sxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	da1b      	bge.n	80084e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	33b0      	adds	r3, #176	; 0xb0
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80084be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	88d2      	ldrh	r2, [r2, #6]
 80084c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b07      	cmp	r3, #7
 80084cc:	bf28      	it	cs
 80084ce:	2307      	movcs	r3, #7
 80084d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	89fa      	ldrh	r2, [r7, #14]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 fdb3 	bl	800a044 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80084de:	e090      	b.n	8008602 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	785a      	ldrb	r2, [r3, #1]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	2b3f      	cmp	r3, #63	; 0x3f
 80084f0:	d803      	bhi.n	80084fa <USBD_CDC_Setup+0xa6>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	e000      	b.n	80084fc <USBD_CDC_Setup+0xa8>
 80084fa:	2240      	movs	r2, #64	; 0x40
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008502:	6939      	ldr	r1, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800850a:	461a      	mov	r2, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fdc5 	bl	800a09c <USBD_CtlPrepareRx>
      break;
 8008512:	e076      	b.n	8008602 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	33b0      	adds	r3, #176	; 0xb0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	7850      	ldrb	r0, [r2, #1]
 800852a:	2200      	movs	r2, #0
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	4798      	blx	r3
      break;
 8008530:	e067      	b.n	8008602 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b0b      	cmp	r3, #11
 8008538:	d851      	bhi.n	80085de <USBD_CDC_Setup+0x18a>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <USBD_CDC_Setup+0xec>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008571 	.word	0x08008571
 8008544:	080085ed 	.word	0x080085ed
 8008548:	080085df 	.word	0x080085df
 800854c:	080085df 	.word	0x080085df
 8008550:	080085df 	.word	0x080085df
 8008554:	080085df 	.word	0x080085df
 8008558:	080085df 	.word	0x080085df
 800855c:	080085df 	.word	0x080085df
 8008560:	080085df 	.word	0x080085df
 8008564:	080085df 	.word	0x080085df
 8008568:	0800859b 	.word	0x0800859b
 800856c:	080085c5 	.word	0x080085c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b03      	cmp	r3, #3
 800857a:	d107      	bne.n	800858c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800857c:	f107 030a 	add.w	r3, r7, #10
 8008580:	2202      	movs	r2, #2
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 fd5d 	bl	800a044 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800858a:	e032      	b.n	80085f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 fce7 	bl	8009f62 <USBD_CtlError>
            ret = USBD_FAIL;
 8008594:	2303      	movs	r3, #3
 8008596:	75fb      	strb	r3, [r7, #23]
          break;
 8008598:	e02b      	b.n	80085f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d107      	bne.n	80085b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085a6:	f107 030d 	add.w	r3, r7, #13
 80085aa:	2201      	movs	r2, #1
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 fd48 	bl	800a044 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085b4:	e01d      	b.n	80085f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 fcd2 	bl	8009f62 <USBD_CtlError>
            ret = USBD_FAIL;
 80085be:	2303      	movs	r3, #3
 80085c0:	75fb      	strb	r3, [r7, #23]
          break;
 80085c2:	e016      	b.n	80085f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d00f      	beq.n	80085f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 fcc5 	bl	8009f62 <USBD_CtlError>
            ret = USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085dc:	e008      	b.n	80085f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fcbe 	bl	8009f62 <USBD_CtlError>
          ret = USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	75fb      	strb	r3, [r7, #23]
          break;
 80085ea:	e002      	b.n	80085f2 <USBD_CDC_Setup+0x19e>
          break;
 80085ec:	bf00      	nop
 80085ee:	e008      	b.n	8008602 <USBD_CDC_Setup+0x1ae>
          break;
 80085f0:	bf00      	nop
      }
      break;
 80085f2:	e006      	b.n	8008602 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fcb3 	bl	8009f62 <USBD_CtlError>
      ret = USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008600:	bf00      	nop
  }

  return (uint8_t)ret;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800861e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	32b0      	adds	r2, #176	; 0xb0
 800862a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008632:	2303      	movs	r3, #3
 8008634:	e065      	b.n	8008702 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	32b0      	adds	r2, #176	; 0xb0
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	f003 020f 	and.w	r2, r3, #15
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	3318      	adds	r3, #24
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d02f      	beq.n	80086c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	f003 020f 	and.w	r2, r3, #15
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	3318      	adds	r3, #24
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	f003 010f 	and.w	r1, r3, #15
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	460b      	mov	r3, r1
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	440b      	add	r3, r1
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4403      	add	r3, r0
 8008688:	3348      	adds	r3, #72	; 0x48
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008696:	2b00      	cmp	r3, #0
 8008698:	d112      	bne.n	80086c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	f003 020f 	and.w	r2, r3, #15
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	440b      	add	r3, r1
 80086ac:	3318      	adds	r3, #24
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086b2:	78f9      	ldrb	r1, [r7, #3]
 80086b4:	2300      	movs	r3, #0
 80086b6:	2200      	movs	r2, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f002 f9ec 	bl	800aa96 <USBD_LL_Transmit>
 80086be:	e01f      	b.n	8008700 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	33b0      	adds	r3, #176	; 0xb0
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d010      	beq.n	8008700 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	33b0      	adds	r3, #176	; 0xb0
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	32b0      	adds	r2, #176	; 0xb0
 8008720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008724:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	32b0      	adds	r2, #176	; 0xb0
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	e01a      	b.n	8008772 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f002 f9ea 	bl	800ab1a <USBD_LL_GetRxDataSize>
 8008746:	4602      	mov	r2, r0
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	33b0      	adds	r3, #176	; 0xb0
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800876c:	4611      	mov	r1, r2
 800876e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	32b0      	adds	r2, #176	; 0xb0
 800878c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008790:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	e025      	b.n	80087e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	33b0      	adds	r3, #176	; 0xb0
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d01a      	beq.n	80087e6 <USBD_CDC_EP0_RxReady+0x6c>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087b6:	2bff      	cmp	r3, #255	; 0xff
 80087b8:	d015      	beq.n	80087e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	33b0      	adds	r3, #176	; 0xb0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80087d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80087da:	b292      	uxth	r2, r2
 80087dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	22ff      	movs	r2, #255	; 0xff
 80087e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087f8:	2182      	movs	r1, #130	; 0x82
 80087fa:	4818      	ldr	r0, [pc, #96]	; (800885c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087fc:	f000 fd4f 	bl	800929e <USBD_GetEpDesc>
 8008800:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008802:	2101      	movs	r1, #1
 8008804:	4815      	ldr	r0, [pc, #84]	; (800885c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008806:	f000 fd4a 	bl	800929e <USBD_GetEpDesc>
 800880a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800880c:	2181      	movs	r1, #129	; 0x81
 800880e:	4813      	ldr	r0, [pc, #76]	; (800885c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008810:	f000 fd45 	bl	800929e <USBD_GetEpDesc>
 8008814:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2210      	movs	r2, #16
 8008820:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d006      	beq.n	8008836 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2200      	movs	r2, #0
 800882c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008830:	711a      	strb	r2, [r3, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d006      	beq.n	800884a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008844:	711a      	strb	r2, [r3, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2243      	movs	r2, #67	; 0x43
 800884e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000050 	.word	0x20000050

08008860 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008868:	2182      	movs	r1, #130	; 0x82
 800886a:	4818      	ldr	r0, [pc, #96]	; (80088cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800886c:	f000 fd17 	bl	800929e <USBD_GetEpDesc>
 8008870:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008872:	2101      	movs	r1, #1
 8008874:	4815      	ldr	r0, [pc, #84]	; (80088cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008876:	f000 fd12 	bl	800929e <USBD_GetEpDesc>
 800887a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800887c:	2181      	movs	r1, #129	; 0x81
 800887e:	4813      	ldr	r0, [pc, #76]	; (80088cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008880:	f000 fd0d 	bl	800929e <USBD_GetEpDesc>
 8008884:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2210      	movs	r2, #16
 8008890:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2200      	movs	r2, #0
 800889c:	711a      	strb	r2, [r3, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f042 0202 	orr.w	r2, r2, #2
 80088a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d006      	beq.n	80088ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	711a      	strb	r2, [r3, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f042 0202 	orr.w	r2, r2, #2
 80088b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2243      	movs	r2, #67	; 0x43
 80088be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088c0:	4b02      	ldr	r3, [pc, #8]	; (80088cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000050 	.word	0x20000050

080088d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088d8:	2182      	movs	r1, #130	; 0x82
 80088da:	4818      	ldr	r0, [pc, #96]	; (800893c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088dc:	f000 fcdf 	bl	800929e <USBD_GetEpDesc>
 80088e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088e2:	2101      	movs	r1, #1
 80088e4:	4815      	ldr	r0, [pc, #84]	; (800893c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088e6:	f000 fcda 	bl	800929e <USBD_GetEpDesc>
 80088ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088ec:	2181      	movs	r1, #129	; 0x81
 80088ee:	4813      	ldr	r0, [pc, #76]	; (800893c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088f0:	f000 fcd5 	bl	800929e <USBD_GetEpDesc>
 80088f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2210      	movs	r2, #16
 8008900:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d006      	beq.n	8008916 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2200      	movs	r2, #0
 800890c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008910:	711a      	strb	r2, [r3, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d006      	beq.n	800892a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008924:	711a      	strb	r2, [r3, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2243      	movs	r2, #67	; 0x43
 800892e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008930:	4b02      	ldr	r3, [pc, #8]	; (800893c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000050 	.word	0x20000050

08008940 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	220a      	movs	r2, #10
 800894c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800894e:	4b03      	ldr	r3, [pc, #12]	; (800895c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	2000000c 	.word	0x2000000c

08008960 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	e009      	b.n	8008988 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	33b0      	adds	r3, #176	; 0xb0
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	32b0      	adds	r2, #176	; 0xb0
 80089aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e008      	b.n	80089cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	32b0      	adds	r2, #176	; 0xb0
 80089ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e004      	b.n	8008a06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	32b0      	adds	r2, #176	; 0xb0
 8008a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32b0      	adds	r2, #176	; 0xb0
 8008a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e025      	b.n	8008a92 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11f      	bne.n	8008a90 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a58:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <USBD_CDC_TransmitPacket+0x88>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4403      	add	r3, r0
 8008a72:	3318      	adds	r3, #24
 8008a74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <USBD_CDC_TransmitPacket+0x88>)
 8008a78:	7819      	ldrb	r1, [r3, #0]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f002 f805 	bl	800aa96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000093 	.word	0x20000093

08008aa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32b0      	adds	r2, #176	; 0xb0
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32b0      	adds	r2, #176	; 0xb0
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e018      	b.n	8008b00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7c1b      	ldrb	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10a      	bne.n	8008aec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <USBD_CDC_ReceivePacket+0x68>)
 8008ad8:	7819      	ldrb	r1, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fff7 	bl	800aad8 <USBD_LL_PrepareReceive>
 8008aea:	e008      	b.n	8008afe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <USBD_CDC_ReceivePacket+0x68>)
 8008aee:	7819      	ldrb	r1, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008af6:	2340      	movs	r3, #64	; 0x40
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 ffed 	bl	800aad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000094 	.word	0x20000094

08008b0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e01f      	b.n	8008b64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	79fa      	ldrb	r2, [r7, #7]
 8008b56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f001 fe67 	bl	800a82c <USBD_LL_Init>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e025      	b.n	8008bd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	32ae      	adds	r2, #174	; 0xae
 8008b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00f      	beq.n	8008bc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	32ae      	adds	r2, #174	; 0xae
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	f107 020e 	add.w	r2, r7, #14
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	4602      	mov	r2, r0
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 fe6f 	bl	800a8c4 <USBD_LL_Start>
 8008be6:	4603      	mov	r3, r0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	4798      	blx	r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 f932 	bl	8009eee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ca6:	f003 031f 	and.w	r3, r3, #31
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d01a      	beq.n	8008ce4 <USBD_LL_SetupStage+0x72>
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d822      	bhi.n	8008cf8 <USBD_LL_SetupStage+0x86>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <USBD_LL_SetupStage+0x4a>
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d00a      	beq.n	8008cd0 <USBD_LL_SetupStage+0x5e>
 8008cba:	e01d      	b.n	8008cf8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb5f 	bl	8009388 <USBD_StdDevReq>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cce:	e020      	b.n	8008d12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fbc7 	bl	800946c <USBD_StdItfReq>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce2:	e016      	b.n	8008d12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc29 	bl	8009544 <USBD_StdEPReq>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf6:	e00c      	b.n	8008d12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fe3c 	bl	800a984 <USBD_LL_StallEP>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	bf00      	nop
  }

  return ret;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	460b      	mov	r3, r1
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d16e      	bne.n	8008e12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	f040 8098 	bne.w	8008e78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d913      	bls.n	8008d7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	1ad2      	subs	r2, r2, r3
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bf28      	it	cs
 8008d6e:	4613      	movcs	r3, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f001 f9ae 	bl	800a0d6 <USBD_CtlContinueRx>
 8008d7a:	e07d      	b.n	8008e78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d014      	beq.n	8008db4 <USBD_LL_DataOutStage+0x98>
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d81d      	bhi.n	8008dca <USBD_LL_DataOutStage+0xae>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <USBD_LL_DataOutStage+0x7c>
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d003      	beq.n	8008d9e <USBD_LL_DataOutStage+0x82>
 8008d96:	e018      	b.n	8008dca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8008d9c:	e018      	b.n	8008dd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 fa5e 	bl	800926a <USBD_CoreFindIF>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75bb      	strb	r3, [r7, #22]
            break;
 8008db2:	e00d      	b.n	8008dd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fa60 	bl	8009284 <USBD_CoreFindEP>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8008dc8:	e002      	b.n	8008dd0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75bb      	strb	r3, [r7, #22]
            break;
 8008dce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d119      	bne.n	8008e0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d113      	bne.n	8008e0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008de2:	7dba      	ldrb	r2, [r7, #22]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	32ae      	adds	r2, #174	; 0xae
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008df2:	7dba      	ldrb	r2, [r7, #22]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dfa:	7dba      	ldrb	r2, [r7, #22]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	32ae      	adds	r2, #174	; 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f001 f974 	bl	800a0f8 <USBD_CtlSendStatus>
 8008e10:	e032      	b.n	8008e78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 fa31 	bl	8009284 <USBD_CoreFindEP>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e26:	7dbb      	ldrb	r3, [r7, #22]
 8008e28:	2bff      	cmp	r3, #255	; 0xff
 8008e2a:	d025      	beq.n	8008e78 <USBD_LL_DataOutStage+0x15c>
 8008e2c:	7dbb      	ldrb	r3, [r7, #22]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d122      	bne.n	8008e78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d117      	bne.n	8008e6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e3e:	7dba      	ldrb	r2, [r7, #22]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	32ae      	adds	r2, #174	; 0xae
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00f      	beq.n	8008e6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e4e:	7dba      	ldrb	r2, [r7, #22]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e56:	7dba      	ldrb	r2, [r7, #22]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	32ae      	adds	r2, #174	; 0xae
 8008e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	7afa      	ldrb	r2, [r7, #11]
 8008e64:	4611      	mov	r1, r2
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	4798      	blx	r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	e000      	b.n	8008e7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e90:	7afb      	ldrb	r3, [r7, #11]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d16f      	bne.n	8008f76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d15a      	bne.n	8008f5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d914      	bls.n	8008edc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	1ad2      	subs	r2, r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f001 f8d6 	bl	800a07a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f001 fdff 	bl	800aad8 <USBD_LL_PrepareReceive>
 8008eda:	e03f      	b.n	8008f5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d11c      	bne.n	8008f22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d316      	bcc.n	8008f22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d20f      	bcs.n	8008f22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f001 f8b7 	bl	800a07a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f14:	2300      	movs	r3, #0
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f001 fddc 	bl	800aad8 <USBD_LL_PrepareReceive>
 8008f20:	e01c      	b.n	8008f5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d10f      	bne.n	8008f4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f4e:	2180      	movs	r1, #128	; 0x80
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 fd17 	bl	800a984 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f001 f8e1 	bl	800a11e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d03a      	beq.n	8008fdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fe42 	bl	8008bf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f74:	e032      	b.n	8008fdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	4619      	mov	r1, r3
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f97f 	bl	8009284 <USBD_CoreFindEP>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	2bff      	cmp	r3, #255	; 0xff
 8008f8e:	d025      	beq.n	8008fdc <USBD_LL_DataInStage+0x15a>
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d122      	bne.n	8008fdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d11c      	bne.n	8008fdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fa2:	7dfa      	ldrb	r2, [r7, #23]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	32ae      	adds	r2, #174	; 0xae
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d014      	beq.n	8008fdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008fb2:	7dfa      	ldrb	r2, [r7, #23]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008fba:	7dfa      	ldrb	r2, [r7, #23]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	32ae      	adds	r2, #174	; 0xae
 8008fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	7afa      	ldrb	r2, [r7, #11]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008fd2:	7dbb      	ldrb	r3, [r7, #22]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008fd8:	7dbb      	ldrb	r3, [r7, #22]
 8008fda:	e000      	b.n	8008fde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d014      	beq.n	800904c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00e      	beq.n	800904c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	b2d2      	uxtb	r2, r2
 800903c:	4611      	mov	r1, r2
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009048:	2303      	movs	r3, #3
 800904a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800904c:	2340      	movs	r3, #64	; 0x40
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fc51 	bl	800a8fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2240      	movs	r2, #64	; 0x40
 8009064:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	2200      	movs	r2, #0
 800906c:	2180      	movs	r1, #128	; 0x80
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fc43 	bl	800a8fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2240      	movs	r2, #64	; 0x40
 800907e:	621a      	str	r2, [r3, #32]

  return ret;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2204      	movs	r2, #4
 80090c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d106      	bne.n	80090f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b03      	cmp	r3, #3
 8009118:	d110      	bne.n	800913c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	32ae      	adds	r2, #174	; 0xae
 800915c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009164:	2303      	movs	r3, #3
 8009166:	e01c      	b.n	80091a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b03      	cmp	r3, #3
 8009172:	d115      	bne.n	80091a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	32ae      	adds	r2, #174	; 0xae
 800917e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	32ae      	adds	r2, #174	; 0xae
 8009192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	78fa      	ldrb	r2, [r7, #3]
 800919a:	4611      	mov	r1, r2
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	32ae      	adds	r2, #174	; 0xae
 80091c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e01c      	b.n	8009206 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d115      	bne.n	8009204 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	32ae      	adds	r2, #174	; 0xae
 80091e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	32ae      	adds	r2, #174	; 0xae
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	4611      	mov	r1, r2
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00e      	beq.n	8009260 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6852      	ldr	r2, [r2, #4]
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	4611      	mov	r1, r2
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009276:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009290:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b086      	sub	sp, #24
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	885b      	ldrh	r3, [r3, #2]
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d920      	bls.n	8009308 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092ce:	e013      	b.n	80092f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092d0:	f107 030a 	add.w	r3, r7, #10
 80092d4:	4619      	mov	r1, r3
 80092d6:	6978      	ldr	r0, [r7, #20]
 80092d8:	f000 f81b 	bl	8009312 <USBD_GetNextDesc>
 80092dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d108      	bne.n	80092f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	789b      	ldrb	r3, [r3, #2]
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d008      	beq.n	8009306 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	897b      	ldrh	r3, [r7, #10]
 8009300:	429a      	cmp	r2, r3
 8009302:	d8e5      	bhi.n	80092d0 <USBD_GetEpDesc+0x32>
 8009304:	e000      	b.n	8009308 <USBD_GetEpDesc+0x6a>
          break;
 8009306:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009308:	693b      	ldr	r3, [r7, #16]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	881a      	ldrh	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	4413      	add	r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4413      	add	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800933e:	68fb      	ldr	r3, [r7, #12]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	3301      	adds	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800936a:	8a3b      	ldrh	r3, [r7, #16]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	b21a      	sxth	r2, r3
 8009370:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009374:	4313      	orrs	r3, r2
 8009376:	b21b      	sxth	r3, r3
 8009378:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800937a:	89fb      	ldrh	r3, [r7, #14]
}
 800937c:	4618      	mov	r0, r3
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939e:	2b40      	cmp	r3, #64	; 0x40
 80093a0:	d005      	beq.n	80093ae <USBD_StdDevReq+0x26>
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d857      	bhi.n	8009456 <USBD_StdDevReq+0xce>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00f      	beq.n	80093ca <USBD_StdDevReq+0x42>
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	d153      	bne.n	8009456 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	32ae      	adds	r2, #174	; 0xae
 80093b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]
      break;
 80093c8:	e04a      	b.n	8009460 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b09      	cmp	r3, #9
 80093d0:	d83b      	bhi.n	800944a <USBD_StdDevReq+0xc2>
 80093d2:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <USBD_StdDevReq+0x50>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	0800942d 	.word	0x0800942d
 80093dc:	08009441 	.word	0x08009441
 80093e0:	0800944b 	.word	0x0800944b
 80093e4:	08009437 	.word	0x08009437
 80093e8:	0800944b 	.word	0x0800944b
 80093ec:	0800940b 	.word	0x0800940b
 80093f0:	08009401 	.word	0x08009401
 80093f4:	0800944b 	.word	0x0800944b
 80093f8:	08009423 	.word	0x08009423
 80093fc:	08009415 	.word	0x08009415
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa3c 	bl	8009880 <USBD_GetDescriptor>
          break;
 8009408:	e024      	b.n	8009454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fbcb 	bl	8009ba8 <USBD_SetAddress>
          break;
 8009412:	e01f      	b.n	8009454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fc0a 	bl	8009c30 <USBD_SetConfig>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
          break;
 8009420:	e018      	b.n	8009454 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fcad 	bl	8009d84 <USBD_GetConfig>
          break;
 800942a:	e013      	b.n	8009454 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fcde 	bl	8009df0 <USBD_GetStatus>
          break;
 8009434:	e00e      	b.n	8009454 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fd0d 	bl	8009e58 <USBD_SetFeature>
          break;
 800943e:	e009      	b.n	8009454 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fd31 	bl	8009eaa <USBD_ClrFeature>
          break;
 8009448:	e004      	b.n	8009454 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fd88 	bl	8009f62 <USBD_CtlError>
          break;
 8009452:	bf00      	nop
      }
      break;
 8009454:	e004      	b.n	8009460 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fd82 	bl	8009f62 <USBD_CtlError>
      break;
 800945e:	bf00      	nop
  }

  return ret;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop

0800946c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009482:	2b40      	cmp	r3, #64	; 0x40
 8009484:	d005      	beq.n	8009492 <USBD_StdItfReq+0x26>
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d852      	bhi.n	8009530 <USBD_StdItfReq+0xc4>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <USBD_StdItfReq+0x26>
 800948e:	2b20      	cmp	r3, #32
 8009490:	d14e      	bne.n	8009530 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	2b02      	cmp	r3, #2
 800949e:	d840      	bhi.n	8009522 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	889b      	ldrh	r3, [r3, #4]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d836      	bhi.n	8009518 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	889b      	ldrh	r3, [r3, #4]
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff fed9 	bl	800926a <USBD_CoreFindIF>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2bff      	cmp	r3, #255	; 0xff
 80094c0:	d01d      	beq.n	80094fe <USBD_StdItfReq+0x92>
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d11a      	bne.n	80094fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094c8:	7bba      	ldrb	r2, [r7, #14]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	32ae      	adds	r2, #174	; 0xae
 80094ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00f      	beq.n	80094f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094d8:	7bba      	ldrb	r2, [r7, #14]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094e0:	7bba      	ldrb	r2, [r7, #14]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	32ae      	adds	r2, #174	; 0xae
 80094e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	4798      	blx	r3
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094f6:	e004      	b.n	8009502 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094fc:	e001      	b.n	8009502 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094fe:	2303      	movs	r3, #3
 8009500:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	88db      	ldrh	r3, [r3, #6]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d110      	bne.n	800952c <USBD_StdItfReq+0xc0>
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10d      	bne.n	800952c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fdf1 	bl	800a0f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009516:	e009      	b.n	800952c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fd21 	bl	8009f62 <USBD_CtlError>
          break;
 8009520:	e004      	b.n	800952c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fd1c 	bl	8009f62 <USBD_CtlError>
          break;
 800952a:	e000      	b.n	800952e <USBD_StdItfReq+0xc2>
          break;
 800952c:	bf00      	nop
      }
      break;
 800952e:	e004      	b.n	800953a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fd15 	bl	8009f62 <USBD_CtlError>
      break;
 8009538:	bf00      	nop
  }

  return ret;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	889b      	ldrh	r3, [r3, #4]
 8009556:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009560:	2b40      	cmp	r3, #64	; 0x40
 8009562:	d007      	beq.n	8009574 <USBD_StdEPReq+0x30>
 8009564:	2b40      	cmp	r3, #64	; 0x40
 8009566:	f200 817f 	bhi.w	8009868 <USBD_StdEPReq+0x324>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d02a      	beq.n	80095c4 <USBD_StdEPReq+0x80>
 800956e:	2b20      	cmp	r3, #32
 8009570:	f040 817a 	bne.w	8009868 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fe83 	bl	8009284 <USBD_CoreFindEP>
 800957e:	4603      	mov	r3, r0
 8009580:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009582:	7b7b      	ldrb	r3, [r7, #13]
 8009584:	2bff      	cmp	r3, #255	; 0xff
 8009586:	f000 8174 	beq.w	8009872 <USBD_StdEPReq+0x32e>
 800958a:	7b7b      	ldrb	r3, [r7, #13]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 8170 	bne.w	8009872 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009592:	7b7a      	ldrb	r2, [r7, #13]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800959a:	7b7a      	ldrb	r2, [r7, #13]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	32ae      	adds	r2, #174	; 0xae
 80095a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 8163 	beq.w	8009872 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095ac:	7b7a      	ldrb	r2, [r7, #13]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	32ae      	adds	r2, #174	; 0xae
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095c2:	e156      	b.n	8009872 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d008      	beq.n	80095de <USBD_StdEPReq+0x9a>
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	f300 8145 	bgt.w	800985c <USBD_StdEPReq+0x318>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 809b 	beq.w	800970e <USBD_StdEPReq+0x1ca>
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d03c      	beq.n	8009656 <USBD_StdEPReq+0x112>
 80095dc:	e13e      	b.n	800985c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d002      	beq.n	80095f0 <USBD_StdEPReq+0xac>
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d016      	beq.n	800961c <USBD_StdEPReq+0xd8>
 80095ee:	e02c      	b.n	800964a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00d      	beq.n	8009612 <USBD_StdEPReq+0xce>
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	2b80      	cmp	r3, #128	; 0x80
 80095fa:	d00a      	beq.n	8009612 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 f9bf 	bl	800a984 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009606:	2180      	movs	r1, #128	; 0x80
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 f9bb 	bl	800a984 <USBD_LL_StallEP>
 800960e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009610:	e020      	b.n	8009654 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fca4 	bl	8009f62 <USBD_CtlError>
              break;
 800961a:	e01b      	b.n	8009654 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10e      	bne.n	8009642 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <USBD_StdEPReq+0xfe>
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b80      	cmp	r3, #128	; 0x80
 800962e:	d008      	beq.n	8009642 <USBD_StdEPReq+0xfe>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	88db      	ldrh	r3, [r3, #6]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f9a1 	bl	800a984 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fd58 	bl	800a0f8 <USBD_CtlSendStatus>

              break;
 8009648:	e004      	b.n	8009654 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fc88 	bl	8009f62 <USBD_CtlError>
              break;
 8009652:	bf00      	nop
          }
          break;
 8009654:	e107      	b.n	8009866 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d002      	beq.n	8009668 <USBD_StdEPReq+0x124>
 8009662:	2b03      	cmp	r3, #3
 8009664:	d016      	beq.n	8009694 <USBD_StdEPReq+0x150>
 8009666:	e04b      	b.n	8009700 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00d      	beq.n	800968a <USBD_StdEPReq+0x146>
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	2b80      	cmp	r3, #128	; 0x80
 8009672:	d00a      	beq.n	800968a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 f983 	bl	800a984 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800967e:	2180      	movs	r1, #128	; 0x80
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 f97f 	bl	800a984 <USBD_LL_StallEP>
 8009686:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009688:	e040      	b.n	800970c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fc68 	bl	8009f62 <USBD_CtlError>
              break;
 8009692:	e03b      	b.n	800970c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	885b      	ldrh	r3, [r3, #2]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d136      	bne.n	800970a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f001 f989 	bl	800a9c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fd21 	bl	800a0f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff fde2 	bl	8009284 <USBD_CoreFindEP>
 80096c0:	4603      	mov	r3, r0
 80096c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096c4:	7b7b      	ldrb	r3, [r7, #13]
 80096c6:	2bff      	cmp	r3, #255	; 0xff
 80096c8:	d01f      	beq.n	800970a <USBD_StdEPReq+0x1c6>
 80096ca:	7b7b      	ldrb	r3, [r7, #13]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d11c      	bne.n	800970a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096d0:	7b7a      	ldrb	r2, [r7, #13]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096d8:	7b7a      	ldrb	r2, [r7, #13]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32ae      	adds	r2, #174	; 0xae
 80096de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d010      	beq.n	800970a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096e8:	7b7a      	ldrb	r2, [r7, #13]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	32ae      	adds	r2, #174	; 0xae
 80096ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096fe:	e004      	b.n	800970a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fc2d 	bl	8009f62 <USBD_CtlError>
              break;
 8009708:	e000      	b.n	800970c <USBD_StdEPReq+0x1c8>
              break;
 800970a:	bf00      	nop
          }
          break;
 800970c:	e0ab      	b.n	8009866 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b02      	cmp	r3, #2
 8009718:	d002      	beq.n	8009720 <USBD_StdEPReq+0x1dc>
 800971a:	2b03      	cmp	r3, #3
 800971c:	d032      	beq.n	8009784 <USBD_StdEPReq+0x240>
 800971e:	e097      	b.n	8009850 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d007      	beq.n	8009736 <USBD_StdEPReq+0x1f2>
 8009726:	7bbb      	ldrb	r3, [r7, #14]
 8009728:	2b80      	cmp	r3, #128	; 0x80
 800972a:	d004      	beq.n	8009736 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fc17 	bl	8009f62 <USBD_CtlError>
                break;
 8009734:	e091      	b.n	800985a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	da0b      	bge.n	8009756 <USBD_StdEPReq+0x212>
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	3310      	adds	r3, #16
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	4413      	add	r3, r2
 8009752:	3304      	adds	r3, #4
 8009754:	e00b      	b.n	800976e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800975c:	4613      	mov	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	4413      	add	r3, r2
 800976c:	3304      	adds	r3, #4
 800976e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2202      	movs	r2, #2
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fc61 	bl	800a044 <USBD_CtlSendData>
              break;
 8009782:	e06a      	b.n	800985a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da11      	bge.n	80097b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800978c:	7bbb      	ldrb	r3, [r7, #14]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d117      	bne.n	80097d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fbda 	bl	8009f62 <USBD_CtlError>
                  break;
 80097ae:	e054      	b.n	800985a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	f003 020f 	and.w	r2, r3, #15
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fbc7 	bl	8009f62 <USBD_CtlError>
                  break;
 80097d4:	e041      	b.n	800985a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	da0b      	bge.n	80097f6 <USBD_StdEPReq+0x2b2>
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	3310      	adds	r3, #16
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	4413      	add	r3, r2
 80097f2:	3304      	adds	r3, #4
 80097f4:	e00b      	b.n	800980e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	4413      	add	r3, r2
 800980c:	3304      	adds	r3, #4
 800980e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <USBD_StdEPReq+0x2d8>
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b80      	cmp	r3, #128	; 0x80
 800981a:	d103      	bne.n	8009824 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	e00e      	b.n	8009842 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 f8e9 	bl	800aa00 <USBD_LL_IsStallEP>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2201      	movs	r2, #1
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e002      	b.n	8009842 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2202      	movs	r2, #2
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fbfb 	bl	800a044 <USBD_CtlSendData>
              break;
 800984e:	e004      	b.n	800985a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fb85 	bl	8009f62 <USBD_CtlError>
              break;
 8009858:	bf00      	nop
          }
          break;
 800985a:	e004      	b.n	8009866 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fb7f 	bl	8009f62 <USBD_CtlError>
          break;
 8009864:	bf00      	nop
      }
      break;
 8009866:	e005      	b.n	8009874 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fb79 	bl	8009f62 <USBD_CtlError>
      break;
 8009870:	e000      	b.n	8009874 <USBD_StdEPReq+0x330>
      break;
 8009872:	bf00      	nop
  }

  return ret;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	885b      	ldrh	r3, [r3, #2]
 800989a:	0a1b      	lsrs	r3, r3, #8
 800989c:	b29b      	uxth	r3, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	2b0e      	cmp	r3, #14
 80098a2:	f200 8152 	bhi.w	8009b4a <USBD_GetDescriptor+0x2ca>
 80098a6:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <USBD_GetDescriptor+0x2c>)
 80098a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ac:	0800991d 	.word	0x0800991d
 80098b0:	08009935 	.word	0x08009935
 80098b4:	08009975 	.word	0x08009975
 80098b8:	08009b4b 	.word	0x08009b4b
 80098bc:	08009b4b 	.word	0x08009b4b
 80098c0:	08009aeb 	.word	0x08009aeb
 80098c4:	08009b17 	.word	0x08009b17
 80098c8:	08009b4b 	.word	0x08009b4b
 80098cc:	08009b4b 	.word	0x08009b4b
 80098d0:	08009b4b 	.word	0x08009b4b
 80098d4:	08009b4b 	.word	0x08009b4b
 80098d8:	08009b4b 	.word	0x08009b4b
 80098dc:	08009b4b 	.word	0x08009b4b
 80098e0:	08009b4b 	.word	0x08009b4b
 80098e4:	080098e9 	.word	0x080098e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800990a:	e126      	b.n	8009b5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fb27 	bl	8009f62 <USBD_CtlError>
        err++;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	3301      	adds	r3, #1
 8009918:	72fb      	strb	r3, [r7, #11]
      break;
 800991a:	e11e      	b.n	8009b5a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	7c12      	ldrb	r2, [r2, #16]
 8009928:	f107 0108 	add.w	r1, r7, #8
 800992c:	4610      	mov	r0, r2
 800992e:	4798      	blx	r3
 8009930:	60f8      	str	r0, [r7, #12]
      break;
 8009932:	e112      	b.n	8009b5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7c1b      	ldrb	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10d      	bne.n	8009958 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009944:	f107 0208 	add.w	r2, r7, #8
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	2202      	movs	r2, #2
 8009954:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009956:	e100      	b.n	8009b5a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	f107 0208 	add.w	r2, r7, #8
 8009964:	4610      	mov	r0, r2
 8009966:	4798      	blx	r3
 8009968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3301      	adds	r3, #1
 800996e:	2202      	movs	r2, #2
 8009970:	701a      	strb	r2, [r3, #0]
      break;
 8009972:	e0f2      	b.n	8009b5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	885b      	ldrh	r3, [r3, #2]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b05      	cmp	r3, #5
 800997c:	f200 80ac 	bhi.w	8009ad8 <USBD_GetDescriptor+0x258>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_GetDescriptor+0x108>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099d5 	.word	0x080099d5
 8009990:	08009a09 	.word	0x08009a09
 8009994:	08009a3d 	.word	0x08009a3d
 8009998:	08009a71 	.word	0x08009a71
 800999c:	08009aa5 	.word	0x08009aa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	7c12      	ldrb	r2, [r2, #16]
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	4610      	mov	r0, r2
 80099be:	4798      	blx	r3
 80099c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c2:	e091      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 facb 	bl	8009f62 <USBD_CtlError>
            err++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
          break;
 80099d2:	e089      	b.n	8009ae8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f6:	e077      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fab1 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
          break;
 8009a06:	e06f      	b.n	8009ae8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e05d      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa97 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e055      	b.n	8009ae8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e043      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa7d 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e03b      	b.n	8009ae8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7c12      	ldrb	r2, [r2, #16]
 8009a88:	f107 0108 	add.w	r1, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a92:	e029      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa63 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa2:	e021      	b.n	8009ae8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e00f      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa49 	bl	8009f62 <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e007      	b.n	8009ae8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa41 	bl	8009f62 <USBD_CtlError>
          err++;
 8009ae0:	7afb      	ldrb	r3, [r7, #11]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ae6:	bf00      	nop
      }
      break;
 8009ae8:	e037      	b.n	8009b5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7c1b      	ldrb	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d109      	bne.n	8009b06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	f107 0208 	add.w	r2, r7, #8
 8009afe:	4610      	mov	r0, r2
 8009b00:	4798      	blx	r3
 8009b02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b04:	e029      	b.n	8009b5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fa2a 	bl	8009f62 <USBD_CtlError>
        err++;
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	3301      	adds	r3, #1
 8009b12:	72fb      	strb	r3, [r7, #11]
      break;
 8009b14:	e021      	b.n	8009b5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	7c1b      	ldrb	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10d      	bne.n	8009b3a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	f107 0208 	add.w	r2, r7, #8
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	4798      	blx	r3
 8009b2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3301      	adds	r3, #1
 8009b34:	2207      	movs	r2, #7
 8009b36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b38:	e00f      	b.n	8009b5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa10 	bl	8009f62 <USBD_CtlError>
        err++;
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	3301      	adds	r3, #1
 8009b46:	72fb      	strb	r3, [r7, #11]
      break;
 8009b48:	e007      	b.n	8009b5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fa08 	bl	8009f62 <USBD_CtlError>
      err++;
 8009b52:	7afb      	ldrb	r3, [r7, #11]
 8009b54:	3301      	adds	r3, #1
 8009b56:	72fb      	strb	r3, [r7, #11]
      break;
 8009b58:	bf00      	nop
  }

  if (err != 0U)
 8009b5a:	7afb      	ldrb	r3, [r7, #11]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d11e      	bne.n	8009b9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	88db      	ldrh	r3, [r3, #6]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d016      	beq.n	8009b96 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b68:	893b      	ldrh	r3, [r7, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00e      	beq.n	8009b8c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	88da      	ldrh	r2, [r3, #6]
 8009b72:	893b      	ldrh	r3, [r7, #8]
 8009b74:	4293      	cmp	r3, r2
 8009b76:	bf28      	it	cs
 8009b78:	4613      	movcs	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b7e:	893b      	ldrh	r3, [r7, #8]
 8009b80:	461a      	mov	r2, r3
 8009b82:	68f9      	ldr	r1, [r7, #12]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fa5d 	bl	800a044 <USBD_CtlSendData>
 8009b8a:	e009      	b.n	8009ba0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9e7 	bl	8009f62 <USBD_CtlError>
 8009b94:	e004      	b.n	8009ba0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 faae 	bl	800a0f8 <USBD_CtlSendStatus>
 8009b9c:	e000      	b.n	8009ba0 <USBD_GetDescriptor+0x320>
    return;
 8009b9e:	bf00      	nop
  }
}
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop

08009ba8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	889b      	ldrh	r3, [r3, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d131      	bne.n	8009c1e <USBD_SetAddress+0x76>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	88db      	ldrh	r3, [r3, #6]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d12d      	bne.n	8009c1e <USBD_SetAddress+0x76>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8009bc8:	d829      	bhi.n	8009c1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	885b      	ldrh	r3, [r3, #2]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d104      	bne.n	8009bec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f9bc 	bl	8009f62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	e01d      	b.n	8009c28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	7bfa      	ldrb	r2, [r7, #15]
 8009bf0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 ff2d 	bl	800aa58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa7a 	bl	800a0f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c12:	e009      	b.n	8009c28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1c:	e004      	b.n	8009c28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f99e 	bl	8009f62 <USBD_CtlError>
  }
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	4b4e      	ldr	r3, [pc, #312]	; (8009d80 <USBD_SetConfig+0x150>)
 8009c46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c48:	4b4d      	ldr	r3, [pc, #308]	; (8009d80 <USBD_SetConfig+0x150>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d905      	bls.n	8009c5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f985 	bl	8009f62 <USBD_CtlError>
    return USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e08c      	b.n	8009d76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d002      	beq.n	8009c6e <USBD_SetConfig+0x3e>
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d029      	beq.n	8009cc0 <USBD_SetConfig+0x90>
 8009c6c:	e075      	b.n	8009d5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c6e:	4b44      	ldr	r3, [pc, #272]	; (8009d80 <USBD_SetConfig+0x150>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d020      	beq.n	8009cb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c76:	4b42      	ldr	r3, [pc, #264]	; (8009d80 <USBD_SetConfig+0x150>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c80:	4b3f      	ldr	r3, [pc, #252]	; (8009d80 <USBD_SetConfig+0x150>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7fe ffbd 	bl	8008c06 <USBD_SetClassConfig>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d008      	beq.n	8009ca8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f962 	bl	8009f62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ca6:	e065      	b.n	8009d74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fa25 	bl	800a0f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2203      	movs	r2, #3
 8009cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cb6:	e05d      	b.n	8009d74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fa1d 	bl	800a0f8 <USBD_CtlSendStatus>
      break;
 8009cbe:	e059      	b.n	8009d74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cc0:	4b2f      	ldr	r3, [pc, #188]	; (8009d80 <USBD_SetConfig+0x150>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d112      	bne.n	8009cee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009cd0:	4b2b      	ldr	r3, [pc, #172]	; (8009d80 <USBD_SetConfig+0x150>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cda:	4b29      	ldr	r3, [pc, #164]	; (8009d80 <USBD_SetConfig+0x150>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7fe ffac 	bl	8008c3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fa06 	bl	800a0f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cec:	e042      	b.n	8009d74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009cee:	4b24      	ldr	r3, [pc, #144]	; (8009d80 <USBD_SetConfig+0x150>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d02a      	beq.n	8009d52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7fe ff9a 	bl	8008c3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <USBD_SetConfig+0x150>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d14:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <USBD_SetConfig+0x150>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7fe ff73 	bl	8008c06 <USBD_SetClassConfig>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00f      	beq.n	8009d4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f918 	bl	8009f62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fe ff7f 	bl	8008c3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d48:	e014      	b.n	8009d74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f9d4 	bl	800a0f8 <USBD_CtlSendStatus>
      break;
 8009d50:	e010      	b.n	8009d74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9d0 	bl	800a0f8 <USBD_CtlSendStatus>
      break;
 8009d58:	e00c      	b.n	8009d74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f900 	bl	8009f62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <USBD_SetConfig+0x150>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7fe ff68 	bl	8008c3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	73fb      	strb	r3, [r7, #15]
      break;
 8009d72:	bf00      	nop
  }

  return ret;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	200004fc 	.word	0x200004fc

08009d84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	88db      	ldrh	r3, [r3, #6]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d004      	beq.n	8009da0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8e2 	bl	8009f62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d9e:	e023      	b.n	8009de8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	dc02      	bgt.n	8009db2 <USBD_GetConfig+0x2e>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dc03      	bgt.n	8009db8 <USBD_GetConfig+0x34>
 8009db0:	e015      	b.n	8009dde <USBD_GetConfig+0x5a>
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d00b      	beq.n	8009dce <USBD_GetConfig+0x4a>
 8009db6:	e012      	b.n	8009dde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f93c 	bl	800a044 <USBD_CtlSendData>
        break;
 8009dcc:	e00c      	b.n	8009de8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f934 	bl	800a044 <USBD_CtlSendData>
        break;
 8009ddc:	e004      	b.n	8009de8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f8be 	bl	8009f62 <USBD_CtlError>
        break;
 8009de6:	bf00      	nop
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d81e      	bhi.n	8009e46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	88db      	ldrh	r3, [r3, #6]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d004      	beq.n	8009e1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f8a5 	bl	8009f62 <USBD_CtlError>
        break;
 8009e18:	e01a      	b.n	8009e50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f043 0202 	orr.w	r2, r3, #2
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	330c      	adds	r3, #12
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f900 	bl	800a044 <USBD_CtlSendData>
      break;
 8009e44:	e004      	b.n	8009e50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f88a 	bl	8009f62 <USBD_CtlError>
      break;
 8009e4e:	bf00      	nop
  }
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	885b      	ldrh	r3, [r3, #2]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d107      	bne.n	8009e7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f940 	bl	800a0f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e78:	e013      	b.n	8009ea2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	885b      	ldrh	r3, [r3, #2]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d10b      	bne.n	8009e9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	889b      	ldrh	r3, [r3, #4]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f930 	bl	800a0f8 <USBD_CtlSendStatus>
}
 8009e98:	e003      	b.n	8009ea2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f860 	bl	8009f62 <USBD_CtlError>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d80b      	bhi.n	8009eda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d10c      	bne.n	8009ee4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f910 	bl	800a0f8 <USBD_CtlSendStatus>
      }
      break;
 8009ed8:	e004      	b.n	8009ee4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f840 	bl	8009f62 <USBD_CtlError>
      break;
 8009ee2:	e000      	b.n	8009ee6 <USBD_ClrFeature+0x3c>
      break;
 8009ee4:	bf00      	nop
  }
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3301      	adds	r3, #1
 8009f08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	781a      	ldrb	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f7ff fa17 	bl	800934c <SWAPBYTE>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	461a      	mov	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f7ff fa0a 	bl	800934c <SWAPBYTE>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff f9fd 	bl	800934c <SWAPBYTE>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	80da      	strh	r2, [r3, #6]
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f6c:	2180      	movs	r1, #128	; 0x80
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fd08 	bl	800a984 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f74:	2100      	movs	r1, #0
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fd04 	bl	800a984 <USBD_LL_StallEP>
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d036      	beq.n	800a008 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f9e:	6938      	ldr	r0, [r7, #16]
 8009fa0:	f000 f836 	bl	800a010 <USBD_GetLen>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	7812      	ldrb	r2, [r2, #0]
 8009fbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4413      	add	r3, r2
 8009fca:	2203      	movs	r2, #3
 8009fcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fd4:	e013      	b.n	8009ffe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	4413      	add	r3, r2
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	613b      	str	r3, [r7, #16]
    idx++;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	3301      	adds	r3, #1
 8009fec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e7      	bne.n	8009fd6 <USBD_GetString+0x52>
 800a006:	e000      	b.n	800a00a <USBD_GetString+0x86>
    return;
 800a008:	bf00      	nop
  }
}
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a020:	e005      	b.n	800a02e <USBD_GetLen+0x1e>
  {
    len++;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	3301      	adds	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f5      	bne.n	800a022 <USBD_GetLen+0x12>
  }

  return len;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2202      	movs	r2, #2
 800a054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	2100      	movs	r1, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 fd13 	bl	800aa96 <USBD_LL_Transmit>

  return USBD_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	2100      	movs	r1, #0
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fd02 	bl	800aa96 <USBD_LL_Transmit>

  return USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 fd06 	bl	800aad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fcf5 	bl	800aad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2204      	movs	r2, #4
 800a104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a108:	2300      	movs	r3, #0
 800a10a:	2200      	movs	r2, #0
 800a10c:	2100      	movs	r1, #0
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fcc1 	bl	800aa96 <USBD_LL_Transmit>

  return USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2205      	movs	r2, #5
 800a12a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a12e:	2300      	movs	r3, #0
 800a130:	2200      	movs	r2, #0
 800a132:	2100      	movs	r1, #0
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fccf 	bl	800aad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a148:	2200      	movs	r2, #0
 800a14a:	4912      	ldr	r1, [pc, #72]	; (800a194 <MX_USB_DEVICE_Init+0x50>)
 800a14c:	4812      	ldr	r0, [pc, #72]	; (800a198 <MX_USB_DEVICE_Init+0x54>)
 800a14e:	f7fe fcdd 	bl	8008b0c <USBD_Init>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a158:	f7f7 fdca 	bl	8001cf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a15c:	490f      	ldr	r1, [pc, #60]	; (800a19c <MX_USB_DEVICE_Init+0x58>)
 800a15e:	480e      	ldr	r0, [pc, #56]	; (800a198 <MX_USB_DEVICE_Init+0x54>)
 800a160:	f7fe fd04 	bl	8008b6c <USBD_RegisterClass>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a16a:	f7f7 fdc1 	bl	8001cf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a16e:	490c      	ldr	r1, [pc, #48]	; (800a1a0 <MX_USB_DEVICE_Init+0x5c>)
 800a170:	4809      	ldr	r0, [pc, #36]	; (800a198 <MX_USB_DEVICE_Init+0x54>)
 800a172:	f7fe fbf5 	bl	8008960 <USBD_CDC_RegisterInterface>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a17c:	f7f7 fdb8 	bl	8001cf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a180:	4805      	ldr	r0, [pc, #20]	; (800a198 <MX_USB_DEVICE_Init+0x54>)
 800a182:	f7fe fd29 	bl	8008bd8 <USBD_Start>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a18c:	f7f7 fdb0 	bl	8001cf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a190:	bf00      	nop
 800a192:	bd80      	pop	{r7, pc}
 800a194:	200000ac 	.word	0x200000ac
 800a198:	20000500 	.word	0x20000500
 800a19c:	20000018 	.word	0x20000018
 800a1a0:	20000098 	.word	0x20000098

0800a1a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4905      	ldr	r1, [pc, #20]	; (800a1c0 <CDC_Init_FS+0x1c>)
 800a1ac:	4805      	ldr	r0, [pc, #20]	; (800a1c4 <CDC_Init_FS+0x20>)
 800a1ae:	f7fe fbf1 	bl	8008994 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1b2:	4905      	ldr	r1, [pc, #20]	; (800a1c8 <CDC_Init_FS+0x24>)
 800a1b4:	4803      	ldr	r0, [pc, #12]	; (800a1c4 <CDC_Init_FS+0x20>)
 800a1b6:	f7fe fc0f 	bl	80089d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20000fdc 	.word	0x20000fdc
 800a1c4:	20000500 	.word	0x20000500
 800a1c8:	200007dc 	.word	0x200007dc

0800a1cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	2b23      	cmp	r3, #35	; 0x23
 800a1f0:	d84a      	bhi.n	800a288 <CDC_Control_FS+0xac>
 800a1f2:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <CDC_Control_FS+0x1c>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a289 	.word	0x0800a289
 800a1fc:	0800a289 	.word	0x0800a289
 800a200:	0800a289 	.word	0x0800a289
 800a204:	0800a289 	.word	0x0800a289
 800a208:	0800a289 	.word	0x0800a289
 800a20c:	0800a289 	.word	0x0800a289
 800a210:	0800a289 	.word	0x0800a289
 800a214:	0800a289 	.word	0x0800a289
 800a218:	0800a289 	.word	0x0800a289
 800a21c:	0800a289 	.word	0x0800a289
 800a220:	0800a289 	.word	0x0800a289
 800a224:	0800a289 	.word	0x0800a289
 800a228:	0800a289 	.word	0x0800a289
 800a22c:	0800a289 	.word	0x0800a289
 800a230:	0800a289 	.word	0x0800a289
 800a234:	0800a289 	.word	0x0800a289
 800a238:	0800a289 	.word	0x0800a289
 800a23c:	0800a289 	.word	0x0800a289
 800a240:	0800a289 	.word	0x0800a289
 800a244:	0800a289 	.word	0x0800a289
 800a248:	0800a289 	.word	0x0800a289
 800a24c:	0800a289 	.word	0x0800a289
 800a250:	0800a289 	.word	0x0800a289
 800a254:	0800a289 	.word	0x0800a289
 800a258:	0800a289 	.word	0x0800a289
 800a25c:	0800a289 	.word	0x0800a289
 800a260:	0800a289 	.word	0x0800a289
 800a264:	0800a289 	.word	0x0800a289
 800a268:	0800a289 	.word	0x0800a289
 800a26c:	0800a289 	.word	0x0800a289
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a289 	.word	0x0800a289
 800a278:	0800a289 	.word	0x0800a289
 800a27c:	0800a289 	.word	0x0800a289
 800a280:	0800a289 	.word	0x0800a289
 800a284:	0800a289 	.word	0x0800a289
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a288:	bf00      	nop
  }

  return (USBD_OK);
 800a28a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	4805      	ldr	r0, [pc, #20]	; (800a2bc <CDC_Receive_FS+0x24>)
 800a2a6:	f7fe fb97 	bl	80089d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2aa:	4804      	ldr	r0, [pc, #16]	; (800a2bc <CDC_Receive_FS+0x24>)
 800a2ac:	f7fe fbf8 	bl	8008aa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000500 	.word	0x20000500

0800a2c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2d0:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <CDC_Transmit_FS+0x48>)
 800a2d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e00b      	b.n	800a2fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2e6:	887b      	ldrh	r3, [r7, #2]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	4806      	ldr	r0, [pc, #24]	; (800a308 <CDC_Transmit_FS+0x48>)
 800a2ee:	f7fe fb51 	bl	8008994 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2f2:	4805      	ldr	r0, [pc, #20]	; (800a308 <CDC_Transmit_FS+0x48>)
 800a2f4:	f7fe fb8e 	bl	8008a14 <USBD_CDC_TransmitPacket>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20000500 	.word	0x20000500

0800a30c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a31e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a322:	4618      	mov	r0, r3
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
	...

0800a330 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2212      	movs	r2, #18
 800a340:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a342:	4b03      	ldr	r3, [pc, #12]	; (800a350 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	200000cc 	.word	0x200000cc

0800a354 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2204      	movs	r2, #4
 800a364:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a366:	4b03      	ldr	r3, [pc, #12]	; (800a374 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a368:	4618      	mov	r0, r3
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	200000ec 	.word	0x200000ec

0800a378 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	6039      	str	r1, [r7, #0]
 800a382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d105      	bne.n	800a396 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	4907      	ldr	r1, [pc, #28]	; (800a3ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a38e:	4808      	ldr	r0, [pc, #32]	; (800a3b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a390:	f7ff fdf8 	bl	8009f84 <USBD_GetString>
 800a394:	e004      	b.n	800a3a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	4904      	ldr	r1, [pc, #16]	; (800a3ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a39a:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a39c:	f7ff fdf2 	bl	8009f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a0:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200017dc 	.word	0x200017dc
 800a3b0:	0800f5d8 	.word	0x0800f5d8

0800a3b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	4904      	ldr	r1, [pc, #16]	; (800a3d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3c4:	4804      	ldr	r0, [pc, #16]	; (800a3d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3c6:	f7ff fddd 	bl	8009f84 <USBD_GetString>
  return USBD_StrDesc;
 800a3ca:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	200017dc 	.word	0x200017dc
 800a3d8:	0800f5f0 	.word	0x0800f5f0

0800a3dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	221a      	movs	r2, #26
 800a3ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3ee:	f000 f855 	bl	800a49c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3f2:	4b02      	ldr	r3, [pc, #8]	; (800a3fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200000f0 	.word	0x200000f0

0800a400 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d105      	bne.n	800a41e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4907      	ldr	r1, [pc, #28]	; (800a434 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a416:	4808      	ldr	r0, [pc, #32]	; (800a438 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a418:	f7ff fdb4 	bl	8009f84 <USBD_GetString>
 800a41c:	e004      	b.n	800a428 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	4904      	ldr	r1, [pc, #16]	; (800a434 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a422:	4805      	ldr	r0, [pc, #20]	; (800a438 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a424:	f7ff fdae 	bl	8009f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a428:	4b02      	ldr	r3, [pc, #8]	; (800a434 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	200017dc 	.word	0x200017dc
 800a438:	0800f604 	.word	0x0800f604

0800a43c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d105      	bne.n	800a45a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4907      	ldr	r1, [pc, #28]	; (800a470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a452:	4808      	ldr	r0, [pc, #32]	; (800a474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a454:	f7ff fd96 	bl	8009f84 <USBD_GetString>
 800a458:	e004      	b.n	800a464 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	4904      	ldr	r1, [pc, #16]	; (800a470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a45e:	4805      	ldr	r0, [pc, #20]	; (800a474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a460:	f7ff fd90 	bl	8009f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200017dc 	.word	0x200017dc
 800a474:	0800f610 	.word	0x0800f610

0800a478 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	6039      	str	r1, [r7, #0]
 800a482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	220c      	movs	r2, #12
 800a488:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a48a:	4b03      	ldr	r3, [pc, #12]	; (800a498 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200000e0 	.word	0x200000e0

0800a49c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <Get_SerialNum+0x44>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4a8:	4b0e      	ldr	r3, [pc, #56]	; (800a4e4 <Get_SerialNum+0x48>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	; (800a4e8 <Get_SerialNum+0x4c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d009      	beq.n	800a4d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4c2:	2208      	movs	r2, #8
 800a4c4:	4909      	ldr	r1, [pc, #36]	; (800a4ec <Get_SerialNum+0x50>)
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f814 	bl	800a4f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4cc:	2204      	movs	r2, #4
 800a4ce:	4908      	ldr	r1, [pc, #32]	; (800a4f0 <Get_SerialNum+0x54>)
 800a4d0:	68b8      	ldr	r0, [r7, #8]
 800a4d2:	f000 f80f 	bl	800a4f4 <IntToUnicode>
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	1fff7a10 	.word	0x1fff7a10
 800a4e4:	1fff7a14 	.word	0x1fff7a14
 800a4e8:	1fff7a18 	.word	0x1fff7a18
 800a4ec:	200000f2 	.word	0x200000f2
 800a4f0:	20000102 	.word	0x20000102

0800a4f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	4613      	mov	r3, r2
 800a500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a506:	2300      	movs	r3, #0
 800a508:	75fb      	strb	r3, [r7, #23]
 800a50a:	e027      	b.n	800a55c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	0f1b      	lsrs	r3, r3, #28
 800a510:	2b09      	cmp	r3, #9
 800a512:	d80b      	bhi.n	800a52c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	0f1b      	lsrs	r3, r3, #28
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	4619      	mov	r1, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	440b      	add	r3, r1
 800a524:	3230      	adds	r2, #48	; 0x30
 800a526:	b2d2      	uxtb	r2, r2
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	e00a      	b.n	800a542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	0f1b      	lsrs	r3, r3, #28
 800a530:	b2da      	uxtb	r2, r3
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	4619      	mov	r1, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	440b      	add	r3, r1
 800a53c:	3237      	adds	r2, #55	; 0x37
 800a53e:	b2d2      	uxtb	r2, r2
 800a540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	011b      	lsls	r3, r3, #4
 800a546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	3301      	adds	r3, #1
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	4413      	add	r3, r2
 800a552:	2200      	movs	r2, #0
 800a554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	3301      	adds	r3, #1
 800a55a:	75fb      	strb	r3, [r7, #23]
 800a55c:	7dfa      	ldrb	r2, [r7, #23]
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	429a      	cmp	r2, r3
 800a562:	d3d3      	bcc.n	800a50c <IntToUnicode+0x18>
  }
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
	...

0800a574 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b0a0      	sub	sp, #128	; 0x80
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a57c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	605a      	str	r2, [r3, #4]
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	60da      	str	r2, [r3, #12]
 800a58a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a58c:	f107 0310 	add.w	r3, r7, #16
 800a590:	225c      	movs	r2, #92	; 0x5c
 800a592:	2100      	movs	r1, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fb8f 	bl	800acb8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a2:	d149      	bne.n	800a638 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a5a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5ae:	f107 0310 	add.w	r3, r7, #16
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fa fb0c 	bl	8004bd0 <HAL_RCCEx_PeriphCLKConfig>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a5be:	f7f7 fb97 	bl	8001cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ca:	4a1d      	ldr	r2, [pc, #116]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a5cc:	f043 0301 	orr.w	r3, r3, #1
 800a5d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB__Pin|USB_A12_Pin;
 800a5de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5f0:	230a      	movs	r3, #10
 800a5f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4812      	ldr	r0, [pc, #72]	; (800a644 <HAL_PCD_MspInit+0xd0>)
 800a5fc:	f7f8 fc0e 	bl	8002e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a604:	4a0e      	ldr	r2, [pc, #56]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60a:	6353      	str	r3, [r2, #52]	; 0x34
 800a60c:	2300      	movs	r3, #0
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a614:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a61a:	6453      	str	r3, [r2, #68]	; 0x44
 800a61c:	4b08      	ldr	r3, [pc, #32]	; (800a640 <HAL_PCD_MspInit+0xcc>)
 800a61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a624:	60bb      	str	r3, [r7, #8]
 800a626:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a628:	2200      	movs	r2, #0
 800a62a:	2100      	movs	r1, #0
 800a62c:	2043      	movs	r0, #67	; 0x43
 800a62e:	f7f8 fbbe 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a632:	2043      	movs	r0, #67	; 0x43
 800a634:	f7f8 fbd7 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a638:	bf00      	nop
 800a63a:	3780      	adds	r7, #128	; 0x80
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	40023800 	.word	0x40023800
 800a644:	40020000 	.word	0x40020000

0800a648 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	f7fe fb07 	bl	8008c72 <USBD_LL_SetupStage>
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	4619      	mov	r1, r3
 800a696:	f7fe fb41 	bl	8008d1c <USBD_LL_DataOutStage>
}
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6b4:	78fa      	ldrb	r2, [r7, #3]
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	00db      	lsls	r3, r3, #3
 800a6bc:	4413      	add	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	440b      	add	r3, r1
 800a6c2:	334c      	adds	r3, #76	; 0x4c
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	f7fe fbda 	bl	8008e82 <USBD_LL_DataInStage>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe fd0e 	bl	8009106 <USBD_LL_SOF>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
 800a70a:	e008      	b.n	800a71e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d102      	bne.n	800a71a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a714:	2301      	movs	r3, #1
 800a716:	73fb      	strb	r3, [r7, #15]
 800a718:	e001      	b.n	800a71e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a71a:	f7f7 fae9 	bl	8001cf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a724:	7bfa      	ldrb	r2, [r7, #15]
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fcae 	bl	800908a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fc56 	bl	8008fe6 <USBD_LL_Reset>
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe fca9 	bl	80090aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <HAL_PCD_SuspendCallback+0x48>)
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	4a03      	ldr	r2, [pc, #12]	; (800a78c <HAL_PCD_SuspendCallback+0x48>)
 800a77e:	f043 0306 	orr.w	r3, r3, #6
 800a782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	e000ed00 	.word	0xe000ed00

0800a790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fc99 	bl	80090d6 <USBD_LL_Resume>
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fcf1 	bl	80091aa <USBD_LL_IsoOUTIncomplete>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fcad 	bl	8009146 <USBD_LL_IsoINIncomplete>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fd03 	bl	800920e <USBD_LL_DevConnected>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fd00 	bl	8009224 <USBD_LL_DevDisconnected>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d13c      	bne.n	800a8b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a83c:	4a20      	ldr	r2, [pc, #128]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a1e      	ldr	r2, [pc, #120]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a848:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a84c:	4b1c      	ldr	r3, [pc, #112]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a84e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a854:	4b1a      	ldr	r3, [pc, #104]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a856:	2206      	movs	r2, #6
 800a858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a85a:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a85c:	2202      	movs	r2, #2
 800a85e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a860:	4b17      	ldr	r3, [pc, #92]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a862:	2200      	movs	r2, #0
 800a864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a866:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a868:	2202      	movs	r2, #2
 800a86a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a86c:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a86e:	2200      	movs	r2, #0
 800a870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a874:	2200      	movs	r2, #0
 800a876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a878:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a87e:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a880:	2200      	movs	r2, #0
 800a882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a884:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a886:	2200      	movs	r2, #0
 800a888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a88a:	480d      	ldr	r0, [pc, #52]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a88c:	f7f8 fdd0 	bl	8003430 <HAL_PCD_Init>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a896:	f7f7 fa2b 	bl	8001cf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a89a:	2180      	movs	r1, #128	; 0x80
 800a89c:	4808      	ldr	r0, [pc, #32]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a89e:	f7fa f85c 	bl	800495a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8a2:	2240      	movs	r2, #64	; 0x40
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4806      	ldr	r0, [pc, #24]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a8a8:	f7fa f810 	bl	80048cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8ac:	2280      	movs	r2, #128	; 0x80
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	4803      	ldr	r0, [pc, #12]	; (800a8c0 <USBD_LL_Init+0x94>)
 800a8b2:	f7fa f80b 	bl	80048cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	200019dc 	.word	0x200019dc

0800a8c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f8 fecc 	bl	8003678 <HAL_PCD_Start>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 f990 	bl	800ac0c <USBD_Get_USB_Status>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	4608      	mov	r0, r1
 800a904:	4611      	mov	r1, r2
 800a906:	461a      	mov	r2, r3
 800a908:	4603      	mov	r3, r0
 800a90a:	70fb      	strb	r3, [r7, #3]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70bb      	strb	r3, [r7, #2]
 800a910:	4613      	mov	r3, r2
 800a912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a922:	78bb      	ldrb	r3, [r7, #2]
 800a924:	883a      	ldrh	r2, [r7, #0]
 800a926:	78f9      	ldrb	r1, [r7, #3]
 800a928:	f7f9 fbca 	bl	80040c0 <HAL_PCD_EP_Open>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f96a 	bl	800ac0c <USBD_Get_USB_Status>
 800a938:	4603      	mov	r3, r0
 800a93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	460b      	mov	r3, r1
 800a950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a960:	78fa      	ldrb	r2, [r7, #3]
 800a962:	4611      	mov	r1, r2
 800a964:	4618      	mov	r0, r3
 800a966:	f7f9 fc13 	bl	8004190 <HAL_PCD_EP_Close>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f94b 	bl	800ac0c <USBD_Get_USB_Status>
 800a976:	4603      	mov	r3, r0
 800a978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7f9 fceb 	bl	800437e <HAL_PCD_EP_SetStall>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 f92c 	bl	800ac0c <USBD_Get_USB_Status>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9dc:	78fa      	ldrb	r2, [r7, #3]
 800a9de:	4611      	mov	r1, r2
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f9 fd30 	bl	8004446 <HAL_PCD_EP_ClrStall>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 f90d 	bl	800ac0c <USBD_Get_USB_Status>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da0b      	bge.n	800aa34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa22:	68f9      	ldr	r1, [r7, #12]
 800aa24:	4613      	mov	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	440b      	add	r3, r1
 800aa2e:	333e      	adds	r3, #62	; 0x3e
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	e00b      	b.n	800aa4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa3a:	68f9      	ldr	r1, [r7, #12]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	440b      	add	r3, r1
 800aa46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aa4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa72:	78fa      	ldrb	r2, [r7, #3]
 800aa74:	4611      	mov	r1, r2
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f9 fafd 	bl	8004076 <HAL_PCD_SetAddress>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f8c2 	bl	800ac0c <USBD_Get_USB_Status>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b086      	sub	sp, #24
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	603b      	str	r3, [r7, #0]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aab4:	7af9      	ldrb	r1, [r7, #11]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	f7f9 fc16 	bl	80042ea <HAL_PCD_EP_Transmit>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 f8a1 	bl	800ac0c <USBD_Get_USB_Status>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aace:	7dbb      	ldrb	r3, [r7, #22]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	460b      	mov	r3, r1
 800aae6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aaf6:	7af9      	ldrb	r1, [r7, #11]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	f7f9 fb92 	bl	8004224 <HAL_PCD_EP_Receive>
 800ab00:	4603      	mov	r3, r0
 800ab02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f880 	bl	800ac0c <USBD_Get_USB_Status>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab10:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab2c:	78fa      	ldrb	r2, [r7, #3]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f9 fbc2 	bl	80042ba <HAL_PCD_EP_GetRxCount>
 800ab36:	4603      	mov	r3, r0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <HAL_PCDEx_LPM_Callback+0x18>
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d01f      	beq.n	800ab96 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ab56:	e03b      	b.n	800abd0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800ab60:	f7f6 fb18 	bl	8001194 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab64:	4b1c      	ldr	r3, [pc, #112]	; (800abd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	4a1b      	ldr	r2, [pc, #108]	; (800abd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab6a:	f023 0306 	bic.w	r3, r3, #6
 800ab6e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe faa1 	bl	80090d6 <USBD_LL_Resume>
    break;
 800ab94:	e01c      	b.n	800abd0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aba8:	f043 0301 	orr.w	r3, r3, #1
 800abac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe fa78 	bl	80090aa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d005      	beq.n	800abce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abc2:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	4a04      	ldr	r2, [pc, #16]	; (800abd8 <HAL_PCDEx_LPM_Callback+0x98>)
 800abc8:	f043 0306 	orr.w	r3, r3, #6
 800abcc:	6113      	str	r3, [r2, #16]
    break;
 800abce:	bf00      	nop
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	e000ed00 	.word	0xe000ed00

0800abdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abe4:	4b03      	ldr	r3, [pc, #12]	; (800abf4 <USBD_static_malloc+0x18>)
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20001ee8 	.word	0x20001ee8

0800abf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]

}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac1a:	79fb      	ldrb	r3, [r7, #7]
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d817      	bhi.n	800ac50 <USBD_Get_USB_Status+0x44>
 800ac20:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USBD_Get_USB_Status+0x1c>)
 800ac22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac26:	bf00      	nop
 800ac28:	0800ac39 	.word	0x0800ac39
 800ac2c:	0800ac3f 	.word	0x0800ac3f
 800ac30:	0800ac45 	.word	0x0800ac45
 800ac34:	0800ac4b 	.word	0x0800ac4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac3c:	e00b      	b.n	800ac56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	73fb      	strb	r3, [r7, #15]
    break;
 800ac42:	e008      	b.n	800ac56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac44:	2301      	movs	r3, #1
 800ac46:	73fb      	strb	r3, [r7, #15]
    break;
 800ac48:	e005      	b.n	800ac56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac4e:	e002      	b.n	800ac56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac50:	2303      	movs	r3, #3
 800ac52:	73fb      	strb	r3, [r7, #15]
    break;
 800ac54:	bf00      	nop
  }
  return usb_status;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <__errno>:
 800ac64:	4b01      	ldr	r3, [pc, #4]	; (800ac6c <__errno+0x8>)
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	2000010c 	.word	0x2000010c

0800ac70 <__libc_init_array>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4d0d      	ldr	r5, [pc, #52]	; (800aca8 <__libc_init_array+0x38>)
 800ac74:	4c0d      	ldr	r4, [pc, #52]	; (800acac <__libc_init_array+0x3c>)
 800ac76:	1b64      	subs	r4, r4, r5
 800ac78:	10a4      	asrs	r4, r4, #2
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	42a6      	cmp	r6, r4
 800ac7e:	d109      	bne.n	800ac94 <__libc_init_array+0x24>
 800ac80:	4d0b      	ldr	r5, [pc, #44]	; (800acb0 <__libc_init_array+0x40>)
 800ac82:	4c0c      	ldr	r4, [pc, #48]	; (800acb4 <__libc_init_array+0x44>)
 800ac84:	f004 fc90 	bl	800f5a8 <_init>
 800ac88:	1b64      	subs	r4, r4, r5
 800ac8a:	10a4      	asrs	r4, r4, #2
 800ac8c:	2600      	movs	r6, #0
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	d105      	bne.n	800ac9e <__libc_init_array+0x2e>
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac98:	4798      	blx	r3
 800ac9a:	3601      	adds	r6, #1
 800ac9c:	e7ee      	b.n	800ac7c <__libc_init_array+0xc>
 800ac9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca2:	4798      	blx	r3
 800aca4:	3601      	adds	r6, #1
 800aca6:	e7f2      	b.n	800ac8e <__libc_init_array+0x1e>
 800aca8:	0800fae4 	.word	0x0800fae4
 800acac:	0800fae4 	.word	0x0800fae4
 800acb0:	0800fae4 	.word	0x0800fae4
 800acb4:	0800fae8 	.word	0x0800fae8

0800acb8 <memset>:
 800acb8:	4402      	add	r2, r0
 800acba:	4603      	mov	r3, r0
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d100      	bne.n	800acc2 <memset+0xa>
 800acc0:	4770      	bx	lr
 800acc2:	f803 1b01 	strb.w	r1, [r3], #1
 800acc6:	e7f9      	b.n	800acbc <memset+0x4>

0800acc8 <__cvt>:
 800acc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800accc:	ec55 4b10 	vmov	r4, r5, d0
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	460e      	mov	r6, r1
 800acd4:	4619      	mov	r1, r3
 800acd6:	462b      	mov	r3, r5
 800acd8:	bfbb      	ittet	lt
 800acda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acde:	461d      	movlt	r5, r3
 800ace0:	2300      	movge	r3, #0
 800ace2:	232d      	movlt	r3, #45	; 0x2d
 800ace4:	700b      	strb	r3, [r1, #0]
 800ace6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800acec:	4691      	mov	r9, r2
 800acee:	f023 0820 	bic.w	r8, r3, #32
 800acf2:	bfbc      	itt	lt
 800acf4:	4622      	movlt	r2, r4
 800acf6:	4614      	movlt	r4, r2
 800acf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acfc:	d005      	beq.n	800ad0a <__cvt+0x42>
 800acfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad02:	d100      	bne.n	800ad06 <__cvt+0x3e>
 800ad04:	3601      	adds	r6, #1
 800ad06:	2102      	movs	r1, #2
 800ad08:	e000      	b.n	800ad0c <__cvt+0x44>
 800ad0a:	2103      	movs	r1, #3
 800ad0c:	ab03      	add	r3, sp, #12
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	ab02      	add	r3, sp, #8
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	ec45 4b10 	vmov	d0, r4, r5
 800ad18:	4653      	mov	r3, sl
 800ad1a:	4632      	mov	r2, r6
 800ad1c:	f001 fdac 	bl	800c878 <_dtoa_r>
 800ad20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad24:	4607      	mov	r7, r0
 800ad26:	d102      	bne.n	800ad2e <__cvt+0x66>
 800ad28:	f019 0f01 	tst.w	r9, #1
 800ad2c:	d022      	beq.n	800ad74 <__cvt+0xac>
 800ad2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad32:	eb07 0906 	add.w	r9, r7, r6
 800ad36:	d110      	bne.n	800ad5a <__cvt+0x92>
 800ad38:	783b      	ldrb	r3, [r7, #0]
 800ad3a:	2b30      	cmp	r3, #48	; 0x30
 800ad3c:	d10a      	bne.n	800ad54 <__cvt+0x8c>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2300      	movs	r3, #0
 800ad42:	4620      	mov	r0, r4
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7f5 fedf 	bl	8000b08 <__aeabi_dcmpeq>
 800ad4a:	b918      	cbnz	r0, 800ad54 <__cvt+0x8c>
 800ad4c:	f1c6 0601 	rsb	r6, r6, #1
 800ad50:	f8ca 6000 	str.w	r6, [sl]
 800ad54:	f8da 3000 	ldr.w	r3, [sl]
 800ad58:	4499      	add	r9, r3
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 fed1 	bl	8000b08 <__aeabi_dcmpeq>
 800ad66:	b108      	cbz	r0, 800ad6c <__cvt+0xa4>
 800ad68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad6c:	2230      	movs	r2, #48	; 0x30
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	454b      	cmp	r3, r9
 800ad72:	d307      	bcc.n	800ad84 <__cvt+0xbc>
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad78:	1bdb      	subs	r3, r3, r7
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	b004      	add	sp, #16
 800ad80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad84:	1c59      	adds	r1, r3, #1
 800ad86:	9103      	str	r1, [sp, #12]
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e7f0      	b.n	800ad6e <__cvt+0xa6>

0800ad8c <__exponent>:
 800ad8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2900      	cmp	r1, #0
 800ad92:	bfb8      	it	lt
 800ad94:	4249      	neglt	r1, r1
 800ad96:	f803 2b02 	strb.w	r2, [r3], #2
 800ad9a:	bfb4      	ite	lt
 800ad9c:	222d      	movlt	r2, #45	; 0x2d
 800ad9e:	222b      	movge	r2, #43	; 0x2b
 800ada0:	2909      	cmp	r1, #9
 800ada2:	7042      	strb	r2, [r0, #1]
 800ada4:	dd2a      	ble.n	800adfc <__exponent+0x70>
 800ada6:	f10d 0407 	add.w	r4, sp, #7
 800adaa:	46a4      	mov	ip, r4
 800adac:	270a      	movs	r7, #10
 800adae:	46a6      	mov	lr, r4
 800adb0:	460a      	mov	r2, r1
 800adb2:	fb91 f6f7 	sdiv	r6, r1, r7
 800adb6:	fb07 1516 	mls	r5, r7, r6, r1
 800adba:	3530      	adds	r5, #48	; 0x30
 800adbc:	2a63      	cmp	r2, #99	; 0x63
 800adbe:	f104 34ff 	add.w	r4, r4, #4294967295
 800adc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800adc6:	4631      	mov	r1, r6
 800adc8:	dcf1      	bgt.n	800adae <__exponent+0x22>
 800adca:	3130      	adds	r1, #48	; 0x30
 800adcc:	f1ae 0502 	sub.w	r5, lr, #2
 800add0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800add4:	1c44      	adds	r4, r0, #1
 800add6:	4629      	mov	r1, r5
 800add8:	4561      	cmp	r1, ip
 800adda:	d30a      	bcc.n	800adf2 <__exponent+0x66>
 800addc:	f10d 0209 	add.w	r2, sp, #9
 800ade0:	eba2 020e 	sub.w	r2, r2, lr
 800ade4:	4565      	cmp	r5, ip
 800ade6:	bf88      	it	hi
 800ade8:	2200      	movhi	r2, #0
 800adea:	4413      	add	r3, r2
 800adec:	1a18      	subs	r0, r3, r0
 800adee:	b003      	add	sp, #12
 800adf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adfa:	e7ed      	b.n	800add8 <__exponent+0x4c>
 800adfc:	2330      	movs	r3, #48	; 0x30
 800adfe:	3130      	adds	r1, #48	; 0x30
 800ae00:	7083      	strb	r3, [r0, #2]
 800ae02:	70c1      	strb	r1, [r0, #3]
 800ae04:	1d03      	adds	r3, r0, #4
 800ae06:	e7f1      	b.n	800adec <__exponent+0x60>

0800ae08 <_printf_float>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	ed2d 8b02 	vpush	{d8}
 800ae10:	b08d      	sub	sp, #52	; 0x34
 800ae12:	460c      	mov	r4, r1
 800ae14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae18:	4616      	mov	r6, r2
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	f002 fe89 	bl	800db34 <_localeconv_r>
 800ae22:	f8d0 a000 	ldr.w	sl, [r0]
 800ae26:	4650      	mov	r0, sl
 800ae28:	f7f5 f9f2 	bl	8000210 <strlen>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	f8d8 3000 	ldr.w	r3, [r8]
 800ae38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae3c:	3307      	adds	r3, #7
 800ae3e:	f023 0307 	bic.w	r3, r3, #7
 800ae42:	f103 0208 	add.w	r2, r3, #8
 800ae46:	f8c8 2000 	str.w	r2, [r8]
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae5a:	9307      	str	r3, [sp, #28]
 800ae5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae60:	ee08 0a10 	vmov	s16, r0
 800ae64:	4b9f      	ldr	r3, [pc, #636]	; (800b0e4 <_printf_float+0x2dc>)
 800ae66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6e:	f7f5 fe7d 	bl	8000b6c <__aeabi_dcmpun>
 800ae72:	bb88      	cbnz	r0, 800aed8 <_printf_float+0xd0>
 800ae74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae78:	4b9a      	ldr	r3, [pc, #616]	; (800b0e4 <_printf_float+0x2dc>)
 800ae7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7e:	f7f5 fe57 	bl	8000b30 <__aeabi_dcmple>
 800ae82:	bb48      	cbnz	r0, 800aed8 <_printf_float+0xd0>
 800ae84:	2200      	movs	r2, #0
 800ae86:	2300      	movs	r3, #0
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 fe46 	bl	8000b1c <__aeabi_dcmplt>
 800ae90:	b110      	cbz	r0, 800ae98 <_printf_float+0x90>
 800ae92:	232d      	movs	r3, #45	; 0x2d
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae98:	4b93      	ldr	r3, [pc, #588]	; (800b0e8 <_printf_float+0x2e0>)
 800ae9a:	4894      	ldr	r0, [pc, #592]	; (800b0ec <_printf_float+0x2e4>)
 800ae9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aea0:	bf94      	ite	ls
 800aea2:	4698      	movls	r8, r3
 800aea4:	4680      	movhi	r8, r0
 800aea6:	2303      	movs	r3, #3
 800aea8:	6123      	str	r3, [r4, #16]
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	f023 0204 	bic.w	r2, r3, #4
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	f04f 0900 	mov.w	r9, #0
 800aeb6:	9700      	str	r7, [sp, #0]
 800aeb8:	4633      	mov	r3, r6
 800aeba:	aa0b      	add	r2, sp, #44	; 0x2c
 800aebc:	4621      	mov	r1, r4
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 f9d8 	bl	800b274 <_printf_common>
 800aec4:	3001      	adds	r0, #1
 800aec6:	f040 8090 	bne.w	800afea <_printf_float+0x1e2>
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	b00d      	add	sp, #52	; 0x34
 800aed0:	ecbd 8b02 	vpop	{d8}
 800aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed8:	4642      	mov	r2, r8
 800aeda:	464b      	mov	r3, r9
 800aedc:	4640      	mov	r0, r8
 800aede:	4649      	mov	r1, r9
 800aee0:	f7f5 fe44 	bl	8000b6c <__aeabi_dcmpun>
 800aee4:	b140      	cbz	r0, 800aef8 <_printf_float+0xf0>
 800aee6:	464b      	mov	r3, r9
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bfbc      	itt	lt
 800aeec:	232d      	movlt	r3, #45	; 0x2d
 800aeee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aef2:	487f      	ldr	r0, [pc, #508]	; (800b0f0 <_printf_float+0x2e8>)
 800aef4:	4b7f      	ldr	r3, [pc, #508]	; (800b0f4 <_printf_float+0x2ec>)
 800aef6:	e7d1      	b.n	800ae9c <_printf_float+0x94>
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aefe:	9206      	str	r2, [sp, #24]
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	d13f      	bne.n	800af84 <_printf_float+0x17c>
 800af04:	2306      	movs	r3, #6
 800af06:	6063      	str	r3, [r4, #4]
 800af08:	9b05      	ldr	r3, [sp, #20]
 800af0a:	6861      	ldr	r1, [r4, #4]
 800af0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af10:	2300      	movs	r3, #0
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	ab0a      	add	r3, sp, #40	; 0x28
 800af16:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af1a:	ab09      	add	r3, sp, #36	; 0x24
 800af1c:	ec49 8b10 	vmov	d0, r8, r9
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af28:	4628      	mov	r0, r5
 800af2a:	f7ff fecd 	bl	800acc8 <__cvt>
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af32:	2b47      	cmp	r3, #71	; 0x47
 800af34:	4680      	mov	r8, r0
 800af36:	d108      	bne.n	800af4a <_printf_float+0x142>
 800af38:	1cc8      	adds	r0, r1, #3
 800af3a:	db02      	blt.n	800af42 <_printf_float+0x13a>
 800af3c:	6863      	ldr	r3, [r4, #4]
 800af3e:	4299      	cmp	r1, r3
 800af40:	dd41      	ble.n	800afc6 <_printf_float+0x1be>
 800af42:	f1ab 0b02 	sub.w	fp, fp, #2
 800af46:	fa5f fb8b 	uxtb.w	fp, fp
 800af4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af4e:	d820      	bhi.n	800af92 <_printf_float+0x18a>
 800af50:	3901      	subs	r1, #1
 800af52:	465a      	mov	r2, fp
 800af54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af58:	9109      	str	r1, [sp, #36]	; 0x24
 800af5a:	f7ff ff17 	bl	800ad8c <__exponent>
 800af5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af60:	1813      	adds	r3, r2, r0
 800af62:	2a01      	cmp	r2, #1
 800af64:	4681      	mov	r9, r0
 800af66:	6123      	str	r3, [r4, #16]
 800af68:	dc02      	bgt.n	800af70 <_printf_float+0x168>
 800af6a:	6822      	ldr	r2, [r4, #0]
 800af6c:	07d2      	lsls	r2, r2, #31
 800af6e:	d501      	bpl.n	800af74 <_printf_float+0x16c>
 800af70:	3301      	adds	r3, #1
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d09c      	beq.n	800aeb6 <_printf_float+0xae>
 800af7c:	232d      	movs	r3, #45	; 0x2d
 800af7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af82:	e798      	b.n	800aeb6 <_printf_float+0xae>
 800af84:	9a06      	ldr	r2, [sp, #24]
 800af86:	2a47      	cmp	r2, #71	; 0x47
 800af88:	d1be      	bne.n	800af08 <_printf_float+0x100>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1bc      	bne.n	800af08 <_printf_float+0x100>
 800af8e:	2301      	movs	r3, #1
 800af90:	e7b9      	b.n	800af06 <_printf_float+0xfe>
 800af92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af96:	d118      	bne.n	800afca <_printf_float+0x1c2>
 800af98:	2900      	cmp	r1, #0
 800af9a:	6863      	ldr	r3, [r4, #4]
 800af9c:	dd0b      	ble.n	800afb6 <_printf_float+0x1ae>
 800af9e:	6121      	str	r1, [r4, #16]
 800afa0:	b913      	cbnz	r3, 800afa8 <_printf_float+0x1a0>
 800afa2:	6822      	ldr	r2, [r4, #0]
 800afa4:	07d0      	lsls	r0, r2, #31
 800afa6:	d502      	bpl.n	800afae <_printf_float+0x1a6>
 800afa8:	3301      	adds	r3, #1
 800afaa:	440b      	add	r3, r1
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	65a1      	str	r1, [r4, #88]	; 0x58
 800afb0:	f04f 0900 	mov.w	r9, #0
 800afb4:	e7de      	b.n	800af74 <_printf_float+0x16c>
 800afb6:	b913      	cbnz	r3, 800afbe <_printf_float+0x1b6>
 800afb8:	6822      	ldr	r2, [r4, #0]
 800afba:	07d2      	lsls	r2, r2, #31
 800afbc:	d501      	bpl.n	800afc2 <_printf_float+0x1ba>
 800afbe:	3302      	adds	r3, #2
 800afc0:	e7f4      	b.n	800afac <_printf_float+0x1a4>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e7f2      	b.n	800afac <_printf_float+0x1a4>
 800afc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800afca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afcc:	4299      	cmp	r1, r3
 800afce:	db05      	blt.n	800afdc <_printf_float+0x1d4>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	6121      	str	r1, [r4, #16]
 800afd4:	07d8      	lsls	r0, r3, #31
 800afd6:	d5ea      	bpl.n	800afae <_printf_float+0x1a6>
 800afd8:	1c4b      	adds	r3, r1, #1
 800afda:	e7e7      	b.n	800afac <_printf_float+0x1a4>
 800afdc:	2900      	cmp	r1, #0
 800afde:	bfd4      	ite	le
 800afe0:	f1c1 0202 	rsble	r2, r1, #2
 800afe4:	2201      	movgt	r2, #1
 800afe6:	4413      	add	r3, r2
 800afe8:	e7e0      	b.n	800afac <_printf_float+0x1a4>
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	055a      	lsls	r2, r3, #21
 800afee:	d407      	bmi.n	800b000 <_printf_float+0x1f8>
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	4642      	mov	r2, r8
 800aff4:	4631      	mov	r1, r6
 800aff6:	4628      	mov	r0, r5
 800aff8:	47b8      	blx	r7
 800affa:	3001      	adds	r0, #1
 800affc:	d12c      	bne.n	800b058 <_printf_float+0x250>
 800affe:	e764      	b.n	800aeca <_printf_float+0xc2>
 800b000:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b004:	f240 80e0 	bls.w	800b1c8 <_printf_float+0x3c0>
 800b008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b00c:	2200      	movs	r2, #0
 800b00e:	2300      	movs	r3, #0
 800b010:	f7f5 fd7a 	bl	8000b08 <__aeabi_dcmpeq>
 800b014:	2800      	cmp	r0, #0
 800b016:	d034      	beq.n	800b082 <_printf_float+0x27a>
 800b018:	4a37      	ldr	r2, [pc, #220]	; (800b0f8 <_printf_float+0x2f0>)
 800b01a:	2301      	movs	r3, #1
 800b01c:	4631      	mov	r1, r6
 800b01e:	4628      	mov	r0, r5
 800b020:	47b8      	blx	r7
 800b022:	3001      	adds	r0, #1
 800b024:	f43f af51 	beq.w	800aeca <_printf_float+0xc2>
 800b028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b02c:	429a      	cmp	r2, r3
 800b02e:	db02      	blt.n	800b036 <_printf_float+0x22e>
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	07d8      	lsls	r0, r3, #31
 800b034:	d510      	bpl.n	800b058 <_printf_float+0x250>
 800b036:	ee18 3a10 	vmov	r3, s16
 800b03a:	4652      	mov	r2, sl
 800b03c:	4631      	mov	r1, r6
 800b03e:	4628      	mov	r0, r5
 800b040:	47b8      	blx	r7
 800b042:	3001      	adds	r0, #1
 800b044:	f43f af41 	beq.w	800aeca <_printf_float+0xc2>
 800b048:	f04f 0800 	mov.w	r8, #0
 800b04c:	f104 091a 	add.w	r9, r4, #26
 800b050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b052:	3b01      	subs	r3, #1
 800b054:	4543      	cmp	r3, r8
 800b056:	dc09      	bgt.n	800b06c <_printf_float+0x264>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	079b      	lsls	r3, r3, #30
 800b05c:	f100 8105 	bmi.w	800b26a <_printf_float+0x462>
 800b060:	68e0      	ldr	r0, [r4, #12]
 800b062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b064:	4298      	cmp	r0, r3
 800b066:	bfb8      	it	lt
 800b068:	4618      	movlt	r0, r3
 800b06a:	e730      	b.n	800aece <_printf_float+0xc6>
 800b06c:	2301      	movs	r3, #1
 800b06e:	464a      	mov	r2, r9
 800b070:	4631      	mov	r1, r6
 800b072:	4628      	mov	r0, r5
 800b074:	47b8      	blx	r7
 800b076:	3001      	adds	r0, #1
 800b078:	f43f af27 	beq.w	800aeca <_printf_float+0xc2>
 800b07c:	f108 0801 	add.w	r8, r8, #1
 800b080:	e7e6      	b.n	800b050 <_printf_float+0x248>
 800b082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b084:	2b00      	cmp	r3, #0
 800b086:	dc39      	bgt.n	800b0fc <_printf_float+0x2f4>
 800b088:	4a1b      	ldr	r2, [pc, #108]	; (800b0f8 <_printf_float+0x2f0>)
 800b08a:	2301      	movs	r3, #1
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	47b8      	blx	r7
 800b092:	3001      	adds	r0, #1
 800b094:	f43f af19 	beq.w	800aeca <_printf_float+0xc2>
 800b098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b09c:	4313      	orrs	r3, r2
 800b09e:	d102      	bne.n	800b0a6 <_printf_float+0x29e>
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	07d9      	lsls	r1, r3, #31
 800b0a4:	d5d8      	bpl.n	800b058 <_printf_float+0x250>
 800b0a6:	ee18 3a10 	vmov	r3, s16
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f43f af09 	beq.w	800aeca <_printf_float+0xc2>
 800b0b8:	f04f 0900 	mov.w	r9, #0
 800b0bc:	f104 0a1a 	add.w	sl, r4, #26
 800b0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c2:	425b      	negs	r3, r3
 800b0c4:	454b      	cmp	r3, r9
 800b0c6:	dc01      	bgt.n	800b0cc <_printf_float+0x2c4>
 800b0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ca:	e792      	b.n	800aff2 <_printf_float+0x1ea>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	4652      	mov	r2, sl
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	47b8      	blx	r7
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	f43f aef7 	beq.w	800aeca <_printf_float+0xc2>
 800b0dc:	f109 0901 	add.w	r9, r9, #1
 800b0e0:	e7ee      	b.n	800b0c0 <_printf_float+0x2b8>
 800b0e2:	bf00      	nop
 800b0e4:	7fefffff 	.word	0x7fefffff
 800b0e8:	0800f63c 	.word	0x0800f63c
 800b0ec:	0800f640 	.word	0x0800f640
 800b0f0:	0800f648 	.word	0x0800f648
 800b0f4:	0800f644 	.word	0x0800f644
 800b0f8:	0800f64c 	.word	0x0800f64c
 800b0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b100:	429a      	cmp	r2, r3
 800b102:	bfa8      	it	ge
 800b104:	461a      	movge	r2, r3
 800b106:	2a00      	cmp	r2, #0
 800b108:	4691      	mov	r9, r2
 800b10a:	dc37      	bgt.n	800b17c <_printf_float+0x374>
 800b10c:	f04f 0b00 	mov.w	fp, #0
 800b110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b114:	f104 021a 	add.w	r2, r4, #26
 800b118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	eba3 0309 	sub.w	r3, r3, r9
 800b120:	455b      	cmp	r3, fp
 800b122:	dc33      	bgt.n	800b18c <_printf_float+0x384>
 800b124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b128:	429a      	cmp	r2, r3
 800b12a:	db3b      	blt.n	800b1a4 <_printf_float+0x39c>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	07da      	lsls	r2, r3, #31
 800b130:	d438      	bmi.n	800b1a4 <_printf_float+0x39c>
 800b132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b134:	9a05      	ldr	r2, [sp, #20]
 800b136:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b138:	1a9a      	subs	r2, r3, r2
 800b13a:	eba3 0901 	sub.w	r9, r3, r1
 800b13e:	4591      	cmp	r9, r2
 800b140:	bfa8      	it	ge
 800b142:	4691      	movge	r9, r2
 800b144:	f1b9 0f00 	cmp.w	r9, #0
 800b148:	dc35      	bgt.n	800b1b6 <_printf_float+0x3ae>
 800b14a:	f04f 0800 	mov.w	r8, #0
 800b14e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b152:	f104 0a1a 	add.w	sl, r4, #26
 800b156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	eba3 0309 	sub.w	r3, r3, r9
 800b160:	4543      	cmp	r3, r8
 800b162:	f77f af79 	ble.w	800b058 <_printf_float+0x250>
 800b166:	2301      	movs	r3, #1
 800b168:	4652      	mov	r2, sl
 800b16a:	4631      	mov	r1, r6
 800b16c:	4628      	mov	r0, r5
 800b16e:	47b8      	blx	r7
 800b170:	3001      	adds	r0, #1
 800b172:	f43f aeaa 	beq.w	800aeca <_printf_float+0xc2>
 800b176:	f108 0801 	add.w	r8, r8, #1
 800b17a:	e7ec      	b.n	800b156 <_printf_float+0x34e>
 800b17c:	4613      	mov	r3, r2
 800b17e:	4631      	mov	r1, r6
 800b180:	4642      	mov	r2, r8
 800b182:	4628      	mov	r0, r5
 800b184:	47b8      	blx	r7
 800b186:	3001      	adds	r0, #1
 800b188:	d1c0      	bne.n	800b10c <_printf_float+0x304>
 800b18a:	e69e      	b.n	800aeca <_printf_float+0xc2>
 800b18c:	2301      	movs	r3, #1
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	9205      	str	r2, [sp, #20]
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	f43f ae97 	beq.w	800aeca <_printf_float+0xc2>
 800b19c:	9a05      	ldr	r2, [sp, #20]
 800b19e:	f10b 0b01 	add.w	fp, fp, #1
 800b1a2:	e7b9      	b.n	800b118 <_printf_float+0x310>
 800b1a4:	ee18 3a10 	vmov	r3, s16
 800b1a8:	4652      	mov	r2, sl
 800b1aa:	4631      	mov	r1, r6
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	47b8      	blx	r7
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d1be      	bne.n	800b132 <_printf_float+0x32a>
 800b1b4:	e689      	b.n	800aeca <_printf_float+0xc2>
 800b1b6:	9a05      	ldr	r2, [sp, #20]
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	4442      	add	r2, r8
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b8      	blx	r7
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d1c1      	bne.n	800b14a <_printf_float+0x342>
 800b1c6:	e680      	b.n	800aeca <_printf_float+0xc2>
 800b1c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ca:	2a01      	cmp	r2, #1
 800b1cc:	dc01      	bgt.n	800b1d2 <_printf_float+0x3ca>
 800b1ce:	07db      	lsls	r3, r3, #31
 800b1d0:	d538      	bpl.n	800b244 <_printf_float+0x43c>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b8      	blx	r7
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f43f ae74 	beq.w	800aeca <_printf_float+0xc2>
 800b1e2:	ee18 3a10 	vmov	r3, s16
 800b1e6:	4652      	mov	r2, sl
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b8      	blx	r7
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	f43f ae6b 	beq.w	800aeca <_printf_float+0xc2>
 800b1f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f7f5 fc84 	bl	8000b08 <__aeabi_dcmpeq>
 800b200:	b9d8      	cbnz	r0, 800b23a <_printf_float+0x432>
 800b202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b204:	f108 0201 	add.w	r2, r8, #1
 800b208:	3b01      	subs	r3, #1
 800b20a:	4631      	mov	r1, r6
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b8      	blx	r7
 800b210:	3001      	adds	r0, #1
 800b212:	d10e      	bne.n	800b232 <_printf_float+0x42a>
 800b214:	e659      	b.n	800aeca <_printf_float+0xc2>
 800b216:	2301      	movs	r3, #1
 800b218:	4652      	mov	r2, sl
 800b21a:	4631      	mov	r1, r6
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b8      	blx	r7
 800b220:	3001      	adds	r0, #1
 800b222:	f43f ae52 	beq.w	800aeca <_printf_float+0xc2>
 800b226:	f108 0801 	add.w	r8, r8, #1
 800b22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b22c:	3b01      	subs	r3, #1
 800b22e:	4543      	cmp	r3, r8
 800b230:	dcf1      	bgt.n	800b216 <_printf_float+0x40e>
 800b232:	464b      	mov	r3, r9
 800b234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b238:	e6dc      	b.n	800aff4 <_printf_float+0x1ec>
 800b23a:	f04f 0800 	mov.w	r8, #0
 800b23e:	f104 0a1a 	add.w	sl, r4, #26
 800b242:	e7f2      	b.n	800b22a <_printf_float+0x422>
 800b244:	2301      	movs	r3, #1
 800b246:	4642      	mov	r2, r8
 800b248:	e7df      	b.n	800b20a <_printf_float+0x402>
 800b24a:	2301      	movs	r3, #1
 800b24c:	464a      	mov	r2, r9
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	f43f ae38 	beq.w	800aeca <_printf_float+0xc2>
 800b25a:	f108 0801 	add.w	r8, r8, #1
 800b25e:	68e3      	ldr	r3, [r4, #12]
 800b260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b262:	1a5b      	subs	r3, r3, r1
 800b264:	4543      	cmp	r3, r8
 800b266:	dcf0      	bgt.n	800b24a <_printf_float+0x442>
 800b268:	e6fa      	b.n	800b060 <_printf_float+0x258>
 800b26a:	f04f 0800 	mov.w	r8, #0
 800b26e:	f104 0919 	add.w	r9, r4, #25
 800b272:	e7f4      	b.n	800b25e <_printf_float+0x456>

0800b274 <_printf_common>:
 800b274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	4616      	mov	r6, r2
 800b27a:	4699      	mov	r9, r3
 800b27c:	688a      	ldr	r2, [r1, #8]
 800b27e:	690b      	ldr	r3, [r1, #16]
 800b280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b284:	4293      	cmp	r3, r2
 800b286:	bfb8      	it	lt
 800b288:	4613      	movlt	r3, r2
 800b28a:	6033      	str	r3, [r6, #0]
 800b28c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b290:	4607      	mov	r7, r0
 800b292:	460c      	mov	r4, r1
 800b294:	b10a      	cbz	r2, 800b29a <_printf_common+0x26>
 800b296:	3301      	adds	r3, #1
 800b298:	6033      	str	r3, [r6, #0]
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	0699      	lsls	r1, r3, #26
 800b29e:	bf42      	ittt	mi
 800b2a0:	6833      	ldrmi	r3, [r6, #0]
 800b2a2:	3302      	addmi	r3, #2
 800b2a4:	6033      	strmi	r3, [r6, #0]
 800b2a6:	6825      	ldr	r5, [r4, #0]
 800b2a8:	f015 0506 	ands.w	r5, r5, #6
 800b2ac:	d106      	bne.n	800b2bc <_printf_common+0x48>
 800b2ae:	f104 0a19 	add.w	sl, r4, #25
 800b2b2:	68e3      	ldr	r3, [r4, #12]
 800b2b4:	6832      	ldr	r2, [r6, #0]
 800b2b6:	1a9b      	subs	r3, r3, r2
 800b2b8:	42ab      	cmp	r3, r5
 800b2ba:	dc26      	bgt.n	800b30a <_printf_common+0x96>
 800b2bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2c0:	1e13      	subs	r3, r2, #0
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	bf18      	it	ne
 800b2c6:	2301      	movne	r3, #1
 800b2c8:	0692      	lsls	r2, r2, #26
 800b2ca:	d42b      	bmi.n	800b324 <_printf_common+0xb0>
 800b2cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	47c0      	blx	r8
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d01e      	beq.n	800b318 <_printf_common+0xa4>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	68e5      	ldr	r5, [r4, #12]
 800b2de:	6832      	ldr	r2, [r6, #0]
 800b2e0:	f003 0306 	and.w	r3, r3, #6
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	bf08      	it	eq
 800b2e8:	1aad      	subeq	r5, r5, r2
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	6922      	ldr	r2, [r4, #16]
 800b2ee:	bf0c      	ite	eq
 800b2f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2f4:	2500      	movne	r5, #0
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	bfc4      	itt	gt
 800b2fa:	1a9b      	subgt	r3, r3, r2
 800b2fc:	18ed      	addgt	r5, r5, r3
 800b2fe:	2600      	movs	r6, #0
 800b300:	341a      	adds	r4, #26
 800b302:	42b5      	cmp	r5, r6
 800b304:	d11a      	bne.n	800b33c <_printf_common+0xc8>
 800b306:	2000      	movs	r0, #0
 800b308:	e008      	b.n	800b31c <_printf_common+0xa8>
 800b30a:	2301      	movs	r3, #1
 800b30c:	4652      	mov	r2, sl
 800b30e:	4649      	mov	r1, r9
 800b310:	4638      	mov	r0, r7
 800b312:	47c0      	blx	r8
 800b314:	3001      	adds	r0, #1
 800b316:	d103      	bne.n	800b320 <_printf_common+0xac>
 800b318:	f04f 30ff 	mov.w	r0, #4294967295
 800b31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b320:	3501      	adds	r5, #1
 800b322:	e7c6      	b.n	800b2b2 <_printf_common+0x3e>
 800b324:	18e1      	adds	r1, r4, r3
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	2030      	movs	r0, #48	; 0x30
 800b32a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b32e:	4422      	add	r2, r4
 800b330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b338:	3302      	adds	r3, #2
 800b33a:	e7c7      	b.n	800b2cc <_printf_common+0x58>
 800b33c:	2301      	movs	r3, #1
 800b33e:	4622      	mov	r2, r4
 800b340:	4649      	mov	r1, r9
 800b342:	4638      	mov	r0, r7
 800b344:	47c0      	blx	r8
 800b346:	3001      	adds	r0, #1
 800b348:	d0e6      	beq.n	800b318 <_printf_common+0xa4>
 800b34a:	3601      	adds	r6, #1
 800b34c:	e7d9      	b.n	800b302 <_printf_common+0x8e>
	...

0800b350 <_printf_i>:
 800b350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b354:	7e0f      	ldrb	r7, [r1, #24]
 800b356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b358:	2f78      	cmp	r7, #120	; 0x78
 800b35a:	4691      	mov	r9, r2
 800b35c:	4680      	mov	r8, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	469a      	mov	sl, r3
 800b362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b366:	d807      	bhi.n	800b378 <_printf_i+0x28>
 800b368:	2f62      	cmp	r7, #98	; 0x62
 800b36a:	d80a      	bhi.n	800b382 <_printf_i+0x32>
 800b36c:	2f00      	cmp	r7, #0
 800b36e:	f000 80d8 	beq.w	800b522 <_printf_i+0x1d2>
 800b372:	2f58      	cmp	r7, #88	; 0x58
 800b374:	f000 80a3 	beq.w	800b4be <_printf_i+0x16e>
 800b378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b37c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b380:	e03a      	b.n	800b3f8 <_printf_i+0xa8>
 800b382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b386:	2b15      	cmp	r3, #21
 800b388:	d8f6      	bhi.n	800b378 <_printf_i+0x28>
 800b38a:	a101      	add	r1, pc, #4	; (adr r1, 800b390 <_printf_i+0x40>)
 800b38c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b390:	0800b3e9 	.word	0x0800b3e9
 800b394:	0800b3fd 	.word	0x0800b3fd
 800b398:	0800b379 	.word	0x0800b379
 800b39c:	0800b379 	.word	0x0800b379
 800b3a0:	0800b379 	.word	0x0800b379
 800b3a4:	0800b379 	.word	0x0800b379
 800b3a8:	0800b3fd 	.word	0x0800b3fd
 800b3ac:	0800b379 	.word	0x0800b379
 800b3b0:	0800b379 	.word	0x0800b379
 800b3b4:	0800b379 	.word	0x0800b379
 800b3b8:	0800b379 	.word	0x0800b379
 800b3bc:	0800b509 	.word	0x0800b509
 800b3c0:	0800b42d 	.word	0x0800b42d
 800b3c4:	0800b4eb 	.word	0x0800b4eb
 800b3c8:	0800b379 	.word	0x0800b379
 800b3cc:	0800b379 	.word	0x0800b379
 800b3d0:	0800b52b 	.word	0x0800b52b
 800b3d4:	0800b379 	.word	0x0800b379
 800b3d8:	0800b42d 	.word	0x0800b42d
 800b3dc:	0800b379 	.word	0x0800b379
 800b3e0:	0800b379 	.word	0x0800b379
 800b3e4:	0800b4f3 	.word	0x0800b4f3
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	1d1a      	adds	r2, r3, #4
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e0a3      	b.n	800b544 <_printf_i+0x1f4>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	6829      	ldr	r1, [r5, #0]
 800b400:	0606      	lsls	r6, r0, #24
 800b402:	f101 0304 	add.w	r3, r1, #4
 800b406:	d50a      	bpl.n	800b41e <_printf_i+0xce>
 800b408:	680e      	ldr	r6, [r1, #0]
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	2e00      	cmp	r6, #0
 800b40e:	da03      	bge.n	800b418 <_printf_i+0xc8>
 800b410:	232d      	movs	r3, #45	; 0x2d
 800b412:	4276      	negs	r6, r6
 800b414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b418:	485e      	ldr	r0, [pc, #376]	; (800b594 <_printf_i+0x244>)
 800b41a:	230a      	movs	r3, #10
 800b41c:	e019      	b.n	800b452 <_printf_i+0x102>
 800b41e:	680e      	ldr	r6, [r1, #0]
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b426:	bf18      	it	ne
 800b428:	b236      	sxthne	r6, r6
 800b42a:	e7ef      	b.n	800b40c <_printf_i+0xbc>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	6820      	ldr	r0, [r4, #0]
 800b430:	1d19      	adds	r1, r3, #4
 800b432:	6029      	str	r1, [r5, #0]
 800b434:	0601      	lsls	r1, r0, #24
 800b436:	d501      	bpl.n	800b43c <_printf_i+0xec>
 800b438:	681e      	ldr	r6, [r3, #0]
 800b43a:	e002      	b.n	800b442 <_printf_i+0xf2>
 800b43c:	0646      	lsls	r6, r0, #25
 800b43e:	d5fb      	bpl.n	800b438 <_printf_i+0xe8>
 800b440:	881e      	ldrh	r6, [r3, #0]
 800b442:	4854      	ldr	r0, [pc, #336]	; (800b594 <_printf_i+0x244>)
 800b444:	2f6f      	cmp	r7, #111	; 0x6f
 800b446:	bf0c      	ite	eq
 800b448:	2308      	moveq	r3, #8
 800b44a:	230a      	movne	r3, #10
 800b44c:	2100      	movs	r1, #0
 800b44e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b452:	6865      	ldr	r5, [r4, #4]
 800b454:	60a5      	str	r5, [r4, #8]
 800b456:	2d00      	cmp	r5, #0
 800b458:	bfa2      	ittt	ge
 800b45a:	6821      	ldrge	r1, [r4, #0]
 800b45c:	f021 0104 	bicge.w	r1, r1, #4
 800b460:	6021      	strge	r1, [r4, #0]
 800b462:	b90e      	cbnz	r6, 800b468 <_printf_i+0x118>
 800b464:	2d00      	cmp	r5, #0
 800b466:	d04d      	beq.n	800b504 <_printf_i+0x1b4>
 800b468:	4615      	mov	r5, r2
 800b46a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b46e:	fb03 6711 	mls	r7, r3, r1, r6
 800b472:	5dc7      	ldrb	r7, [r0, r7]
 800b474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b478:	4637      	mov	r7, r6
 800b47a:	42bb      	cmp	r3, r7
 800b47c:	460e      	mov	r6, r1
 800b47e:	d9f4      	bls.n	800b46a <_printf_i+0x11a>
 800b480:	2b08      	cmp	r3, #8
 800b482:	d10b      	bne.n	800b49c <_printf_i+0x14c>
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	07de      	lsls	r6, r3, #31
 800b488:	d508      	bpl.n	800b49c <_printf_i+0x14c>
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	6861      	ldr	r1, [r4, #4]
 800b48e:	4299      	cmp	r1, r3
 800b490:	bfde      	ittt	le
 800b492:	2330      	movle	r3, #48	; 0x30
 800b494:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b49c:	1b52      	subs	r2, r2, r5
 800b49e:	6122      	str	r2, [r4, #16]
 800b4a0:	f8cd a000 	str.w	sl, [sp]
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	aa03      	add	r2, sp, #12
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	f7ff fee2 	bl	800b274 <_printf_common>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d14c      	bne.n	800b54e <_printf_i+0x1fe>
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	b004      	add	sp, #16
 800b4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4be:	4835      	ldr	r0, [pc, #212]	; (800b594 <_printf_i+0x244>)
 800b4c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4c4:	6829      	ldr	r1, [r5, #0]
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4cc:	6029      	str	r1, [r5, #0]
 800b4ce:	061d      	lsls	r5, r3, #24
 800b4d0:	d514      	bpl.n	800b4fc <_printf_i+0x1ac>
 800b4d2:	07df      	lsls	r7, r3, #31
 800b4d4:	bf44      	itt	mi
 800b4d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b4da:	6023      	strmi	r3, [r4, #0]
 800b4dc:	b91e      	cbnz	r6, 800b4e6 <_printf_i+0x196>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f023 0320 	bic.w	r3, r3, #32
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	2310      	movs	r3, #16
 800b4e8:	e7b0      	b.n	800b44c <_printf_i+0xfc>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	f043 0320 	orr.w	r3, r3, #32
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	2378      	movs	r3, #120	; 0x78
 800b4f4:	4828      	ldr	r0, [pc, #160]	; (800b598 <_printf_i+0x248>)
 800b4f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4fa:	e7e3      	b.n	800b4c4 <_printf_i+0x174>
 800b4fc:	0659      	lsls	r1, r3, #25
 800b4fe:	bf48      	it	mi
 800b500:	b2b6      	uxthmi	r6, r6
 800b502:	e7e6      	b.n	800b4d2 <_printf_i+0x182>
 800b504:	4615      	mov	r5, r2
 800b506:	e7bb      	b.n	800b480 <_printf_i+0x130>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	6826      	ldr	r6, [r4, #0]
 800b50c:	6961      	ldr	r1, [r4, #20]
 800b50e:	1d18      	adds	r0, r3, #4
 800b510:	6028      	str	r0, [r5, #0]
 800b512:	0635      	lsls	r5, r6, #24
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	d501      	bpl.n	800b51c <_printf_i+0x1cc>
 800b518:	6019      	str	r1, [r3, #0]
 800b51a:	e002      	b.n	800b522 <_printf_i+0x1d2>
 800b51c:	0670      	lsls	r0, r6, #25
 800b51e:	d5fb      	bpl.n	800b518 <_printf_i+0x1c8>
 800b520:	8019      	strh	r1, [r3, #0]
 800b522:	2300      	movs	r3, #0
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	4615      	mov	r5, r2
 800b528:	e7ba      	b.n	800b4a0 <_printf_i+0x150>
 800b52a:	682b      	ldr	r3, [r5, #0]
 800b52c:	1d1a      	adds	r2, r3, #4
 800b52e:	602a      	str	r2, [r5, #0]
 800b530:	681d      	ldr	r5, [r3, #0]
 800b532:	6862      	ldr	r2, [r4, #4]
 800b534:	2100      	movs	r1, #0
 800b536:	4628      	mov	r0, r5
 800b538:	f7f4 fe72 	bl	8000220 <memchr>
 800b53c:	b108      	cbz	r0, 800b542 <_printf_i+0x1f2>
 800b53e:	1b40      	subs	r0, r0, r5
 800b540:	6060      	str	r0, [r4, #4]
 800b542:	6863      	ldr	r3, [r4, #4]
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	2300      	movs	r3, #0
 800b548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b54c:	e7a8      	b.n	800b4a0 <_printf_i+0x150>
 800b54e:	6923      	ldr	r3, [r4, #16]
 800b550:	462a      	mov	r2, r5
 800b552:	4649      	mov	r1, r9
 800b554:	4640      	mov	r0, r8
 800b556:	47d0      	blx	sl
 800b558:	3001      	adds	r0, #1
 800b55a:	d0ab      	beq.n	800b4b4 <_printf_i+0x164>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	079b      	lsls	r3, r3, #30
 800b560:	d413      	bmi.n	800b58a <_printf_i+0x23a>
 800b562:	68e0      	ldr	r0, [r4, #12]
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	4298      	cmp	r0, r3
 800b568:	bfb8      	it	lt
 800b56a:	4618      	movlt	r0, r3
 800b56c:	e7a4      	b.n	800b4b8 <_printf_i+0x168>
 800b56e:	2301      	movs	r3, #1
 800b570:	4632      	mov	r2, r6
 800b572:	4649      	mov	r1, r9
 800b574:	4640      	mov	r0, r8
 800b576:	47d0      	blx	sl
 800b578:	3001      	adds	r0, #1
 800b57a:	d09b      	beq.n	800b4b4 <_printf_i+0x164>
 800b57c:	3501      	adds	r5, #1
 800b57e:	68e3      	ldr	r3, [r4, #12]
 800b580:	9903      	ldr	r1, [sp, #12]
 800b582:	1a5b      	subs	r3, r3, r1
 800b584:	42ab      	cmp	r3, r5
 800b586:	dcf2      	bgt.n	800b56e <_printf_i+0x21e>
 800b588:	e7eb      	b.n	800b562 <_printf_i+0x212>
 800b58a:	2500      	movs	r5, #0
 800b58c:	f104 0619 	add.w	r6, r4, #25
 800b590:	e7f5      	b.n	800b57e <_printf_i+0x22e>
 800b592:	bf00      	nop
 800b594:	0800f64e 	.word	0x0800f64e
 800b598:	0800f65f 	.word	0x0800f65f

0800b59c <_scanf_float>:
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	b087      	sub	sp, #28
 800b5a2:	4617      	mov	r7, r2
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	688b      	ldr	r3, [r1, #8]
 800b5a8:	1e5a      	subs	r2, r3, #1
 800b5aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5ae:	bf83      	ittte	hi
 800b5b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5b4:	195b      	addhi	r3, r3, r5
 800b5b6:	9302      	strhi	r3, [sp, #8]
 800b5b8:	2300      	movls	r3, #0
 800b5ba:	bf86      	itte	hi
 800b5bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5c0:	608b      	strhi	r3, [r1, #8]
 800b5c2:	9302      	strls	r3, [sp, #8]
 800b5c4:	680b      	ldr	r3, [r1, #0]
 800b5c6:	468b      	mov	fp, r1
 800b5c8:	2500      	movs	r5, #0
 800b5ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5ce:	f84b 3b1c 	str.w	r3, [fp], #28
 800b5d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	460c      	mov	r4, r1
 800b5da:	465e      	mov	r6, fp
 800b5dc:	46aa      	mov	sl, r5
 800b5de:	46a9      	mov	r9, r5
 800b5e0:	9501      	str	r5, [sp, #4]
 800b5e2:	68a2      	ldr	r2, [r4, #8]
 800b5e4:	b152      	cbz	r2, 800b5fc <_scanf_float+0x60>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	2b4e      	cmp	r3, #78	; 0x4e
 800b5ec:	d864      	bhi.n	800b6b8 <_scanf_float+0x11c>
 800b5ee:	2b40      	cmp	r3, #64	; 0x40
 800b5f0:	d83c      	bhi.n	800b66c <_scanf_float+0xd0>
 800b5f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b5f6:	b2c8      	uxtb	r0, r1
 800b5f8:	280e      	cmp	r0, #14
 800b5fa:	d93a      	bls.n	800b672 <_scanf_float+0xd6>
 800b5fc:	f1b9 0f00 	cmp.w	r9, #0
 800b600:	d003      	beq.n	800b60a <_scanf_float+0x6e>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b60e:	f1ba 0f01 	cmp.w	sl, #1
 800b612:	f200 8113 	bhi.w	800b83c <_scanf_float+0x2a0>
 800b616:	455e      	cmp	r6, fp
 800b618:	f200 8105 	bhi.w	800b826 <_scanf_float+0x28a>
 800b61c:	2501      	movs	r5, #1
 800b61e:	4628      	mov	r0, r5
 800b620:	b007      	add	sp, #28
 800b622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b626:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b62a:	2a0d      	cmp	r2, #13
 800b62c:	d8e6      	bhi.n	800b5fc <_scanf_float+0x60>
 800b62e:	a101      	add	r1, pc, #4	; (adr r1, 800b634 <_scanf_float+0x98>)
 800b630:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b634:	0800b773 	.word	0x0800b773
 800b638:	0800b5fd 	.word	0x0800b5fd
 800b63c:	0800b5fd 	.word	0x0800b5fd
 800b640:	0800b5fd 	.word	0x0800b5fd
 800b644:	0800b7d3 	.word	0x0800b7d3
 800b648:	0800b7ab 	.word	0x0800b7ab
 800b64c:	0800b5fd 	.word	0x0800b5fd
 800b650:	0800b5fd 	.word	0x0800b5fd
 800b654:	0800b781 	.word	0x0800b781
 800b658:	0800b5fd 	.word	0x0800b5fd
 800b65c:	0800b5fd 	.word	0x0800b5fd
 800b660:	0800b5fd 	.word	0x0800b5fd
 800b664:	0800b5fd 	.word	0x0800b5fd
 800b668:	0800b739 	.word	0x0800b739
 800b66c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b670:	e7db      	b.n	800b62a <_scanf_float+0x8e>
 800b672:	290e      	cmp	r1, #14
 800b674:	d8c2      	bhi.n	800b5fc <_scanf_float+0x60>
 800b676:	a001      	add	r0, pc, #4	; (adr r0, 800b67c <_scanf_float+0xe0>)
 800b678:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b67c:	0800b72b 	.word	0x0800b72b
 800b680:	0800b5fd 	.word	0x0800b5fd
 800b684:	0800b72b 	.word	0x0800b72b
 800b688:	0800b7bf 	.word	0x0800b7bf
 800b68c:	0800b5fd 	.word	0x0800b5fd
 800b690:	0800b6d9 	.word	0x0800b6d9
 800b694:	0800b715 	.word	0x0800b715
 800b698:	0800b715 	.word	0x0800b715
 800b69c:	0800b715 	.word	0x0800b715
 800b6a0:	0800b715 	.word	0x0800b715
 800b6a4:	0800b715 	.word	0x0800b715
 800b6a8:	0800b715 	.word	0x0800b715
 800b6ac:	0800b715 	.word	0x0800b715
 800b6b0:	0800b715 	.word	0x0800b715
 800b6b4:	0800b715 	.word	0x0800b715
 800b6b8:	2b6e      	cmp	r3, #110	; 0x6e
 800b6ba:	d809      	bhi.n	800b6d0 <_scanf_float+0x134>
 800b6bc:	2b60      	cmp	r3, #96	; 0x60
 800b6be:	d8b2      	bhi.n	800b626 <_scanf_float+0x8a>
 800b6c0:	2b54      	cmp	r3, #84	; 0x54
 800b6c2:	d077      	beq.n	800b7b4 <_scanf_float+0x218>
 800b6c4:	2b59      	cmp	r3, #89	; 0x59
 800b6c6:	d199      	bne.n	800b5fc <_scanf_float+0x60>
 800b6c8:	2d07      	cmp	r5, #7
 800b6ca:	d197      	bne.n	800b5fc <_scanf_float+0x60>
 800b6cc:	2508      	movs	r5, #8
 800b6ce:	e029      	b.n	800b724 <_scanf_float+0x188>
 800b6d0:	2b74      	cmp	r3, #116	; 0x74
 800b6d2:	d06f      	beq.n	800b7b4 <_scanf_float+0x218>
 800b6d4:	2b79      	cmp	r3, #121	; 0x79
 800b6d6:	e7f6      	b.n	800b6c6 <_scanf_float+0x12a>
 800b6d8:	6821      	ldr	r1, [r4, #0]
 800b6da:	05c8      	lsls	r0, r1, #23
 800b6dc:	d51a      	bpl.n	800b714 <_scanf_float+0x178>
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b6e4:	6021      	str	r1, [r4, #0]
 800b6e6:	f109 0901 	add.w	r9, r9, #1
 800b6ea:	b11b      	cbz	r3, 800b6f4 <_scanf_float+0x158>
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	3201      	adds	r2, #1
 800b6f0:	9302      	str	r3, [sp, #8]
 800b6f2:	60a2      	str	r2, [r4, #8]
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3b01      	subs	r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	607b      	str	r3, [r7, #4]
 800b708:	f340 8084 	ble.w	800b814 <_scanf_float+0x278>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	3301      	adds	r3, #1
 800b710:	603b      	str	r3, [r7, #0]
 800b712:	e766      	b.n	800b5e2 <_scanf_float+0x46>
 800b714:	eb1a 0f05 	cmn.w	sl, r5
 800b718:	f47f af70 	bne.w	800b5fc <_scanf_float+0x60>
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b722:	6022      	str	r2, [r4, #0]
 800b724:	f806 3b01 	strb.w	r3, [r6], #1
 800b728:	e7e4      	b.n	800b6f4 <_scanf_float+0x158>
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	0610      	lsls	r0, r2, #24
 800b72e:	f57f af65 	bpl.w	800b5fc <_scanf_float+0x60>
 800b732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b736:	e7f4      	b.n	800b722 <_scanf_float+0x186>
 800b738:	f1ba 0f00 	cmp.w	sl, #0
 800b73c:	d10e      	bne.n	800b75c <_scanf_float+0x1c0>
 800b73e:	f1b9 0f00 	cmp.w	r9, #0
 800b742:	d10e      	bne.n	800b762 <_scanf_float+0x1c6>
 800b744:	6822      	ldr	r2, [r4, #0]
 800b746:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b74a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b74e:	d108      	bne.n	800b762 <_scanf_float+0x1c6>
 800b750:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b754:	6022      	str	r2, [r4, #0]
 800b756:	f04f 0a01 	mov.w	sl, #1
 800b75a:	e7e3      	b.n	800b724 <_scanf_float+0x188>
 800b75c:	f1ba 0f02 	cmp.w	sl, #2
 800b760:	d055      	beq.n	800b80e <_scanf_float+0x272>
 800b762:	2d01      	cmp	r5, #1
 800b764:	d002      	beq.n	800b76c <_scanf_float+0x1d0>
 800b766:	2d04      	cmp	r5, #4
 800b768:	f47f af48 	bne.w	800b5fc <_scanf_float+0x60>
 800b76c:	3501      	adds	r5, #1
 800b76e:	b2ed      	uxtb	r5, r5
 800b770:	e7d8      	b.n	800b724 <_scanf_float+0x188>
 800b772:	f1ba 0f01 	cmp.w	sl, #1
 800b776:	f47f af41 	bne.w	800b5fc <_scanf_float+0x60>
 800b77a:	f04f 0a02 	mov.w	sl, #2
 800b77e:	e7d1      	b.n	800b724 <_scanf_float+0x188>
 800b780:	b97d      	cbnz	r5, 800b7a2 <_scanf_float+0x206>
 800b782:	f1b9 0f00 	cmp.w	r9, #0
 800b786:	f47f af3c 	bne.w	800b602 <_scanf_float+0x66>
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b790:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b794:	f47f af39 	bne.w	800b60a <_scanf_float+0x6e>
 800b798:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b79c:	6022      	str	r2, [r4, #0]
 800b79e:	2501      	movs	r5, #1
 800b7a0:	e7c0      	b.n	800b724 <_scanf_float+0x188>
 800b7a2:	2d03      	cmp	r5, #3
 800b7a4:	d0e2      	beq.n	800b76c <_scanf_float+0x1d0>
 800b7a6:	2d05      	cmp	r5, #5
 800b7a8:	e7de      	b.n	800b768 <_scanf_float+0x1cc>
 800b7aa:	2d02      	cmp	r5, #2
 800b7ac:	f47f af26 	bne.w	800b5fc <_scanf_float+0x60>
 800b7b0:	2503      	movs	r5, #3
 800b7b2:	e7b7      	b.n	800b724 <_scanf_float+0x188>
 800b7b4:	2d06      	cmp	r5, #6
 800b7b6:	f47f af21 	bne.w	800b5fc <_scanf_float+0x60>
 800b7ba:	2507      	movs	r5, #7
 800b7bc:	e7b2      	b.n	800b724 <_scanf_float+0x188>
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	0591      	lsls	r1, r2, #22
 800b7c2:	f57f af1b 	bpl.w	800b5fc <_scanf_float+0x60>
 800b7c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b7ca:	6022      	str	r2, [r4, #0]
 800b7cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7d0:	e7a8      	b.n	800b724 <_scanf_float+0x188>
 800b7d2:	6822      	ldr	r2, [r4, #0]
 800b7d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b7d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b7dc:	d006      	beq.n	800b7ec <_scanf_float+0x250>
 800b7de:	0550      	lsls	r0, r2, #21
 800b7e0:	f57f af0c 	bpl.w	800b5fc <_scanf_float+0x60>
 800b7e4:	f1b9 0f00 	cmp.w	r9, #0
 800b7e8:	f43f af0f 	beq.w	800b60a <_scanf_float+0x6e>
 800b7ec:	0591      	lsls	r1, r2, #22
 800b7ee:	bf58      	it	pl
 800b7f0:	9901      	ldrpl	r1, [sp, #4]
 800b7f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b7f6:	bf58      	it	pl
 800b7f8:	eba9 0101 	subpl.w	r1, r9, r1
 800b7fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b800:	bf58      	it	pl
 800b802:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b806:	6022      	str	r2, [r4, #0]
 800b808:	f04f 0900 	mov.w	r9, #0
 800b80c:	e78a      	b.n	800b724 <_scanf_float+0x188>
 800b80e:	f04f 0a03 	mov.w	sl, #3
 800b812:	e787      	b.n	800b724 <_scanf_float+0x188>
 800b814:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b818:	4639      	mov	r1, r7
 800b81a:	4640      	mov	r0, r8
 800b81c:	4798      	blx	r3
 800b81e:	2800      	cmp	r0, #0
 800b820:	f43f aedf 	beq.w	800b5e2 <_scanf_float+0x46>
 800b824:	e6ea      	b.n	800b5fc <_scanf_float+0x60>
 800b826:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b82a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b82e:	463a      	mov	r2, r7
 800b830:	4640      	mov	r0, r8
 800b832:	4798      	blx	r3
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	3b01      	subs	r3, #1
 800b838:	6123      	str	r3, [r4, #16]
 800b83a:	e6ec      	b.n	800b616 <_scanf_float+0x7a>
 800b83c:	1e6b      	subs	r3, r5, #1
 800b83e:	2b06      	cmp	r3, #6
 800b840:	d825      	bhi.n	800b88e <_scanf_float+0x2f2>
 800b842:	2d02      	cmp	r5, #2
 800b844:	d836      	bhi.n	800b8b4 <_scanf_float+0x318>
 800b846:	455e      	cmp	r6, fp
 800b848:	f67f aee8 	bls.w	800b61c <_scanf_float+0x80>
 800b84c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b850:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b854:	463a      	mov	r2, r7
 800b856:	4640      	mov	r0, r8
 800b858:	4798      	blx	r3
 800b85a:	6923      	ldr	r3, [r4, #16]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	6123      	str	r3, [r4, #16]
 800b860:	e7f1      	b.n	800b846 <_scanf_float+0x2aa>
 800b862:	9802      	ldr	r0, [sp, #8]
 800b864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b868:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b86c:	9002      	str	r0, [sp, #8]
 800b86e:	463a      	mov	r2, r7
 800b870:	4640      	mov	r0, r8
 800b872:	4798      	blx	r3
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	3b01      	subs	r3, #1
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b87e:	fa5f fa8a 	uxtb.w	sl, sl
 800b882:	f1ba 0f02 	cmp.w	sl, #2
 800b886:	d1ec      	bne.n	800b862 <_scanf_float+0x2c6>
 800b888:	3d03      	subs	r5, #3
 800b88a:	b2ed      	uxtb	r5, r5
 800b88c:	1b76      	subs	r6, r6, r5
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	05da      	lsls	r2, r3, #23
 800b892:	d52f      	bpl.n	800b8f4 <_scanf_float+0x358>
 800b894:	055b      	lsls	r3, r3, #21
 800b896:	d510      	bpl.n	800b8ba <_scanf_float+0x31e>
 800b898:	455e      	cmp	r6, fp
 800b89a:	f67f aebf 	bls.w	800b61c <_scanf_float+0x80>
 800b89e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8a6:	463a      	mov	r2, r7
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	4798      	blx	r3
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	e7f1      	b.n	800b898 <_scanf_float+0x2fc>
 800b8b4:	46aa      	mov	sl, r5
 800b8b6:	9602      	str	r6, [sp, #8]
 800b8b8:	e7df      	b.n	800b87a <_scanf_float+0x2de>
 800b8ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	2965      	cmp	r1, #101	; 0x65
 800b8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	d00c      	beq.n	800b8e8 <_scanf_float+0x34c>
 800b8ce:	2945      	cmp	r1, #69	; 0x45
 800b8d0:	d00a      	beq.n	800b8e8 <_scanf_float+0x34c>
 800b8d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8d6:	463a      	mov	r2, r7
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4798      	blx	r3
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	1eb5      	subs	r5, r6, #2
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8ec:	463a      	mov	r2, r7
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	4798      	blx	r3
 800b8f2:	462e      	mov	r6, r5
 800b8f4:	6825      	ldr	r5, [r4, #0]
 800b8f6:	f015 0510 	ands.w	r5, r5, #16
 800b8fa:	d159      	bne.n	800b9b0 <_scanf_float+0x414>
 800b8fc:	7035      	strb	r5, [r6, #0]
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b908:	d11b      	bne.n	800b942 <_scanf_float+0x3a6>
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	454b      	cmp	r3, r9
 800b90e:	eba3 0209 	sub.w	r2, r3, r9
 800b912:	d123      	bne.n	800b95c <_scanf_float+0x3c0>
 800b914:	2200      	movs	r2, #0
 800b916:	4659      	mov	r1, fp
 800b918:	4640      	mov	r0, r8
 800b91a:	f000 fe97 	bl	800c64c <_strtod_r>
 800b91e:	6822      	ldr	r2, [r4, #0]
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	f012 0f02 	tst.w	r2, #2
 800b926:	ec57 6b10 	vmov	r6, r7, d0
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	d021      	beq.n	800b972 <_scanf_float+0x3d6>
 800b92e:	9903      	ldr	r1, [sp, #12]
 800b930:	1d1a      	adds	r2, r3, #4
 800b932:	600a      	str	r2, [r1, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	e9c3 6700 	strd	r6, r7, [r3]
 800b93a:	68e3      	ldr	r3, [r4, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60e3      	str	r3, [r4, #12]
 800b940:	e66d      	b.n	800b61e <_scanf_float+0x82>
 800b942:	9b04      	ldr	r3, [sp, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d0e5      	beq.n	800b914 <_scanf_float+0x378>
 800b948:	9905      	ldr	r1, [sp, #20]
 800b94a:	230a      	movs	r3, #10
 800b94c:	462a      	mov	r2, r5
 800b94e:	3101      	adds	r1, #1
 800b950:	4640      	mov	r0, r8
 800b952:	f000 ff03 	bl	800c75c <_strtol_r>
 800b956:	9b04      	ldr	r3, [sp, #16]
 800b958:	9e05      	ldr	r6, [sp, #20]
 800b95a:	1ac2      	subs	r2, r0, r3
 800b95c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b960:	429e      	cmp	r6, r3
 800b962:	bf28      	it	cs
 800b964:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b968:	4912      	ldr	r1, [pc, #72]	; (800b9b4 <_scanf_float+0x418>)
 800b96a:	4630      	mov	r0, r6
 800b96c:	f000 f82c 	bl	800b9c8 <siprintf>
 800b970:	e7d0      	b.n	800b914 <_scanf_float+0x378>
 800b972:	9903      	ldr	r1, [sp, #12]
 800b974:	f012 0f04 	tst.w	r2, #4
 800b978:	f103 0204 	add.w	r2, r3, #4
 800b97c:	600a      	str	r2, [r1, #0]
 800b97e:	d1d9      	bne.n	800b934 <_scanf_float+0x398>
 800b980:	f8d3 8000 	ldr.w	r8, [r3]
 800b984:	ee10 2a10 	vmov	r2, s0
 800b988:	ee10 0a10 	vmov	r0, s0
 800b98c:	463b      	mov	r3, r7
 800b98e:	4639      	mov	r1, r7
 800b990:	f7f5 f8ec 	bl	8000b6c <__aeabi_dcmpun>
 800b994:	b128      	cbz	r0, 800b9a2 <_scanf_float+0x406>
 800b996:	4808      	ldr	r0, [pc, #32]	; (800b9b8 <_scanf_float+0x41c>)
 800b998:	f000 f810 	bl	800b9bc <nanf>
 800b99c:	ed88 0a00 	vstr	s0, [r8]
 800b9a0:	e7cb      	b.n	800b93a <_scanf_float+0x39e>
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	f7f5 f93f 	bl	8000c28 <__aeabi_d2f>
 800b9aa:	f8c8 0000 	str.w	r0, [r8]
 800b9ae:	e7c4      	b.n	800b93a <_scanf_float+0x39e>
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	e634      	b.n	800b61e <_scanf_float+0x82>
 800b9b4:	0800f670 	.word	0x0800f670
 800b9b8:	0800fa78 	.word	0x0800fa78

0800b9bc <nanf>:
 800b9bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b9c4 <nanf+0x8>
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	7fc00000 	.word	0x7fc00000

0800b9c8 <siprintf>:
 800b9c8:	b40e      	push	{r1, r2, r3}
 800b9ca:	b500      	push	{lr}
 800b9cc:	b09c      	sub	sp, #112	; 0x70
 800b9ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b9d0:	9002      	str	r0, [sp, #8]
 800b9d2:	9006      	str	r0, [sp, #24]
 800b9d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9d8:	4809      	ldr	r0, [pc, #36]	; (800ba00 <siprintf+0x38>)
 800b9da:	9107      	str	r1, [sp, #28]
 800b9dc:	9104      	str	r1, [sp, #16]
 800b9de:	4909      	ldr	r1, [pc, #36]	; (800ba04 <siprintf+0x3c>)
 800b9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e4:	9105      	str	r1, [sp, #20]
 800b9e6:	6800      	ldr	r0, [r0, #0]
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	a902      	add	r1, sp, #8
 800b9ec:	f002 fee2 	bl	800e7b4 <_svfiprintf_r>
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	b01c      	add	sp, #112	; 0x70
 800b9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9fc:	b003      	add	sp, #12
 800b9fe:	4770      	bx	lr
 800ba00:	2000010c 	.word	0x2000010c
 800ba04:	ffff0208 	.word	0xffff0208

0800ba08 <sulp>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	ec45 4b10 	vmov	d0, r4, r5
 800ba12:	4616      	mov	r6, r2
 800ba14:	f002 fc2c 	bl	800e270 <__ulp>
 800ba18:	ec51 0b10 	vmov	r0, r1, d0
 800ba1c:	b17e      	cbz	r6, 800ba3e <sulp+0x36>
 800ba1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd09      	ble.n	800ba3e <sulp+0x36>
 800ba2a:	051b      	lsls	r3, r3, #20
 800ba2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba30:	2400      	movs	r4, #0
 800ba32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba36:	4622      	mov	r2, r4
 800ba38:	462b      	mov	r3, r5
 800ba3a:	f7f4 fdfd 	bl	8000638 <__aeabi_dmul>
 800ba3e:	bd70      	pop	{r4, r5, r6, pc}

0800ba40 <_strtod_l>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	ed2d 8b02 	vpush	{d8}
 800ba48:	b09d      	sub	sp, #116	; 0x74
 800ba4a:	461f      	mov	r7, r3
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9318      	str	r3, [sp, #96]	; 0x60
 800ba50:	4ba2      	ldr	r3, [pc, #648]	; (800bcdc <_strtod_l+0x29c>)
 800ba52:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9305      	str	r3, [sp, #20]
 800ba58:	4604      	mov	r4, r0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	4688      	mov	r8, r1
 800ba5e:	f7f4 fbd7 	bl	8000210 <strlen>
 800ba62:	f04f 0a00 	mov.w	sl, #0
 800ba66:	4605      	mov	r5, r0
 800ba68:	f04f 0b00 	mov.w	fp, #0
 800ba6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ba70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba72:	781a      	ldrb	r2, [r3, #0]
 800ba74:	2a2b      	cmp	r2, #43	; 0x2b
 800ba76:	d04e      	beq.n	800bb16 <_strtod_l+0xd6>
 800ba78:	d83b      	bhi.n	800baf2 <_strtod_l+0xb2>
 800ba7a:	2a0d      	cmp	r2, #13
 800ba7c:	d834      	bhi.n	800bae8 <_strtod_l+0xa8>
 800ba7e:	2a08      	cmp	r2, #8
 800ba80:	d834      	bhi.n	800baec <_strtod_l+0xac>
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	d03e      	beq.n	800bb04 <_strtod_l+0xc4>
 800ba86:	2300      	movs	r3, #0
 800ba88:	930a      	str	r3, [sp, #40]	; 0x28
 800ba8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ba8c:	7833      	ldrb	r3, [r6, #0]
 800ba8e:	2b30      	cmp	r3, #48	; 0x30
 800ba90:	f040 80b0 	bne.w	800bbf4 <_strtod_l+0x1b4>
 800ba94:	7873      	ldrb	r3, [r6, #1]
 800ba96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba9a:	2b58      	cmp	r3, #88	; 0x58
 800ba9c:	d168      	bne.n	800bb70 <_strtod_l+0x130>
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	ab18      	add	r3, sp, #96	; 0x60
 800baa4:	9702      	str	r7, [sp, #8]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4a8d      	ldr	r2, [pc, #564]	; (800bce0 <_strtod_l+0x2a0>)
 800baaa:	ab19      	add	r3, sp, #100	; 0x64
 800baac:	a917      	add	r1, sp, #92	; 0x5c
 800baae:	4620      	mov	r0, r4
 800bab0:	f001 fd38 	bl	800d524 <__gethex>
 800bab4:	f010 0707 	ands.w	r7, r0, #7
 800bab8:	4605      	mov	r5, r0
 800baba:	d005      	beq.n	800bac8 <_strtod_l+0x88>
 800babc:	2f06      	cmp	r7, #6
 800babe:	d12c      	bne.n	800bb1a <_strtod_l+0xda>
 800bac0:	3601      	adds	r6, #1
 800bac2:	2300      	movs	r3, #0
 800bac4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bac6:	930a      	str	r3, [sp, #40]	; 0x28
 800bac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 8590 	bne.w	800c5f0 <_strtod_l+0xbb0>
 800bad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad2:	b1eb      	cbz	r3, 800bb10 <_strtod_l+0xd0>
 800bad4:	4652      	mov	r2, sl
 800bad6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bada:	ec43 2b10 	vmov	d0, r2, r3
 800bade:	b01d      	add	sp, #116	; 0x74
 800bae0:	ecbd 8b02 	vpop	{d8}
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	2a20      	cmp	r2, #32
 800baea:	d1cc      	bne.n	800ba86 <_strtod_l+0x46>
 800baec:	3301      	adds	r3, #1
 800baee:	9317      	str	r3, [sp, #92]	; 0x5c
 800baf0:	e7be      	b.n	800ba70 <_strtod_l+0x30>
 800baf2:	2a2d      	cmp	r2, #45	; 0x2d
 800baf4:	d1c7      	bne.n	800ba86 <_strtod_l+0x46>
 800baf6:	2201      	movs	r2, #1
 800baf8:	920a      	str	r2, [sp, #40]	; 0x28
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bafe:	785b      	ldrb	r3, [r3, #1]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1c2      	bne.n	800ba8a <_strtod_l+0x4a>
 800bb04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f040 856e 	bne.w	800c5ec <_strtod_l+0xbac>
 800bb10:	4652      	mov	r2, sl
 800bb12:	465b      	mov	r3, fp
 800bb14:	e7e1      	b.n	800bada <_strtod_l+0x9a>
 800bb16:	2200      	movs	r2, #0
 800bb18:	e7ee      	b.n	800baf8 <_strtod_l+0xb8>
 800bb1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb1c:	b13a      	cbz	r2, 800bb2e <_strtod_l+0xee>
 800bb1e:	2135      	movs	r1, #53	; 0x35
 800bb20:	a81a      	add	r0, sp, #104	; 0x68
 800bb22:	f002 fcb0 	bl	800e486 <__copybits>
 800bb26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f002 f86f 	bl	800dc0c <_Bfree>
 800bb2e:	3f01      	subs	r7, #1
 800bb30:	2f04      	cmp	r7, #4
 800bb32:	d806      	bhi.n	800bb42 <_strtod_l+0x102>
 800bb34:	e8df f007 	tbb	[pc, r7]
 800bb38:	1714030a 	.word	0x1714030a
 800bb3c:	0a          	.byte	0x0a
 800bb3d:	00          	.byte	0x00
 800bb3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bb42:	0728      	lsls	r0, r5, #28
 800bb44:	d5c0      	bpl.n	800bac8 <_strtod_l+0x88>
 800bb46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bb4a:	e7bd      	b.n	800bac8 <_strtod_l+0x88>
 800bb4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bb50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bb5e:	e7f0      	b.n	800bb42 <_strtod_l+0x102>
 800bb60:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bce4 <_strtod_l+0x2a4>
 800bb64:	e7ed      	b.n	800bb42 <_strtod_l+0x102>
 800bb66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bb6a:	f04f 3aff 	mov.w	sl, #4294967295
 800bb6e:	e7e8      	b.n	800bb42 <_strtod_l+0x102>
 800bb70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb76:	785b      	ldrb	r3, [r3, #1]
 800bb78:	2b30      	cmp	r3, #48	; 0x30
 800bb7a:	d0f9      	beq.n	800bb70 <_strtod_l+0x130>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0a3      	beq.n	800bac8 <_strtod_l+0x88>
 800bb80:	2301      	movs	r3, #1
 800bb82:	f04f 0900 	mov.w	r9, #0
 800bb86:	9304      	str	r3, [sp, #16]
 800bb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb8a:	9308      	str	r3, [sp, #32]
 800bb8c:	f8cd 901c 	str.w	r9, [sp, #28]
 800bb90:	464f      	mov	r7, r9
 800bb92:	220a      	movs	r2, #10
 800bb94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bb96:	7806      	ldrb	r6, [r0, #0]
 800bb98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bb9c:	b2d9      	uxtb	r1, r3
 800bb9e:	2909      	cmp	r1, #9
 800bba0:	d92a      	bls.n	800bbf8 <_strtod_l+0x1b8>
 800bba2:	9905      	ldr	r1, [sp, #20]
 800bba4:	462a      	mov	r2, r5
 800bba6:	f002 ff1f 	bl	800e9e8 <strncmp>
 800bbaa:	b398      	cbz	r0, 800bc14 <_strtod_l+0x1d4>
 800bbac:	2000      	movs	r0, #0
 800bbae:	4632      	mov	r2, r6
 800bbb0:	463d      	mov	r5, r7
 800bbb2:	9005      	str	r0, [sp, #20]
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2a65      	cmp	r2, #101	; 0x65
 800bbb8:	d001      	beq.n	800bbbe <_strtod_l+0x17e>
 800bbba:	2a45      	cmp	r2, #69	; 0x45
 800bbbc:	d118      	bne.n	800bbf0 <_strtod_l+0x1b0>
 800bbbe:	b91d      	cbnz	r5, 800bbc8 <_strtod_l+0x188>
 800bbc0:	9a04      	ldr	r2, [sp, #16]
 800bbc2:	4302      	orrs	r2, r0
 800bbc4:	d09e      	beq.n	800bb04 <_strtod_l+0xc4>
 800bbc6:	2500      	movs	r5, #0
 800bbc8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bbcc:	f108 0201 	add.w	r2, r8, #1
 800bbd0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bbd2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bbd6:	2a2b      	cmp	r2, #43	; 0x2b
 800bbd8:	d075      	beq.n	800bcc6 <_strtod_l+0x286>
 800bbda:	2a2d      	cmp	r2, #45	; 0x2d
 800bbdc:	d07b      	beq.n	800bcd6 <_strtod_l+0x296>
 800bbde:	f04f 0c00 	mov.w	ip, #0
 800bbe2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbe6:	2909      	cmp	r1, #9
 800bbe8:	f240 8082 	bls.w	800bcf0 <_strtod_l+0x2b0>
 800bbec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	e09d      	b.n	800bd30 <_strtod_l+0x2f0>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e7c4      	b.n	800bb82 <_strtod_l+0x142>
 800bbf8:	2f08      	cmp	r7, #8
 800bbfa:	bfd8      	it	le
 800bbfc:	9907      	ldrle	r1, [sp, #28]
 800bbfe:	f100 0001 	add.w	r0, r0, #1
 800bc02:	bfda      	itte	le
 800bc04:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc08:	9307      	strle	r3, [sp, #28]
 800bc0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bc0e:	3701      	adds	r7, #1
 800bc10:	9017      	str	r0, [sp, #92]	; 0x5c
 800bc12:	e7bf      	b.n	800bb94 <_strtod_l+0x154>
 800bc14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc16:	195a      	adds	r2, r3, r5
 800bc18:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc1a:	5d5a      	ldrb	r2, [r3, r5]
 800bc1c:	2f00      	cmp	r7, #0
 800bc1e:	d037      	beq.n	800bc90 <_strtod_l+0x250>
 800bc20:	9005      	str	r0, [sp, #20]
 800bc22:	463d      	mov	r5, r7
 800bc24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	d912      	bls.n	800bc52 <_strtod_l+0x212>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e7c2      	b.n	800bbb6 <_strtod_l+0x176>
 800bc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc36:	785a      	ldrb	r2, [r3, #1]
 800bc38:	3001      	adds	r0, #1
 800bc3a:	2a30      	cmp	r2, #48	; 0x30
 800bc3c:	d0f8      	beq.n	800bc30 <_strtod_l+0x1f0>
 800bc3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc42:	2b08      	cmp	r3, #8
 800bc44:	f200 84d9 	bhi.w	800c5fa <_strtod_l+0xbba>
 800bc48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc4a:	9005      	str	r0, [sp, #20]
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	9308      	str	r3, [sp, #32]
 800bc50:	4605      	mov	r5, r0
 800bc52:	3a30      	subs	r2, #48	; 0x30
 800bc54:	f100 0301 	add.w	r3, r0, #1
 800bc58:	d014      	beq.n	800bc84 <_strtod_l+0x244>
 800bc5a:	9905      	ldr	r1, [sp, #20]
 800bc5c:	4419      	add	r1, r3
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	462b      	mov	r3, r5
 800bc62:	eb00 0e05 	add.w	lr, r0, r5
 800bc66:	210a      	movs	r1, #10
 800bc68:	4573      	cmp	r3, lr
 800bc6a:	d113      	bne.n	800bc94 <_strtod_l+0x254>
 800bc6c:	182b      	adds	r3, r5, r0
 800bc6e:	2b08      	cmp	r3, #8
 800bc70:	f105 0501 	add.w	r5, r5, #1
 800bc74:	4405      	add	r5, r0
 800bc76:	dc1c      	bgt.n	800bcb2 <_strtod_l+0x272>
 800bc78:	9907      	ldr	r1, [sp, #28]
 800bc7a:	230a      	movs	r3, #10
 800bc7c:	fb03 2301 	mla	r3, r3, r1, r2
 800bc80:	9307      	str	r3, [sp, #28]
 800bc82:	2300      	movs	r3, #0
 800bc84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc86:	1c51      	adds	r1, r2, #1
 800bc88:	9117      	str	r1, [sp, #92]	; 0x5c
 800bc8a:	7852      	ldrb	r2, [r2, #1]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	e7c9      	b.n	800bc24 <_strtod_l+0x1e4>
 800bc90:	4638      	mov	r0, r7
 800bc92:	e7d2      	b.n	800bc3a <_strtod_l+0x1fa>
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	dc04      	bgt.n	800bca2 <_strtod_l+0x262>
 800bc98:	9e07      	ldr	r6, [sp, #28]
 800bc9a:	434e      	muls	r6, r1
 800bc9c:	9607      	str	r6, [sp, #28]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	e7e2      	b.n	800bc68 <_strtod_l+0x228>
 800bca2:	f103 0c01 	add.w	ip, r3, #1
 800bca6:	f1bc 0f10 	cmp.w	ip, #16
 800bcaa:	bfd8      	it	le
 800bcac:	fb01 f909 	mulle.w	r9, r1, r9
 800bcb0:	e7f5      	b.n	800bc9e <_strtod_l+0x25e>
 800bcb2:	2d10      	cmp	r5, #16
 800bcb4:	bfdc      	itt	le
 800bcb6:	230a      	movle	r3, #10
 800bcb8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bcbc:	e7e1      	b.n	800bc82 <_strtod_l+0x242>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e77c      	b.n	800bbc0 <_strtod_l+0x180>
 800bcc6:	f04f 0c00 	mov.w	ip, #0
 800bcca:	f108 0202 	add.w	r2, r8, #2
 800bcce:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bcd4:	e785      	b.n	800bbe2 <_strtod_l+0x1a2>
 800bcd6:	f04f 0c01 	mov.w	ip, #1
 800bcda:	e7f6      	b.n	800bcca <_strtod_l+0x28a>
 800bcdc:	0800f8c0 	.word	0x0800f8c0
 800bce0:	0800f678 	.word	0x0800f678
 800bce4:	7ff00000 	.word	0x7ff00000
 800bce8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bcea:	1c51      	adds	r1, r2, #1
 800bcec:	9117      	str	r1, [sp, #92]	; 0x5c
 800bcee:	7852      	ldrb	r2, [r2, #1]
 800bcf0:	2a30      	cmp	r2, #48	; 0x30
 800bcf2:	d0f9      	beq.n	800bce8 <_strtod_l+0x2a8>
 800bcf4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bcf8:	2908      	cmp	r1, #8
 800bcfa:	f63f af79 	bhi.w	800bbf0 <_strtod_l+0x1b0>
 800bcfe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bd02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd04:	9206      	str	r2, [sp, #24]
 800bd06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd08:	1c51      	adds	r1, r2, #1
 800bd0a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd0c:	7852      	ldrb	r2, [r2, #1]
 800bd0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bd12:	2e09      	cmp	r6, #9
 800bd14:	d937      	bls.n	800bd86 <_strtod_l+0x346>
 800bd16:	9e06      	ldr	r6, [sp, #24]
 800bd18:	1b89      	subs	r1, r1, r6
 800bd1a:	2908      	cmp	r1, #8
 800bd1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bd20:	dc02      	bgt.n	800bd28 <_strtod_l+0x2e8>
 800bd22:	4576      	cmp	r6, lr
 800bd24:	bfa8      	it	ge
 800bd26:	4676      	movge	r6, lr
 800bd28:	f1bc 0f00 	cmp.w	ip, #0
 800bd2c:	d000      	beq.n	800bd30 <_strtod_l+0x2f0>
 800bd2e:	4276      	negs	r6, r6
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	d14d      	bne.n	800bdd0 <_strtod_l+0x390>
 800bd34:	9904      	ldr	r1, [sp, #16]
 800bd36:	4301      	orrs	r1, r0
 800bd38:	f47f aec6 	bne.w	800bac8 <_strtod_l+0x88>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f47f aee1 	bne.w	800bb04 <_strtod_l+0xc4>
 800bd42:	2a69      	cmp	r2, #105	; 0x69
 800bd44:	d027      	beq.n	800bd96 <_strtod_l+0x356>
 800bd46:	dc24      	bgt.n	800bd92 <_strtod_l+0x352>
 800bd48:	2a49      	cmp	r2, #73	; 0x49
 800bd4a:	d024      	beq.n	800bd96 <_strtod_l+0x356>
 800bd4c:	2a4e      	cmp	r2, #78	; 0x4e
 800bd4e:	f47f aed9 	bne.w	800bb04 <_strtod_l+0xc4>
 800bd52:	499f      	ldr	r1, [pc, #636]	; (800bfd0 <_strtod_l+0x590>)
 800bd54:	a817      	add	r0, sp, #92	; 0x5c
 800bd56:	f001 fe3d 	bl	800d9d4 <__match>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f43f aed2 	beq.w	800bb04 <_strtod_l+0xc4>
 800bd60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b28      	cmp	r3, #40	; 0x28
 800bd66:	d12d      	bne.n	800bdc4 <_strtod_l+0x384>
 800bd68:	499a      	ldr	r1, [pc, #616]	; (800bfd4 <_strtod_l+0x594>)
 800bd6a:	aa1a      	add	r2, sp, #104	; 0x68
 800bd6c:	a817      	add	r0, sp, #92	; 0x5c
 800bd6e:	f001 fe45 	bl	800d9fc <__hexnan>
 800bd72:	2805      	cmp	r0, #5
 800bd74:	d126      	bne.n	800bdc4 <_strtod_l+0x384>
 800bd76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bd7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bd80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bd84:	e6a0      	b.n	800bac8 <_strtod_l+0x88>
 800bd86:	210a      	movs	r1, #10
 800bd88:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bd8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bd90:	e7b9      	b.n	800bd06 <_strtod_l+0x2c6>
 800bd92:	2a6e      	cmp	r2, #110	; 0x6e
 800bd94:	e7db      	b.n	800bd4e <_strtod_l+0x30e>
 800bd96:	4990      	ldr	r1, [pc, #576]	; (800bfd8 <_strtod_l+0x598>)
 800bd98:	a817      	add	r0, sp, #92	; 0x5c
 800bd9a:	f001 fe1b 	bl	800d9d4 <__match>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f43f aeb0 	beq.w	800bb04 <_strtod_l+0xc4>
 800bda4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bda6:	498d      	ldr	r1, [pc, #564]	; (800bfdc <_strtod_l+0x59c>)
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	a817      	add	r0, sp, #92	; 0x5c
 800bdac:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdae:	f001 fe11 	bl	800d9d4 <__match>
 800bdb2:	b910      	cbnz	r0, 800bdba <_strtod_l+0x37a>
 800bdb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bfec <_strtod_l+0x5ac>
 800bdbe:	f04f 0a00 	mov.w	sl, #0
 800bdc2:	e681      	b.n	800bac8 <_strtod_l+0x88>
 800bdc4:	4886      	ldr	r0, [pc, #536]	; (800bfe0 <_strtod_l+0x5a0>)
 800bdc6:	f002 fdf7 	bl	800e9b8 <nan>
 800bdca:	ec5b ab10 	vmov	sl, fp, d0
 800bdce:	e67b      	b.n	800bac8 <_strtod_l+0x88>
 800bdd0:	9b05      	ldr	r3, [sp, #20]
 800bdd2:	9807      	ldr	r0, [sp, #28]
 800bdd4:	1af3      	subs	r3, r6, r3
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	bf08      	it	eq
 800bdda:	462f      	moveq	r7, r5
 800bddc:	2d10      	cmp	r5, #16
 800bdde:	9306      	str	r3, [sp, #24]
 800bde0:	46a8      	mov	r8, r5
 800bde2:	bfa8      	it	ge
 800bde4:	f04f 0810 	movge.w	r8, #16
 800bde8:	f7f4 fbac 	bl	8000544 <__aeabi_ui2d>
 800bdec:	2d09      	cmp	r5, #9
 800bdee:	4682      	mov	sl, r0
 800bdf0:	468b      	mov	fp, r1
 800bdf2:	dd13      	ble.n	800be1c <_strtod_l+0x3dc>
 800bdf4:	4b7b      	ldr	r3, [pc, #492]	; (800bfe4 <_strtod_l+0x5a4>)
 800bdf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bdfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bdfe:	f7f4 fc1b 	bl	8000638 <__aeabi_dmul>
 800be02:	4682      	mov	sl, r0
 800be04:	4648      	mov	r0, r9
 800be06:	468b      	mov	fp, r1
 800be08:	f7f4 fb9c 	bl	8000544 <__aeabi_ui2d>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4650      	mov	r0, sl
 800be12:	4659      	mov	r1, fp
 800be14:	f7f4 fa5a 	bl	80002cc <__adddf3>
 800be18:	4682      	mov	sl, r0
 800be1a:	468b      	mov	fp, r1
 800be1c:	2d0f      	cmp	r5, #15
 800be1e:	dc38      	bgt.n	800be92 <_strtod_l+0x452>
 800be20:	9b06      	ldr	r3, [sp, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f43f ae50 	beq.w	800bac8 <_strtod_l+0x88>
 800be28:	dd24      	ble.n	800be74 <_strtod_l+0x434>
 800be2a:	2b16      	cmp	r3, #22
 800be2c:	dc0b      	bgt.n	800be46 <_strtod_l+0x406>
 800be2e:	496d      	ldr	r1, [pc, #436]	; (800bfe4 <_strtod_l+0x5a4>)
 800be30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be38:	4652      	mov	r2, sl
 800be3a:	465b      	mov	r3, fp
 800be3c:	f7f4 fbfc 	bl	8000638 <__aeabi_dmul>
 800be40:	4682      	mov	sl, r0
 800be42:	468b      	mov	fp, r1
 800be44:	e640      	b.n	800bac8 <_strtod_l+0x88>
 800be46:	9a06      	ldr	r2, [sp, #24]
 800be48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800be4c:	4293      	cmp	r3, r2
 800be4e:	db20      	blt.n	800be92 <_strtod_l+0x452>
 800be50:	4c64      	ldr	r4, [pc, #400]	; (800bfe4 <_strtod_l+0x5a4>)
 800be52:	f1c5 050f 	rsb	r5, r5, #15
 800be56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800be5a:	4652      	mov	r2, sl
 800be5c:	465b      	mov	r3, fp
 800be5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be62:	f7f4 fbe9 	bl	8000638 <__aeabi_dmul>
 800be66:	9b06      	ldr	r3, [sp, #24]
 800be68:	1b5d      	subs	r5, r3, r5
 800be6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800be6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be72:	e7e3      	b.n	800be3c <_strtod_l+0x3fc>
 800be74:	9b06      	ldr	r3, [sp, #24]
 800be76:	3316      	adds	r3, #22
 800be78:	db0b      	blt.n	800be92 <_strtod_l+0x452>
 800be7a:	9b05      	ldr	r3, [sp, #20]
 800be7c:	1b9e      	subs	r6, r3, r6
 800be7e:	4b59      	ldr	r3, [pc, #356]	; (800bfe4 <_strtod_l+0x5a4>)
 800be80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800be84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	f7f4 fcfe 	bl	800088c <__aeabi_ddiv>
 800be90:	e7d6      	b.n	800be40 <_strtod_l+0x400>
 800be92:	9b06      	ldr	r3, [sp, #24]
 800be94:	eba5 0808 	sub.w	r8, r5, r8
 800be98:	4498      	add	r8, r3
 800be9a:	f1b8 0f00 	cmp.w	r8, #0
 800be9e:	dd74      	ble.n	800bf8a <_strtod_l+0x54a>
 800bea0:	f018 030f 	ands.w	r3, r8, #15
 800bea4:	d00a      	beq.n	800bebc <_strtod_l+0x47c>
 800bea6:	494f      	ldr	r1, [pc, #316]	; (800bfe4 <_strtod_l+0x5a4>)
 800bea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800beac:	4652      	mov	r2, sl
 800beae:	465b      	mov	r3, fp
 800beb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb4:	f7f4 fbc0 	bl	8000638 <__aeabi_dmul>
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	f038 080f 	bics.w	r8, r8, #15
 800bec0:	d04f      	beq.n	800bf62 <_strtod_l+0x522>
 800bec2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bec6:	dd22      	ble.n	800bf0e <_strtod_l+0x4ce>
 800bec8:	2500      	movs	r5, #0
 800beca:	462e      	mov	r6, r5
 800becc:	9507      	str	r5, [sp, #28]
 800bece:	9505      	str	r5, [sp, #20]
 800bed0:	2322      	movs	r3, #34	; 0x22
 800bed2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bfec <_strtod_l+0x5ac>
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	f04f 0a00 	mov.w	sl, #0
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f43f adf2 	beq.w	800bac8 <_strtod_l+0x88>
 800bee4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bee6:	4620      	mov	r0, r4
 800bee8:	f001 fe90 	bl	800dc0c <_Bfree>
 800beec:	9905      	ldr	r1, [sp, #20]
 800beee:	4620      	mov	r0, r4
 800bef0:	f001 fe8c 	bl	800dc0c <_Bfree>
 800bef4:	4631      	mov	r1, r6
 800bef6:	4620      	mov	r0, r4
 800bef8:	f001 fe88 	bl	800dc0c <_Bfree>
 800befc:	9907      	ldr	r1, [sp, #28]
 800befe:	4620      	mov	r0, r4
 800bf00:	f001 fe84 	bl	800dc0c <_Bfree>
 800bf04:	4629      	mov	r1, r5
 800bf06:	4620      	mov	r0, r4
 800bf08:	f001 fe80 	bl	800dc0c <_Bfree>
 800bf0c:	e5dc      	b.n	800bac8 <_strtod_l+0x88>
 800bf0e:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <_strtod_l+0x5a8>)
 800bf10:	9304      	str	r3, [sp, #16]
 800bf12:	2300      	movs	r3, #0
 800bf14:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf18:	4650      	mov	r0, sl
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	4699      	mov	r9, r3
 800bf1e:	f1b8 0f01 	cmp.w	r8, #1
 800bf22:	dc21      	bgt.n	800bf68 <_strtod_l+0x528>
 800bf24:	b10b      	cbz	r3, 800bf2a <_strtod_l+0x4ea>
 800bf26:	4682      	mov	sl, r0
 800bf28:	468b      	mov	fp, r1
 800bf2a:	4b2f      	ldr	r3, [pc, #188]	; (800bfe8 <_strtod_l+0x5a8>)
 800bf2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bf30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bf34:	4652      	mov	r2, sl
 800bf36:	465b      	mov	r3, fp
 800bf38:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bf3c:	f7f4 fb7c 	bl	8000638 <__aeabi_dmul>
 800bf40:	4b2a      	ldr	r3, [pc, #168]	; (800bfec <_strtod_l+0x5ac>)
 800bf42:	460a      	mov	r2, r1
 800bf44:	400b      	ands	r3, r1
 800bf46:	492a      	ldr	r1, [pc, #168]	; (800bff0 <_strtod_l+0x5b0>)
 800bf48:	428b      	cmp	r3, r1
 800bf4a:	4682      	mov	sl, r0
 800bf4c:	d8bc      	bhi.n	800bec8 <_strtod_l+0x488>
 800bf4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf52:	428b      	cmp	r3, r1
 800bf54:	bf86      	itte	hi
 800bf56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bff4 <_strtod_l+0x5b4>
 800bf5a:	f04f 3aff 	movhi.w	sl, #4294967295
 800bf5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bf62:	2300      	movs	r3, #0
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	e084      	b.n	800c072 <_strtod_l+0x632>
 800bf68:	f018 0f01 	tst.w	r8, #1
 800bf6c:	d005      	beq.n	800bf7a <_strtod_l+0x53a>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f7f4 fb60 	bl	8000638 <__aeabi_dmul>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	9a04      	ldr	r2, [sp, #16]
 800bf7c:	3208      	adds	r2, #8
 800bf7e:	f109 0901 	add.w	r9, r9, #1
 800bf82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf86:	9204      	str	r2, [sp, #16]
 800bf88:	e7c9      	b.n	800bf1e <_strtod_l+0x4de>
 800bf8a:	d0ea      	beq.n	800bf62 <_strtod_l+0x522>
 800bf8c:	f1c8 0800 	rsb	r8, r8, #0
 800bf90:	f018 020f 	ands.w	r2, r8, #15
 800bf94:	d00a      	beq.n	800bfac <_strtod_l+0x56c>
 800bf96:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <_strtod_l+0x5a4>)
 800bf98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	4659      	mov	r1, fp
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 fc72 	bl	800088c <__aeabi_ddiv>
 800bfa8:	4682      	mov	sl, r0
 800bfaa:	468b      	mov	fp, r1
 800bfac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bfb0:	d0d7      	beq.n	800bf62 <_strtod_l+0x522>
 800bfb2:	f1b8 0f1f 	cmp.w	r8, #31
 800bfb6:	dd1f      	ble.n	800bff8 <_strtod_l+0x5b8>
 800bfb8:	2500      	movs	r5, #0
 800bfba:	462e      	mov	r6, r5
 800bfbc:	9507      	str	r5, [sp, #28]
 800bfbe:	9505      	str	r5, [sp, #20]
 800bfc0:	2322      	movs	r3, #34	; 0x22
 800bfc2:	f04f 0a00 	mov.w	sl, #0
 800bfc6:	f04f 0b00 	mov.w	fp, #0
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	e786      	b.n	800bedc <_strtod_l+0x49c>
 800bfce:	bf00      	nop
 800bfd0:	0800f649 	.word	0x0800f649
 800bfd4:	0800f68c 	.word	0x0800f68c
 800bfd8:	0800f641 	.word	0x0800f641
 800bfdc:	0800f7cc 	.word	0x0800f7cc
 800bfe0:	0800fa78 	.word	0x0800fa78
 800bfe4:	0800f958 	.word	0x0800f958
 800bfe8:	0800f930 	.word	0x0800f930
 800bfec:	7ff00000 	.word	0x7ff00000
 800bff0:	7ca00000 	.word	0x7ca00000
 800bff4:	7fefffff 	.word	0x7fefffff
 800bff8:	f018 0310 	ands.w	r3, r8, #16
 800bffc:	bf18      	it	ne
 800bffe:	236a      	movne	r3, #106	; 0x6a
 800c000:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c3b0 <_strtod_l+0x970>
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	4650      	mov	r0, sl
 800c008:	4659      	mov	r1, fp
 800c00a:	2300      	movs	r3, #0
 800c00c:	f018 0f01 	tst.w	r8, #1
 800c010:	d004      	beq.n	800c01c <_strtod_l+0x5dc>
 800c012:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c016:	f7f4 fb0f 	bl	8000638 <__aeabi_dmul>
 800c01a:	2301      	movs	r3, #1
 800c01c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c020:	f109 0908 	add.w	r9, r9, #8
 800c024:	d1f2      	bne.n	800c00c <_strtod_l+0x5cc>
 800c026:	b10b      	cbz	r3, 800c02c <_strtod_l+0x5ec>
 800c028:	4682      	mov	sl, r0
 800c02a:	468b      	mov	fp, r1
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	b1c3      	cbz	r3, 800c062 <_strtod_l+0x622>
 800c030:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c034:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c038:	2b00      	cmp	r3, #0
 800c03a:	4659      	mov	r1, fp
 800c03c:	dd11      	ble.n	800c062 <_strtod_l+0x622>
 800c03e:	2b1f      	cmp	r3, #31
 800c040:	f340 8124 	ble.w	800c28c <_strtod_l+0x84c>
 800c044:	2b34      	cmp	r3, #52	; 0x34
 800c046:	bfde      	ittt	le
 800c048:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c04c:	f04f 33ff 	movle.w	r3, #4294967295
 800c050:	fa03 f202 	lslle.w	r2, r3, r2
 800c054:	f04f 0a00 	mov.w	sl, #0
 800c058:	bfcc      	ite	gt
 800c05a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c05e:	ea02 0b01 	andle.w	fp, r2, r1
 800c062:	2200      	movs	r2, #0
 800c064:	2300      	movs	r3, #0
 800c066:	4650      	mov	r0, sl
 800c068:	4659      	mov	r1, fp
 800c06a:	f7f4 fd4d 	bl	8000b08 <__aeabi_dcmpeq>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d1a2      	bne.n	800bfb8 <_strtod_l+0x578>
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	9908      	ldr	r1, [sp, #32]
 800c078:	462b      	mov	r3, r5
 800c07a:	463a      	mov	r2, r7
 800c07c:	4620      	mov	r0, r4
 800c07e:	f001 fe2d 	bl	800dcdc <__s2b>
 800c082:	9007      	str	r0, [sp, #28]
 800c084:	2800      	cmp	r0, #0
 800c086:	f43f af1f 	beq.w	800bec8 <_strtod_l+0x488>
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	1b9e      	subs	r6, r3, r6
 800c08e:	9b06      	ldr	r3, [sp, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfb4      	ite	lt
 800c094:	4633      	movlt	r3, r6
 800c096:	2300      	movge	r3, #0
 800c098:	930c      	str	r3, [sp, #48]	; 0x30
 800c09a:	9b06      	ldr	r3, [sp, #24]
 800c09c:	2500      	movs	r5, #0
 800c09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c0a4:	462e      	mov	r6, r5
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	6859      	ldr	r1, [r3, #4]
 800c0ac:	f001 fd6e 	bl	800db8c <_Balloc>
 800c0b0:	9005      	str	r0, [sp, #20]
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f af0c 	beq.w	800bed0 <_strtod_l+0x490>
 800c0b8:	9b07      	ldr	r3, [sp, #28]
 800c0ba:	691a      	ldr	r2, [r3, #16]
 800c0bc:	3202      	adds	r2, #2
 800c0be:	f103 010c 	add.w	r1, r3, #12
 800c0c2:	0092      	lsls	r2, r2, #2
 800c0c4:	300c      	adds	r0, #12
 800c0c6:	f001 fd53 	bl	800db70 <memcpy>
 800c0ca:	ec4b ab10 	vmov	d0, sl, fp
 800c0ce:	aa1a      	add	r2, sp, #104	; 0x68
 800c0d0:	a919      	add	r1, sp, #100	; 0x64
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f002 f948 	bl	800e368 <__d2b>
 800c0d8:	ec4b ab18 	vmov	d8, sl, fp
 800c0dc:	9018      	str	r0, [sp, #96]	; 0x60
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f aef6 	beq.w	800bed0 <_strtod_l+0x490>
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f001 fe92 	bl	800de10 <__i2b>
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f aeee 	beq.w	800bed0 <_strtod_l+0x490>
 800c0f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0f6:	9904      	ldr	r1, [sp, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	bfab      	itete	ge
 800c0fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c0fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c100:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c102:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c106:	bfac      	ite	ge
 800c108:	eb03 0902 	addge.w	r9, r3, r2
 800c10c:	1ad7      	sublt	r7, r2, r3
 800c10e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c110:	eba3 0801 	sub.w	r8, r3, r1
 800c114:	4490      	add	r8, r2
 800c116:	4ba1      	ldr	r3, [pc, #644]	; (800c39c <_strtod_l+0x95c>)
 800c118:	f108 38ff 	add.w	r8, r8, #4294967295
 800c11c:	4598      	cmp	r8, r3
 800c11e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c122:	f280 80c7 	bge.w	800c2b4 <_strtod_l+0x874>
 800c126:	eba3 0308 	sub.w	r3, r3, r8
 800c12a:	2b1f      	cmp	r3, #31
 800c12c:	eba2 0203 	sub.w	r2, r2, r3
 800c130:	f04f 0101 	mov.w	r1, #1
 800c134:	f300 80b1 	bgt.w	800c29a <_strtod_l+0x85a>
 800c138:	fa01 f303 	lsl.w	r3, r1, r3
 800c13c:	930d      	str	r3, [sp, #52]	; 0x34
 800c13e:	2300      	movs	r3, #0
 800c140:	9308      	str	r3, [sp, #32]
 800c142:	eb09 0802 	add.w	r8, r9, r2
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	45c1      	cmp	r9, r8
 800c14a:	4417      	add	r7, r2
 800c14c:	441f      	add	r7, r3
 800c14e:	464b      	mov	r3, r9
 800c150:	bfa8      	it	ge
 800c152:	4643      	movge	r3, r8
 800c154:	42bb      	cmp	r3, r7
 800c156:	bfa8      	it	ge
 800c158:	463b      	movge	r3, r7
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bfc2      	ittt	gt
 800c15e:	eba8 0803 	subgt.w	r8, r8, r3
 800c162:	1aff      	subgt	r7, r7, r3
 800c164:	eba9 0903 	subgt.w	r9, r9, r3
 800c168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dd17      	ble.n	800c19e <_strtod_l+0x75e>
 800c16e:	4631      	mov	r1, r6
 800c170:	461a      	mov	r2, r3
 800c172:	4620      	mov	r0, r4
 800c174:	f001 ff0c 	bl	800df90 <__pow5mult>
 800c178:	4606      	mov	r6, r0
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f43f aea8 	beq.w	800bed0 <_strtod_l+0x490>
 800c180:	4601      	mov	r1, r0
 800c182:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c184:	4620      	mov	r0, r4
 800c186:	f001 fe59 	bl	800de3c <__multiply>
 800c18a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f43f ae9f 	beq.w	800bed0 <_strtod_l+0x490>
 800c192:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c194:	4620      	mov	r0, r4
 800c196:	f001 fd39 	bl	800dc0c <_Bfree>
 800c19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c19c:	9318      	str	r3, [sp, #96]	; 0x60
 800c19e:	f1b8 0f00 	cmp.w	r8, #0
 800c1a2:	f300 808c 	bgt.w	800c2be <_strtod_l+0x87e>
 800c1a6:	9b06      	ldr	r3, [sp, #24]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dd08      	ble.n	800c1be <_strtod_l+0x77e>
 800c1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1ae:	9905      	ldr	r1, [sp, #20]
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 feed 	bl	800df90 <__pow5mult>
 800c1b6:	9005      	str	r0, [sp, #20]
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	f43f ae89 	beq.w	800bed0 <_strtod_l+0x490>
 800c1be:	2f00      	cmp	r7, #0
 800c1c0:	dd08      	ble.n	800c1d4 <_strtod_l+0x794>
 800c1c2:	9905      	ldr	r1, [sp, #20]
 800c1c4:	463a      	mov	r2, r7
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f001 ff3c 	bl	800e044 <__lshift>
 800c1cc:	9005      	str	r0, [sp, #20]
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f43f ae7e 	beq.w	800bed0 <_strtod_l+0x490>
 800c1d4:	f1b9 0f00 	cmp.w	r9, #0
 800c1d8:	dd08      	ble.n	800c1ec <_strtod_l+0x7ac>
 800c1da:	4631      	mov	r1, r6
 800c1dc:	464a      	mov	r2, r9
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f001 ff30 	bl	800e044 <__lshift>
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f43f ae72 	beq.w	800bed0 <_strtod_l+0x490>
 800c1ec:	9a05      	ldr	r2, [sp, #20]
 800c1ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f001 ffb3 	bl	800e15c <__mdiff>
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	f43f ae69 	beq.w	800bed0 <_strtod_l+0x490>
 800c1fe:	68c3      	ldr	r3, [r0, #12]
 800c200:	930b      	str	r3, [sp, #44]	; 0x2c
 800c202:	2300      	movs	r3, #0
 800c204:	60c3      	str	r3, [r0, #12]
 800c206:	4631      	mov	r1, r6
 800c208:	f001 ff8c 	bl	800e124 <__mcmp>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	da60      	bge.n	800c2d2 <_strtod_l+0x892>
 800c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c212:	ea53 030a 	orrs.w	r3, r3, sl
 800c216:	f040 8082 	bne.w	800c31e <_strtod_l+0x8de>
 800c21a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d17d      	bne.n	800c31e <_strtod_l+0x8de>
 800c222:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c226:	0d1b      	lsrs	r3, r3, #20
 800c228:	051b      	lsls	r3, r3, #20
 800c22a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c22e:	d976      	bls.n	800c31e <_strtod_l+0x8de>
 800c230:	696b      	ldr	r3, [r5, #20]
 800c232:	b913      	cbnz	r3, 800c23a <_strtod_l+0x7fa>
 800c234:	692b      	ldr	r3, [r5, #16]
 800c236:	2b01      	cmp	r3, #1
 800c238:	dd71      	ble.n	800c31e <_strtod_l+0x8de>
 800c23a:	4629      	mov	r1, r5
 800c23c:	2201      	movs	r2, #1
 800c23e:	4620      	mov	r0, r4
 800c240:	f001 ff00 	bl	800e044 <__lshift>
 800c244:	4631      	mov	r1, r6
 800c246:	4605      	mov	r5, r0
 800c248:	f001 ff6c 	bl	800e124 <__mcmp>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	dd66      	ble.n	800c31e <_strtod_l+0x8de>
 800c250:	9904      	ldr	r1, [sp, #16]
 800c252:	4a53      	ldr	r2, [pc, #332]	; (800c3a0 <_strtod_l+0x960>)
 800c254:	465b      	mov	r3, fp
 800c256:	2900      	cmp	r1, #0
 800c258:	f000 8081 	beq.w	800c35e <_strtod_l+0x91e>
 800c25c:	ea02 010b 	and.w	r1, r2, fp
 800c260:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c264:	dc7b      	bgt.n	800c35e <_strtod_l+0x91e>
 800c266:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c26a:	f77f aea9 	ble.w	800bfc0 <_strtod_l+0x580>
 800c26e:	4b4d      	ldr	r3, [pc, #308]	; (800c3a4 <_strtod_l+0x964>)
 800c270:	4650      	mov	r0, sl
 800c272:	4659      	mov	r1, fp
 800c274:	2200      	movs	r2, #0
 800c276:	f7f4 f9df 	bl	8000638 <__aeabi_dmul>
 800c27a:	460b      	mov	r3, r1
 800c27c:	4303      	orrs	r3, r0
 800c27e:	bf08      	it	eq
 800c280:	2322      	moveq	r3, #34	; 0x22
 800c282:	4682      	mov	sl, r0
 800c284:	468b      	mov	fp, r1
 800c286:	bf08      	it	eq
 800c288:	6023      	streq	r3, [r4, #0]
 800c28a:	e62b      	b.n	800bee4 <_strtod_l+0x4a4>
 800c28c:	f04f 32ff 	mov.w	r2, #4294967295
 800c290:	fa02 f303 	lsl.w	r3, r2, r3
 800c294:	ea03 0a0a 	and.w	sl, r3, sl
 800c298:	e6e3      	b.n	800c062 <_strtod_l+0x622>
 800c29a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c29e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c2a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c2a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c2aa:	fa01 f308 	lsl.w	r3, r1, r8
 800c2ae:	9308      	str	r3, [sp, #32]
 800c2b0:	910d      	str	r1, [sp, #52]	; 0x34
 800c2b2:	e746      	b.n	800c142 <_strtod_l+0x702>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9308      	str	r3, [sp, #32]
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c2bc:	e741      	b.n	800c142 <_strtod_l+0x702>
 800c2be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f001 febe 	bl	800e044 <__lshift>
 800c2c8:	9018      	str	r0, [sp, #96]	; 0x60
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f47f af6b 	bne.w	800c1a6 <_strtod_l+0x766>
 800c2d0:	e5fe      	b.n	800bed0 <_strtod_l+0x490>
 800c2d2:	465f      	mov	r7, fp
 800c2d4:	d16e      	bne.n	800c3b4 <_strtod_l+0x974>
 800c2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2dc:	b342      	cbz	r2, 800c330 <_strtod_l+0x8f0>
 800c2de:	4a32      	ldr	r2, [pc, #200]	; (800c3a8 <_strtod_l+0x968>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d128      	bne.n	800c336 <_strtod_l+0x8f6>
 800c2e4:	9b04      	ldr	r3, [sp, #16]
 800c2e6:	4651      	mov	r1, sl
 800c2e8:	b1eb      	cbz	r3, 800c326 <_strtod_l+0x8e6>
 800c2ea:	4b2d      	ldr	r3, [pc, #180]	; (800c3a0 <_strtod_l+0x960>)
 800c2ec:	403b      	ands	r3, r7
 800c2ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f6:	d819      	bhi.n	800c32c <_strtod_l+0x8ec>
 800c2f8:	0d1b      	lsrs	r3, r3, #20
 800c2fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c302:	4299      	cmp	r1, r3
 800c304:	d117      	bne.n	800c336 <_strtod_l+0x8f6>
 800c306:	4b29      	ldr	r3, [pc, #164]	; (800c3ac <_strtod_l+0x96c>)
 800c308:	429f      	cmp	r7, r3
 800c30a:	d102      	bne.n	800c312 <_strtod_l+0x8d2>
 800c30c:	3101      	adds	r1, #1
 800c30e:	f43f addf 	beq.w	800bed0 <_strtod_l+0x490>
 800c312:	4b23      	ldr	r3, [pc, #140]	; (800c3a0 <_strtod_l+0x960>)
 800c314:	403b      	ands	r3, r7
 800c316:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c31a:	f04f 0a00 	mov.w	sl, #0
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1a4      	bne.n	800c26e <_strtod_l+0x82e>
 800c324:	e5de      	b.n	800bee4 <_strtod_l+0x4a4>
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	e7ea      	b.n	800c302 <_strtod_l+0x8c2>
 800c32c:	4613      	mov	r3, r2
 800c32e:	e7e8      	b.n	800c302 <_strtod_l+0x8c2>
 800c330:	ea53 030a 	orrs.w	r3, r3, sl
 800c334:	d08c      	beq.n	800c250 <_strtod_l+0x810>
 800c336:	9b08      	ldr	r3, [sp, #32]
 800c338:	b1db      	cbz	r3, 800c372 <_strtod_l+0x932>
 800c33a:	423b      	tst	r3, r7
 800c33c:	d0ef      	beq.n	800c31e <_strtod_l+0x8de>
 800c33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c340:	9a04      	ldr	r2, [sp, #16]
 800c342:	4650      	mov	r0, sl
 800c344:	4659      	mov	r1, fp
 800c346:	b1c3      	cbz	r3, 800c37a <_strtod_l+0x93a>
 800c348:	f7ff fb5e 	bl	800ba08 <sulp>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	ec51 0b18 	vmov	r0, r1, d8
 800c354:	f7f3 ffba 	bl	80002cc <__adddf3>
 800c358:	4682      	mov	sl, r0
 800c35a:	468b      	mov	fp, r1
 800c35c:	e7df      	b.n	800c31e <_strtod_l+0x8de>
 800c35e:	4013      	ands	r3, r2
 800c360:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c364:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c368:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c36c:	f04f 3aff 	mov.w	sl, #4294967295
 800c370:	e7d5      	b.n	800c31e <_strtod_l+0x8de>
 800c372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c374:	ea13 0f0a 	tst.w	r3, sl
 800c378:	e7e0      	b.n	800c33c <_strtod_l+0x8fc>
 800c37a:	f7ff fb45 	bl	800ba08 <sulp>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	ec51 0b18 	vmov	r0, r1, d8
 800c386:	f7f3 ff9f 	bl	80002c8 <__aeabi_dsub>
 800c38a:	2200      	movs	r2, #0
 800c38c:	2300      	movs	r3, #0
 800c38e:	4682      	mov	sl, r0
 800c390:	468b      	mov	fp, r1
 800c392:	f7f4 fbb9 	bl	8000b08 <__aeabi_dcmpeq>
 800c396:	2800      	cmp	r0, #0
 800c398:	d0c1      	beq.n	800c31e <_strtod_l+0x8de>
 800c39a:	e611      	b.n	800bfc0 <_strtod_l+0x580>
 800c39c:	fffffc02 	.word	0xfffffc02
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	39500000 	.word	0x39500000
 800c3a8:	000fffff 	.word	0x000fffff
 800c3ac:	7fefffff 	.word	0x7fefffff
 800c3b0:	0800f6a0 	.word	0x0800f6a0
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f002 f832 	bl	800e420 <__ratio>
 800c3bc:	ec59 8b10 	vmov	r8, r9, d0
 800c3c0:	ee10 0a10 	vmov	r0, s0
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3ca:	4649      	mov	r1, r9
 800c3cc:	f7f4 fbb0 	bl	8000b30 <__aeabi_dcmple>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d07a      	beq.n	800c4ca <_strtod_l+0xa8a>
 800c3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d04a      	beq.n	800c470 <_strtod_l+0xa30>
 800c3da:	4b95      	ldr	r3, [pc, #596]	; (800c630 <_strtod_l+0xbf0>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c630 <_strtod_l+0xbf0>
 800c3e6:	f04f 0800 	mov.w	r8, #0
 800c3ea:	4b92      	ldr	r3, [pc, #584]	; (800c634 <_strtod_l+0xbf4>)
 800c3ec:	403b      	ands	r3, r7
 800c3ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3f2:	4b91      	ldr	r3, [pc, #580]	; (800c638 <_strtod_l+0xbf8>)
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	f040 80b0 	bne.w	800c55a <_strtod_l+0xb1a>
 800c3fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c402:	ec4b ab10 	vmov	d0, sl, fp
 800c406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c40a:	f001 ff31 	bl	800e270 <__ulp>
 800c40e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c412:	ec53 2b10 	vmov	r2, r3, d0
 800c416:	f7f4 f90f 	bl	8000638 <__aeabi_dmul>
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	f7f3 ff55 	bl	80002cc <__adddf3>
 800c422:	460b      	mov	r3, r1
 800c424:	4983      	ldr	r1, [pc, #524]	; (800c634 <_strtod_l+0xbf4>)
 800c426:	4a85      	ldr	r2, [pc, #532]	; (800c63c <_strtod_l+0xbfc>)
 800c428:	4019      	ands	r1, r3
 800c42a:	4291      	cmp	r1, r2
 800c42c:	4682      	mov	sl, r0
 800c42e:	d960      	bls.n	800c4f2 <_strtod_l+0xab2>
 800c430:	ee18 3a90 	vmov	r3, s17
 800c434:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c438:	4293      	cmp	r3, r2
 800c43a:	d104      	bne.n	800c446 <_strtod_l+0xa06>
 800c43c:	ee18 3a10 	vmov	r3, s16
 800c440:	3301      	adds	r3, #1
 800c442:	f43f ad45 	beq.w	800bed0 <_strtod_l+0x490>
 800c446:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c648 <_strtod_l+0xc08>
 800c44a:	f04f 3aff 	mov.w	sl, #4294967295
 800c44e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c450:	4620      	mov	r0, r4
 800c452:	f001 fbdb 	bl	800dc0c <_Bfree>
 800c456:	9905      	ldr	r1, [sp, #20]
 800c458:	4620      	mov	r0, r4
 800c45a:	f001 fbd7 	bl	800dc0c <_Bfree>
 800c45e:	4631      	mov	r1, r6
 800c460:	4620      	mov	r0, r4
 800c462:	f001 fbd3 	bl	800dc0c <_Bfree>
 800c466:	4629      	mov	r1, r5
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 fbcf 	bl	800dc0c <_Bfree>
 800c46e:	e61a      	b.n	800c0a6 <_strtod_l+0x666>
 800c470:	f1ba 0f00 	cmp.w	sl, #0
 800c474:	d11b      	bne.n	800c4ae <_strtod_l+0xa6e>
 800c476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c47a:	b9f3      	cbnz	r3, 800c4ba <_strtod_l+0xa7a>
 800c47c:	4b6c      	ldr	r3, [pc, #432]	; (800c630 <_strtod_l+0xbf0>)
 800c47e:	2200      	movs	r2, #0
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	f7f4 fb4a 	bl	8000b1c <__aeabi_dcmplt>
 800c488:	b9d0      	cbnz	r0, 800c4c0 <_strtod_l+0xa80>
 800c48a:	4640      	mov	r0, r8
 800c48c:	4649      	mov	r1, r9
 800c48e:	4b6c      	ldr	r3, [pc, #432]	; (800c640 <_strtod_l+0xc00>)
 800c490:	2200      	movs	r2, #0
 800c492:	f7f4 f8d1 	bl	8000638 <__aeabi_dmul>
 800c496:	4680      	mov	r8, r0
 800c498:	4689      	mov	r9, r1
 800c49a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c49e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c4a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c4a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c4a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4ac:	e79d      	b.n	800c3ea <_strtod_l+0x9aa>
 800c4ae:	f1ba 0f01 	cmp.w	sl, #1
 800c4b2:	d102      	bne.n	800c4ba <_strtod_l+0xa7a>
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	f43f ad83 	beq.w	800bfc0 <_strtod_l+0x580>
 800c4ba:	4b62      	ldr	r3, [pc, #392]	; (800c644 <_strtod_l+0xc04>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	e78e      	b.n	800c3de <_strtod_l+0x99e>
 800c4c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c640 <_strtod_l+0xc00>
 800c4c4:	f04f 0800 	mov.w	r8, #0
 800c4c8:	e7e7      	b.n	800c49a <_strtod_l+0xa5a>
 800c4ca:	4b5d      	ldr	r3, [pc, #372]	; (800c640 <_strtod_l+0xc00>)
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f7f4 f8b1 	bl	8000638 <__aeabi_dmul>
 800c4d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d8:	4680      	mov	r8, r0
 800c4da:	4689      	mov	r9, r1
 800c4dc:	b933      	cbnz	r3, 800c4ec <_strtod_l+0xaac>
 800c4de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4e2:	900e      	str	r0, [sp, #56]	; 0x38
 800c4e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c4ea:	e7dd      	b.n	800c4a8 <_strtod_l+0xa68>
 800c4ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c4f0:	e7f9      	b.n	800c4e6 <_strtod_l+0xaa6>
 800c4f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c4f6:	9b04      	ldr	r3, [sp, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1a8      	bne.n	800c44e <_strtod_l+0xa0e>
 800c4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c502:	0d1b      	lsrs	r3, r3, #20
 800c504:	051b      	lsls	r3, r3, #20
 800c506:	429a      	cmp	r2, r3
 800c508:	d1a1      	bne.n	800c44e <_strtod_l+0xa0e>
 800c50a:	4640      	mov	r0, r8
 800c50c:	4649      	mov	r1, r9
 800c50e:	f7f4 fbf3 	bl	8000cf8 <__aeabi_d2lz>
 800c512:	f7f4 f863 	bl	80005dc <__aeabi_l2d>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f3 fed3 	bl	80002c8 <__aeabi_dsub>
 800c522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c528:	ea43 030a 	orr.w	r3, r3, sl
 800c52c:	4313      	orrs	r3, r2
 800c52e:	4680      	mov	r8, r0
 800c530:	4689      	mov	r9, r1
 800c532:	d055      	beq.n	800c5e0 <_strtod_l+0xba0>
 800c534:	a336      	add	r3, pc, #216	; (adr r3, 800c610 <_strtod_l+0xbd0>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f4 faef 	bl	8000b1c <__aeabi_dcmplt>
 800c53e:	2800      	cmp	r0, #0
 800c540:	f47f acd0 	bne.w	800bee4 <_strtod_l+0x4a4>
 800c544:	a334      	add	r3, pc, #208	; (adr r3, 800c618 <_strtod_l+0xbd8>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f4 fb03 	bl	8000b58 <__aeabi_dcmpgt>
 800c552:	2800      	cmp	r0, #0
 800c554:	f43f af7b 	beq.w	800c44e <_strtod_l+0xa0e>
 800c558:	e4c4      	b.n	800bee4 <_strtod_l+0x4a4>
 800c55a:	9b04      	ldr	r3, [sp, #16]
 800c55c:	b333      	cbz	r3, 800c5ac <_strtod_l+0xb6c>
 800c55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c560:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c564:	d822      	bhi.n	800c5ac <_strtod_l+0xb6c>
 800c566:	a32e      	add	r3, pc, #184	; (adr r3, 800c620 <_strtod_l+0xbe0>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	4640      	mov	r0, r8
 800c56e:	4649      	mov	r1, r9
 800c570:	f7f4 fade 	bl	8000b30 <__aeabi_dcmple>
 800c574:	b1a0      	cbz	r0, 800c5a0 <_strtod_l+0xb60>
 800c576:	4649      	mov	r1, r9
 800c578:	4640      	mov	r0, r8
 800c57a:	f7f4 fb35 	bl	8000be8 <__aeabi_d2uiz>
 800c57e:	2801      	cmp	r0, #1
 800c580:	bf38      	it	cc
 800c582:	2001      	movcc	r0, #1
 800c584:	f7f3 ffde 	bl	8000544 <__aeabi_ui2d>
 800c588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c58a:	4680      	mov	r8, r0
 800c58c:	4689      	mov	r9, r1
 800c58e:	bb23      	cbnz	r3, 800c5da <_strtod_l+0xb9a>
 800c590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c594:	9010      	str	r0, [sp, #64]	; 0x40
 800c596:	9311      	str	r3, [sp, #68]	; 0x44
 800c598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c59c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c5b4:	eef0 0a68 	vmov.f32	s1, s17
 800c5b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5bc:	f001 fe58 	bl	800e270 <__ulp>
 800c5c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5c4:	ec53 2b10 	vmov	r2, r3, d0
 800c5c8:	f7f4 f836 	bl	8000638 <__aeabi_dmul>
 800c5cc:	ec53 2b18 	vmov	r2, r3, d8
 800c5d0:	f7f3 fe7c 	bl	80002cc <__adddf3>
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	468b      	mov	fp, r1
 800c5d8:	e78d      	b.n	800c4f6 <_strtod_l+0xab6>
 800c5da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c5de:	e7db      	b.n	800c598 <_strtod_l+0xb58>
 800c5e0:	a311      	add	r3, pc, #68	; (adr r3, 800c628 <_strtod_l+0xbe8>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f4 fa99 	bl	8000b1c <__aeabi_dcmplt>
 800c5ea:	e7b2      	b.n	800c552 <_strtod_l+0xb12>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c5f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	f7ff ba6b 	b.w	800bad0 <_strtod_l+0x90>
 800c5fa:	2a65      	cmp	r2, #101	; 0x65
 800c5fc:	f43f ab5f 	beq.w	800bcbe <_strtod_l+0x27e>
 800c600:	2a45      	cmp	r2, #69	; 0x45
 800c602:	f43f ab5c 	beq.w	800bcbe <_strtod_l+0x27e>
 800c606:	2301      	movs	r3, #1
 800c608:	f7ff bb94 	b.w	800bd34 <_strtod_l+0x2f4>
 800c60c:	f3af 8000 	nop.w
 800c610:	94a03595 	.word	0x94a03595
 800c614:	3fdfffff 	.word	0x3fdfffff
 800c618:	35afe535 	.word	0x35afe535
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	ffc00000 	.word	0xffc00000
 800c624:	41dfffff 	.word	0x41dfffff
 800c628:	94a03595 	.word	0x94a03595
 800c62c:	3fcfffff 	.word	0x3fcfffff
 800c630:	3ff00000 	.word	0x3ff00000
 800c634:	7ff00000 	.word	0x7ff00000
 800c638:	7fe00000 	.word	0x7fe00000
 800c63c:	7c9fffff 	.word	0x7c9fffff
 800c640:	3fe00000 	.word	0x3fe00000
 800c644:	bff00000 	.word	0xbff00000
 800c648:	7fefffff 	.word	0x7fefffff

0800c64c <_strtod_r>:
 800c64c:	4b01      	ldr	r3, [pc, #4]	; (800c654 <_strtod_r+0x8>)
 800c64e:	f7ff b9f7 	b.w	800ba40 <_strtod_l>
 800c652:	bf00      	nop
 800c654:	20000174 	.word	0x20000174

0800c658 <_strtol_l.constprop.0>:
 800c658:	2b01      	cmp	r3, #1
 800c65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c65e:	d001      	beq.n	800c664 <_strtol_l.constprop.0+0xc>
 800c660:	2b24      	cmp	r3, #36	; 0x24
 800c662:	d906      	bls.n	800c672 <_strtol_l.constprop.0+0x1a>
 800c664:	f7fe fafe 	bl	800ac64 <__errno>
 800c668:	2316      	movs	r3, #22
 800c66a:	6003      	str	r3, [r0, #0]
 800c66c:	2000      	movs	r0, #0
 800c66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c672:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c758 <_strtol_l.constprop.0+0x100>
 800c676:	460d      	mov	r5, r1
 800c678:	462e      	mov	r6, r5
 800c67a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c67e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c682:	f017 0708 	ands.w	r7, r7, #8
 800c686:	d1f7      	bne.n	800c678 <_strtol_l.constprop.0+0x20>
 800c688:	2c2d      	cmp	r4, #45	; 0x2d
 800c68a:	d132      	bne.n	800c6f2 <_strtol_l.constprop.0+0x9a>
 800c68c:	782c      	ldrb	r4, [r5, #0]
 800c68e:	2701      	movs	r7, #1
 800c690:	1cb5      	adds	r5, r6, #2
 800c692:	2b00      	cmp	r3, #0
 800c694:	d05b      	beq.n	800c74e <_strtol_l.constprop.0+0xf6>
 800c696:	2b10      	cmp	r3, #16
 800c698:	d109      	bne.n	800c6ae <_strtol_l.constprop.0+0x56>
 800c69a:	2c30      	cmp	r4, #48	; 0x30
 800c69c:	d107      	bne.n	800c6ae <_strtol_l.constprop.0+0x56>
 800c69e:	782c      	ldrb	r4, [r5, #0]
 800c6a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c6a4:	2c58      	cmp	r4, #88	; 0x58
 800c6a6:	d14d      	bne.n	800c744 <_strtol_l.constprop.0+0xec>
 800c6a8:	786c      	ldrb	r4, [r5, #1]
 800c6aa:	2310      	movs	r3, #16
 800c6ac:	3502      	adds	r5, #2
 800c6ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c6b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6b6:	f04f 0c00 	mov.w	ip, #0
 800c6ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800c6be:	4666      	mov	r6, ip
 800c6c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c6c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c6c8:	f1be 0f09 	cmp.w	lr, #9
 800c6cc:	d816      	bhi.n	800c6fc <_strtol_l.constprop.0+0xa4>
 800c6ce:	4674      	mov	r4, lr
 800c6d0:	42a3      	cmp	r3, r4
 800c6d2:	dd24      	ble.n	800c71e <_strtol_l.constprop.0+0xc6>
 800c6d4:	f1bc 0f00 	cmp.w	ip, #0
 800c6d8:	db1e      	blt.n	800c718 <_strtol_l.constprop.0+0xc0>
 800c6da:	45b1      	cmp	r9, r6
 800c6dc:	d31c      	bcc.n	800c718 <_strtol_l.constprop.0+0xc0>
 800c6de:	d101      	bne.n	800c6e4 <_strtol_l.constprop.0+0x8c>
 800c6e0:	45a2      	cmp	sl, r4
 800c6e2:	db19      	blt.n	800c718 <_strtol_l.constprop.0+0xc0>
 800c6e4:	fb06 4603 	mla	r6, r6, r3, r4
 800c6e8:	f04f 0c01 	mov.w	ip, #1
 800c6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6f0:	e7e8      	b.n	800c6c4 <_strtol_l.constprop.0+0x6c>
 800c6f2:	2c2b      	cmp	r4, #43	; 0x2b
 800c6f4:	bf04      	itt	eq
 800c6f6:	782c      	ldrbeq	r4, [r5, #0]
 800c6f8:	1cb5      	addeq	r5, r6, #2
 800c6fa:	e7ca      	b.n	800c692 <_strtol_l.constprop.0+0x3a>
 800c6fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c700:	f1be 0f19 	cmp.w	lr, #25
 800c704:	d801      	bhi.n	800c70a <_strtol_l.constprop.0+0xb2>
 800c706:	3c37      	subs	r4, #55	; 0x37
 800c708:	e7e2      	b.n	800c6d0 <_strtol_l.constprop.0+0x78>
 800c70a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c70e:	f1be 0f19 	cmp.w	lr, #25
 800c712:	d804      	bhi.n	800c71e <_strtol_l.constprop.0+0xc6>
 800c714:	3c57      	subs	r4, #87	; 0x57
 800c716:	e7db      	b.n	800c6d0 <_strtol_l.constprop.0+0x78>
 800c718:	f04f 3cff 	mov.w	ip, #4294967295
 800c71c:	e7e6      	b.n	800c6ec <_strtol_l.constprop.0+0x94>
 800c71e:	f1bc 0f00 	cmp.w	ip, #0
 800c722:	da05      	bge.n	800c730 <_strtol_l.constprop.0+0xd8>
 800c724:	2322      	movs	r3, #34	; 0x22
 800c726:	6003      	str	r3, [r0, #0]
 800c728:	4646      	mov	r6, r8
 800c72a:	b942      	cbnz	r2, 800c73e <_strtol_l.constprop.0+0xe6>
 800c72c:	4630      	mov	r0, r6
 800c72e:	e79e      	b.n	800c66e <_strtol_l.constprop.0+0x16>
 800c730:	b107      	cbz	r7, 800c734 <_strtol_l.constprop.0+0xdc>
 800c732:	4276      	negs	r6, r6
 800c734:	2a00      	cmp	r2, #0
 800c736:	d0f9      	beq.n	800c72c <_strtol_l.constprop.0+0xd4>
 800c738:	f1bc 0f00 	cmp.w	ip, #0
 800c73c:	d000      	beq.n	800c740 <_strtol_l.constprop.0+0xe8>
 800c73e:	1e69      	subs	r1, r5, #1
 800c740:	6011      	str	r1, [r2, #0]
 800c742:	e7f3      	b.n	800c72c <_strtol_l.constprop.0+0xd4>
 800c744:	2430      	movs	r4, #48	; 0x30
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1b1      	bne.n	800c6ae <_strtol_l.constprop.0+0x56>
 800c74a:	2308      	movs	r3, #8
 800c74c:	e7af      	b.n	800c6ae <_strtol_l.constprop.0+0x56>
 800c74e:	2c30      	cmp	r4, #48	; 0x30
 800c750:	d0a5      	beq.n	800c69e <_strtol_l.constprop.0+0x46>
 800c752:	230a      	movs	r3, #10
 800c754:	e7ab      	b.n	800c6ae <_strtol_l.constprop.0+0x56>
 800c756:	bf00      	nop
 800c758:	0800f6c9 	.word	0x0800f6c9

0800c75c <_strtol_r>:
 800c75c:	f7ff bf7c 	b.w	800c658 <_strtol_l.constprop.0>

0800c760 <quorem>:
 800c760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	6903      	ldr	r3, [r0, #16]
 800c766:	690c      	ldr	r4, [r1, #16]
 800c768:	42a3      	cmp	r3, r4
 800c76a:	4607      	mov	r7, r0
 800c76c:	f2c0 8081 	blt.w	800c872 <quorem+0x112>
 800c770:	3c01      	subs	r4, #1
 800c772:	f101 0814 	add.w	r8, r1, #20
 800c776:	f100 0514 	add.w	r5, r0, #20
 800c77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c788:	3301      	adds	r3, #1
 800c78a:	429a      	cmp	r2, r3
 800c78c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c790:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c794:	fbb2 f6f3 	udiv	r6, r2, r3
 800c798:	d331      	bcc.n	800c7fe <quorem+0x9e>
 800c79a:	f04f 0e00 	mov.w	lr, #0
 800c79e:	4640      	mov	r0, r8
 800c7a0:	46ac      	mov	ip, r5
 800c7a2:	46f2      	mov	sl, lr
 800c7a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7a8:	b293      	uxth	r3, r2
 800c7aa:	fb06 e303 	mla	r3, r6, r3, lr
 800c7ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	ebaa 0303 	sub.w	r3, sl, r3
 800c7b8:	f8dc a000 	ldr.w	sl, [ip]
 800c7bc:	0c12      	lsrs	r2, r2, #16
 800c7be:	fa13 f38a 	uxtah	r3, r3, sl
 800c7c2:	fb06 e202 	mla	r2, r6, r2, lr
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	9b00      	ldr	r3, [sp, #0]
 800c7ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7ce:	b292      	uxth	r2, r2
 800c7d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c7d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c7d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c7dc:	4581      	cmp	r9, r0
 800c7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7e2:	f84c 3b04 	str.w	r3, [ip], #4
 800c7e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c7ea:	d2db      	bcs.n	800c7a4 <quorem+0x44>
 800c7ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800c7f0:	b92b      	cbnz	r3, 800c7fe <quorem+0x9e>
 800c7f2:	9b01      	ldr	r3, [sp, #4]
 800c7f4:	3b04      	subs	r3, #4
 800c7f6:	429d      	cmp	r5, r3
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	d32e      	bcc.n	800c85a <quorem+0xfa>
 800c7fc:	613c      	str	r4, [r7, #16]
 800c7fe:	4638      	mov	r0, r7
 800c800:	f001 fc90 	bl	800e124 <__mcmp>
 800c804:	2800      	cmp	r0, #0
 800c806:	db24      	blt.n	800c852 <quorem+0xf2>
 800c808:	3601      	adds	r6, #1
 800c80a:	4628      	mov	r0, r5
 800c80c:	f04f 0c00 	mov.w	ip, #0
 800c810:	f858 2b04 	ldr.w	r2, [r8], #4
 800c814:	f8d0 e000 	ldr.w	lr, [r0]
 800c818:	b293      	uxth	r3, r2
 800c81a:	ebac 0303 	sub.w	r3, ip, r3
 800c81e:	0c12      	lsrs	r2, r2, #16
 800c820:	fa13 f38e 	uxtah	r3, r3, lr
 800c824:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c832:	45c1      	cmp	r9, r8
 800c834:	f840 3b04 	str.w	r3, [r0], #4
 800c838:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c83c:	d2e8      	bcs.n	800c810 <quorem+0xb0>
 800c83e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c846:	b922      	cbnz	r2, 800c852 <quorem+0xf2>
 800c848:	3b04      	subs	r3, #4
 800c84a:	429d      	cmp	r5, r3
 800c84c:	461a      	mov	r2, r3
 800c84e:	d30a      	bcc.n	800c866 <quorem+0x106>
 800c850:	613c      	str	r4, [r7, #16]
 800c852:	4630      	mov	r0, r6
 800c854:	b003      	add	sp, #12
 800c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85a:	6812      	ldr	r2, [r2, #0]
 800c85c:	3b04      	subs	r3, #4
 800c85e:	2a00      	cmp	r2, #0
 800c860:	d1cc      	bne.n	800c7fc <quorem+0x9c>
 800c862:	3c01      	subs	r4, #1
 800c864:	e7c7      	b.n	800c7f6 <quorem+0x96>
 800c866:	6812      	ldr	r2, [r2, #0]
 800c868:	3b04      	subs	r3, #4
 800c86a:	2a00      	cmp	r2, #0
 800c86c:	d1f0      	bne.n	800c850 <quorem+0xf0>
 800c86e:	3c01      	subs	r4, #1
 800c870:	e7eb      	b.n	800c84a <quorem+0xea>
 800c872:	2000      	movs	r0, #0
 800c874:	e7ee      	b.n	800c854 <quorem+0xf4>
	...

0800c878 <_dtoa_r>:
 800c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	ed2d 8b04 	vpush	{d8-d9}
 800c880:	ec57 6b10 	vmov	r6, r7, d0
 800c884:	b093      	sub	sp, #76	; 0x4c
 800c886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c88c:	9106      	str	r1, [sp, #24]
 800c88e:	ee10 aa10 	vmov	sl, s0
 800c892:	4604      	mov	r4, r0
 800c894:	9209      	str	r2, [sp, #36]	; 0x24
 800c896:	930c      	str	r3, [sp, #48]	; 0x30
 800c898:	46bb      	mov	fp, r7
 800c89a:	b975      	cbnz	r5, 800c8ba <_dtoa_r+0x42>
 800c89c:	2010      	movs	r0, #16
 800c89e:	f001 f94d 	bl	800db3c <malloc>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c8a6:	b920      	cbnz	r0, 800c8b2 <_dtoa_r+0x3a>
 800c8a8:	4ba7      	ldr	r3, [pc, #668]	; (800cb48 <_dtoa_r+0x2d0>)
 800c8aa:	21ea      	movs	r1, #234	; 0xea
 800c8ac:	48a7      	ldr	r0, [pc, #668]	; (800cb4c <_dtoa_r+0x2d4>)
 800c8ae:	f002 f8bd 	bl	800ea2c <__assert_func>
 800c8b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8b6:	6005      	str	r5, [r0, #0]
 800c8b8:	60c5      	str	r5, [r0, #12]
 800c8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8bc:	6819      	ldr	r1, [r3, #0]
 800c8be:	b151      	cbz	r1, 800c8d6 <_dtoa_r+0x5e>
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	604a      	str	r2, [r1, #4]
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	4093      	lsls	r3, r2
 800c8c8:	608b      	str	r3, [r1, #8]
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f001 f99e 	bl	800dc0c <_Bfree>
 800c8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	1e3b      	subs	r3, r7, #0
 800c8d8:	bfaa      	itet	ge
 800c8da:	2300      	movge	r3, #0
 800c8dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c8e0:	f8c8 3000 	strge.w	r3, [r8]
 800c8e4:	4b9a      	ldr	r3, [pc, #616]	; (800cb50 <_dtoa_r+0x2d8>)
 800c8e6:	bfbc      	itt	lt
 800c8e8:	2201      	movlt	r2, #1
 800c8ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c8ee:	ea33 030b 	bics.w	r3, r3, fp
 800c8f2:	d11b      	bne.n	800c92c <_dtoa_r+0xb4>
 800c8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c8fa:	6013      	str	r3, [r2, #0]
 800c8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c900:	4333      	orrs	r3, r6
 800c902:	f000 8592 	beq.w	800d42a <_dtoa_r+0xbb2>
 800c906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c908:	b963      	cbnz	r3, 800c924 <_dtoa_r+0xac>
 800c90a:	4b92      	ldr	r3, [pc, #584]	; (800cb54 <_dtoa_r+0x2dc>)
 800c90c:	e022      	b.n	800c954 <_dtoa_r+0xdc>
 800c90e:	4b92      	ldr	r3, [pc, #584]	; (800cb58 <_dtoa_r+0x2e0>)
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	3308      	adds	r3, #8
 800c914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c916:	6013      	str	r3, [r2, #0]
 800c918:	9801      	ldr	r0, [sp, #4]
 800c91a:	b013      	add	sp, #76	; 0x4c
 800c91c:	ecbd 8b04 	vpop	{d8-d9}
 800c920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	4b8b      	ldr	r3, [pc, #556]	; (800cb54 <_dtoa_r+0x2dc>)
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	3303      	adds	r3, #3
 800c92a:	e7f3      	b.n	800c914 <_dtoa_r+0x9c>
 800c92c:	2200      	movs	r2, #0
 800c92e:	2300      	movs	r3, #0
 800c930:	4650      	mov	r0, sl
 800c932:	4659      	mov	r1, fp
 800c934:	f7f4 f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 800c938:	ec4b ab19 	vmov	d9, sl, fp
 800c93c:	4680      	mov	r8, r0
 800c93e:	b158      	cbz	r0, 800c958 <_dtoa_r+0xe0>
 800c940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c942:	2301      	movs	r3, #1
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 856b 	beq.w	800d424 <_dtoa_r+0xbac>
 800c94e:	4883      	ldr	r0, [pc, #524]	; (800cb5c <_dtoa_r+0x2e4>)
 800c950:	6018      	str	r0, [r3, #0]
 800c952:	1e43      	subs	r3, r0, #1
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	e7df      	b.n	800c918 <_dtoa_r+0xa0>
 800c958:	ec4b ab10 	vmov	d0, sl, fp
 800c95c:	aa10      	add	r2, sp, #64	; 0x40
 800c95e:	a911      	add	r1, sp, #68	; 0x44
 800c960:	4620      	mov	r0, r4
 800c962:	f001 fd01 	bl	800e368 <__d2b>
 800c966:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c96a:	ee08 0a10 	vmov	s16, r0
 800c96e:	2d00      	cmp	r5, #0
 800c970:	f000 8084 	beq.w	800ca7c <_dtoa_r+0x204>
 800c974:	ee19 3a90 	vmov	r3, s19
 800c978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c97c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c980:	4656      	mov	r6, sl
 800c982:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c98a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c98e:	4b74      	ldr	r3, [pc, #464]	; (800cb60 <_dtoa_r+0x2e8>)
 800c990:	2200      	movs	r2, #0
 800c992:	4630      	mov	r0, r6
 800c994:	4639      	mov	r1, r7
 800c996:	f7f3 fc97 	bl	80002c8 <__aeabi_dsub>
 800c99a:	a365      	add	r3, pc, #404	; (adr r3, 800cb30 <_dtoa_r+0x2b8>)
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	f7f3 fe4a 	bl	8000638 <__aeabi_dmul>
 800c9a4:	a364      	add	r3, pc, #400	; (adr r3, 800cb38 <_dtoa_r+0x2c0>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f7f3 fc8f 	bl	80002cc <__adddf3>
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	460f      	mov	r7, r1
 800c9b4:	f7f3 fdd6 	bl	8000564 <__aeabi_i2d>
 800c9b8:	a361      	add	r3, pc, #388	; (adr r3, 800cb40 <_dtoa_r+0x2c8>)
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	f7f3 fe3b 	bl	8000638 <__aeabi_dmul>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	4639      	mov	r1, r7
 800c9ca:	f7f3 fc7f 	bl	80002cc <__adddf3>
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	460f      	mov	r7, r1
 800c9d2:	f7f4 f8e1 	bl	8000b98 <__aeabi_d2iz>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	9000      	str	r0, [sp, #0]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4630      	mov	r0, r6
 800c9de:	4639      	mov	r1, r7
 800c9e0:	f7f4 f89c 	bl	8000b1c <__aeabi_dcmplt>
 800c9e4:	b150      	cbz	r0, 800c9fc <_dtoa_r+0x184>
 800c9e6:	9800      	ldr	r0, [sp, #0]
 800c9e8:	f7f3 fdbc 	bl	8000564 <__aeabi_i2d>
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	f7f4 f88a 	bl	8000b08 <__aeabi_dcmpeq>
 800c9f4:	b910      	cbnz	r0, 800c9fc <_dtoa_r+0x184>
 800c9f6:	9b00      	ldr	r3, [sp, #0]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	9b00      	ldr	r3, [sp, #0]
 800c9fe:	2b16      	cmp	r3, #22
 800ca00:	d85a      	bhi.n	800cab8 <_dtoa_r+0x240>
 800ca02:	9a00      	ldr	r2, [sp, #0]
 800ca04:	4b57      	ldr	r3, [pc, #348]	; (800cb64 <_dtoa_r+0x2ec>)
 800ca06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	ec51 0b19 	vmov	r0, r1, d9
 800ca12:	f7f4 f883 	bl	8000b1c <__aeabi_dcmplt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d050      	beq.n	800cabc <_dtoa_r+0x244>
 800ca1a:	9b00      	ldr	r3, [sp, #0]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	2300      	movs	r3, #0
 800ca22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca26:	1b5d      	subs	r5, r3, r5
 800ca28:	1e6b      	subs	r3, r5, #1
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	bf45      	ittet	mi
 800ca2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ca32:	9304      	strmi	r3, [sp, #16]
 800ca34:	2300      	movpl	r3, #0
 800ca36:	2300      	movmi	r3, #0
 800ca38:	bf4c      	ite	mi
 800ca3a:	9305      	strmi	r3, [sp, #20]
 800ca3c:	9304      	strpl	r3, [sp, #16]
 800ca3e:	9b00      	ldr	r3, [sp, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	db3d      	blt.n	800cac0 <_dtoa_r+0x248>
 800ca44:	9b05      	ldr	r3, [sp, #20]
 800ca46:	9a00      	ldr	r2, [sp, #0]
 800ca48:	920a      	str	r2, [sp, #40]	; 0x28
 800ca4a:	4413      	add	r3, r2
 800ca4c:	9305      	str	r3, [sp, #20]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9307      	str	r3, [sp, #28]
 800ca52:	9b06      	ldr	r3, [sp, #24]
 800ca54:	2b09      	cmp	r3, #9
 800ca56:	f200 8089 	bhi.w	800cb6c <_dtoa_r+0x2f4>
 800ca5a:	2b05      	cmp	r3, #5
 800ca5c:	bfc4      	itt	gt
 800ca5e:	3b04      	subgt	r3, #4
 800ca60:	9306      	strgt	r3, [sp, #24]
 800ca62:	9b06      	ldr	r3, [sp, #24]
 800ca64:	f1a3 0302 	sub.w	r3, r3, #2
 800ca68:	bfcc      	ite	gt
 800ca6a:	2500      	movgt	r5, #0
 800ca6c:	2501      	movle	r5, #1
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	f200 8087 	bhi.w	800cb82 <_dtoa_r+0x30a>
 800ca74:	e8df f003 	tbb	[pc, r3]
 800ca78:	59383a2d 	.word	0x59383a2d
 800ca7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ca80:	441d      	add	r5, r3
 800ca82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ca86:	2b20      	cmp	r3, #32
 800ca88:	bfc1      	itttt	gt
 800ca8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ca8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ca92:	fa0b f303 	lslgt.w	r3, fp, r3
 800ca96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ca9a:	bfda      	itte	le
 800ca9c:	f1c3 0320 	rsble	r3, r3, #32
 800caa0:	fa06 f003 	lslle.w	r0, r6, r3
 800caa4:	4318      	orrgt	r0, r3
 800caa6:	f7f3 fd4d 	bl	8000544 <__aeabi_ui2d>
 800caaa:	2301      	movs	r3, #1
 800caac:	4606      	mov	r6, r0
 800caae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cab2:	3d01      	subs	r5, #1
 800cab4:	930e      	str	r3, [sp, #56]	; 0x38
 800cab6:	e76a      	b.n	800c98e <_dtoa_r+0x116>
 800cab8:	2301      	movs	r3, #1
 800caba:	e7b2      	b.n	800ca22 <_dtoa_r+0x1aa>
 800cabc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cabe:	e7b1      	b.n	800ca24 <_dtoa_r+0x1ac>
 800cac0:	9b04      	ldr	r3, [sp, #16]
 800cac2:	9a00      	ldr	r2, [sp, #0]
 800cac4:	1a9b      	subs	r3, r3, r2
 800cac6:	9304      	str	r3, [sp, #16]
 800cac8:	4253      	negs	r3, r2
 800caca:	9307      	str	r3, [sp, #28]
 800cacc:	2300      	movs	r3, #0
 800cace:	930a      	str	r3, [sp, #40]	; 0x28
 800cad0:	e7bf      	b.n	800ca52 <_dtoa_r+0x1da>
 800cad2:	2300      	movs	r3, #0
 800cad4:	9308      	str	r3, [sp, #32]
 800cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dc55      	bgt.n	800cb88 <_dtoa_r+0x310>
 800cadc:	2301      	movs	r3, #1
 800cade:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cae2:	461a      	mov	r2, r3
 800cae4:	9209      	str	r2, [sp, #36]	; 0x24
 800cae6:	e00c      	b.n	800cb02 <_dtoa_r+0x28a>
 800cae8:	2301      	movs	r3, #1
 800caea:	e7f3      	b.n	800cad4 <_dtoa_r+0x25c>
 800caec:	2300      	movs	r3, #0
 800caee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf0:	9308      	str	r3, [sp, #32]
 800caf2:	9b00      	ldr	r3, [sp, #0]
 800caf4:	4413      	add	r3, r2
 800caf6:	9302      	str	r3, [sp, #8]
 800caf8:	3301      	adds	r3, #1
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	9303      	str	r3, [sp, #12]
 800cafe:	bfb8      	it	lt
 800cb00:	2301      	movlt	r3, #1
 800cb02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cb04:	2200      	movs	r2, #0
 800cb06:	6042      	str	r2, [r0, #4]
 800cb08:	2204      	movs	r2, #4
 800cb0a:	f102 0614 	add.w	r6, r2, #20
 800cb0e:	429e      	cmp	r6, r3
 800cb10:	6841      	ldr	r1, [r0, #4]
 800cb12:	d93d      	bls.n	800cb90 <_dtoa_r+0x318>
 800cb14:	4620      	mov	r0, r4
 800cb16:	f001 f839 	bl	800db8c <_Balloc>
 800cb1a:	9001      	str	r0, [sp, #4]
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d13b      	bne.n	800cb98 <_dtoa_r+0x320>
 800cb20:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <_dtoa_r+0x2f0>)
 800cb22:	4602      	mov	r2, r0
 800cb24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb28:	e6c0      	b.n	800c8ac <_dtoa_r+0x34>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e7df      	b.n	800caee <_dtoa_r+0x276>
 800cb2e:	bf00      	nop
 800cb30:	636f4361 	.word	0x636f4361
 800cb34:	3fd287a7 	.word	0x3fd287a7
 800cb38:	8b60c8b3 	.word	0x8b60c8b3
 800cb3c:	3fc68a28 	.word	0x3fc68a28
 800cb40:	509f79fb 	.word	0x509f79fb
 800cb44:	3fd34413 	.word	0x3fd34413
 800cb48:	0800f7d6 	.word	0x0800f7d6
 800cb4c:	0800f7ed 	.word	0x0800f7ed
 800cb50:	7ff00000 	.word	0x7ff00000
 800cb54:	0800f7d2 	.word	0x0800f7d2
 800cb58:	0800f7c9 	.word	0x0800f7c9
 800cb5c:	0800f64d 	.word	0x0800f64d
 800cb60:	3ff80000 	.word	0x3ff80000
 800cb64:	0800f958 	.word	0x0800f958
 800cb68:	0800f848 	.word	0x0800f848
 800cb6c:	2501      	movs	r5, #1
 800cb6e:	2300      	movs	r3, #0
 800cb70:	9306      	str	r3, [sp, #24]
 800cb72:	9508      	str	r5, [sp, #32]
 800cb74:	f04f 33ff 	mov.w	r3, #4294967295
 800cb78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	2312      	movs	r3, #18
 800cb80:	e7b0      	b.n	800cae4 <_dtoa_r+0x26c>
 800cb82:	2301      	movs	r3, #1
 800cb84:	9308      	str	r3, [sp, #32]
 800cb86:	e7f5      	b.n	800cb74 <_dtoa_r+0x2fc>
 800cb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb8e:	e7b8      	b.n	800cb02 <_dtoa_r+0x28a>
 800cb90:	3101      	adds	r1, #1
 800cb92:	6041      	str	r1, [r0, #4]
 800cb94:	0052      	lsls	r2, r2, #1
 800cb96:	e7b8      	b.n	800cb0a <_dtoa_r+0x292>
 800cb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb9a:	9a01      	ldr	r2, [sp, #4]
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	2b0e      	cmp	r3, #14
 800cba2:	f200 809d 	bhi.w	800cce0 <_dtoa_r+0x468>
 800cba6:	2d00      	cmp	r5, #0
 800cba8:	f000 809a 	beq.w	800cce0 <_dtoa_r+0x468>
 800cbac:	9b00      	ldr	r3, [sp, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dd32      	ble.n	800cc18 <_dtoa_r+0x3a0>
 800cbb2:	4ab7      	ldr	r2, [pc, #732]	; (800ce90 <_dtoa_r+0x618>)
 800cbb4:	f003 030f 	and.w	r3, r3, #15
 800cbb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cbbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbc0:	9b00      	ldr	r3, [sp, #0]
 800cbc2:	05d8      	lsls	r0, r3, #23
 800cbc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cbc8:	d516      	bpl.n	800cbf8 <_dtoa_r+0x380>
 800cbca:	4bb2      	ldr	r3, [pc, #712]	; (800ce94 <_dtoa_r+0x61c>)
 800cbcc:	ec51 0b19 	vmov	r0, r1, d9
 800cbd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbd4:	f7f3 fe5a 	bl	800088c <__aeabi_ddiv>
 800cbd8:	f007 070f 	and.w	r7, r7, #15
 800cbdc:	4682      	mov	sl, r0
 800cbde:	468b      	mov	fp, r1
 800cbe0:	2503      	movs	r5, #3
 800cbe2:	4eac      	ldr	r6, [pc, #688]	; (800ce94 <_dtoa_r+0x61c>)
 800cbe4:	b957      	cbnz	r7, 800cbfc <_dtoa_r+0x384>
 800cbe6:	4642      	mov	r2, r8
 800cbe8:	464b      	mov	r3, r9
 800cbea:	4650      	mov	r0, sl
 800cbec:	4659      	mov	r1, fp
 800cbee:	f7f3 fe4d 	bl	800088c <__aeabi_ddiv>
 800cbf2:	4682      	mov	sl, r0
 800cbf4:	468b      	mov	fp, r1
 800cbf6:	e028      	b.n	800cc4a <_dtoa_r+0x3d2>
 800cbf8:	2502      	movs	r5, #2
 800cbfa:	e7f2      	b.n	800cbe2 <_dtoa_r+0x36a>
 800cbfc:	07f9      	lsls	r1, r7, #31
 800cbfe:	d508      	bpl.n	800cc12 <_dtoa_r+0x39a>
 800cc00:	4640      	mov	r0, r8
 800cc02:	4649      	mov	r1, r9
 800cc04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc08:	f7f3 fd16 	bl	8000638 <__aeabi_dmul>
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	4680      	mov	r8, r0
 800cc10:	4689      	mov	r9, r1
 800cc12:	107f      	asrs	r7, r7, #1
 800cc14:	3608      	adds	r6, #8
 800cc16:	e7e5      	b.n	800cbe4 <_dtoa_r+0x36c>
 800cc18:	f000 809b 	beq.w	800cd52 <_dtoa_r+0x4da>
 800cc1c:	9b00      	ldr	r3, [sp, #0]
 800cc1e:	4f9d      	ldr	r7, [pc, #628]	; (800ce94 <_dtoa_r+0x61c>)
 800cc20:	425e      	negs	r6, r3
 800cc22:	4b9b      	ldr	r3, [pc, #620]	; (800ce90 <_dtoa_r+0x618>)
 800cc24:	f006 020f 	and.w	r2, r6, #15
 800cc28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	ec51 0b19 	vmov	r0, r1, d9
 800cc34:	f7f3 fd00 	bl	8000638 <__aeabi_dmul>
 800cc38:	1136      	asrs	r6, r6, #4
 800cc3a:	4682      	mov	sl, r0
 800cc3c:	468b      	mov	fp, r1
 800cc3e:	2300      	movs	r3, #0
 800cc40:	2502      	movs	r5, #2
 800cc42:	2e00      	cmp	r6, #0
 800cc44:	d17a      	bne.n	800cd3c <_dtoa_r+0x4c4>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1d3      	bne.n	800cbf2 <_dtoa_r+0x37a>
 800cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f000 8082 	beq.w	800cd56 <_dtoa_r+0x4de>
 800cc52:	4b91      	ldr	r3, [pc, #580]	; (800ce98 <_dtoa_r+0x620>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	4650      	mov	r0, sl
 800cc58:	4659      	mov	r1, fp
 800cc5a:	f7f3 ff5f 	bl	8000b1c <__aeabi_dcmplt>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d079      	beq.n	800cd56 <_dtoa_r+0x4de>
 800cc62:	9b03      	ldr	r3, [sp, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d076      	beq.n	800cd56 <_dtoa_r+0x4de>
 800cc68:	9b02      	ldr	r3, [sp, #8]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	dd36      	ble.n	800ccdc <_dtoa_r+0x464>
 800cc6e:	9b00      	ldr	r3, [sp, #0]
 800cc70:	4650      	mov	r0, sl
 800cc72:	4659      	mov	r1, fp
 800cc74:	1e5f      	subs	r7, r3, #1
 800cc76:	2200      	movs	r2, #0
 800cc78:	4b88      	ldr	r3, [pc, #544]	; (800ce9c <_dtoa_r+0x624>)
 800cc7a:	f7f3 fcdd 	bl	8000638 <__aeabi_dmul>
 800cc7e:	9e02      	ldr	r6, [sp, #8]
 800cc80:	4682      	mov	sl, r0
 800cc82:	468b      	mov	fp, r1
 800cc84:	3501      	adds	r5, #1
 800cc86:	4628      	mov	r0, r5
 800cc88:	f7f3 fc6c 	bl	8000564 <__aeabi_i2d>
 800cc8c:	4652      	mov	r2, sl
 800cc8e:	465b      	mov	r3, fp
 800cc90:	f7f3 fcd2 	bl	8000638 <__aeabi_dmul>
 800cc94:	4b82      	ldr	r3, [pc, #520]	; (800cea0 <_dtoa_r+0x628>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	f7f3 fb18 	bl	80002cc <__adddf3>
 800cc9c:	46d0      	mov	r8, sl
 800cc9e:	46d9      	mov	r9, fp
 800cca0:	4682      	mov	sl, r0
 800cca2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	d158      	bne.n	800cd5c <_dtoa_r+0x4e4>
 800ccaa:	4b7e      	ldr	r3, [pc, #504]	; (800cea4 <_dtoa_r+0x62c>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	4640      	mov	r0, r8
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	f7f3 fb09 	bl	80002c8 <__aeabi_dsub>
 800ccb6:	4652      	mov	r2, sl
 800ccb8:	465b      	mov	r3, fp
 800ccba:	4680      	mov	r8, r0
 800ccbc:	4689      	mov	r9, r1
 800ccbe:	f7f3 ff4b 	bl	8000b58 <__aeabi_dcmpgt>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	f040 8295 	bne.w	800d1f2 <_dtoa_r+0x97a>
 800ccc8:	4652      	mov	r2, sl
 800ccca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ccce:	4640      	mov	r0, r8
 800ccd0:	4649      	mov	r1, r9
 800ccd2:	f7f3 ff23 	bl	8000b1c <__aeabi_dcmplt>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	f040 8289 	bne.w	800d1ee <_dtoa_r+0x976>
 800ccdc:	ec5b ab19 	vmov	sl, fp, d9
 800cce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f2c0 8148 	blt.w	800cf78 <_dtoa_r+0x700>
 800cce8:	9a00      	ldr	r2, [sp, #0]
 800ccea:	2a0e      	cmp	r2, #14
 800ccec:	f300 8144 	bgt.w	800cf78 <_dtoa_r+0x700>
 800ccf0:	4b67      	ldr	r3, [pc, #412]	; (800ce90 <_dtoa_r+0x618>)
 800ccf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f280 80d5 	bge.w	800ceac <_dtoa_r+0x634>
 800cd02:	9b03      	ldr	r3, [sp, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f300 80d1 	bgt.w	800ceac <_dtoa_r+0x634>
 800cd0a:	f040 826f 	bne.w	800d1ec <_dtoa_r+0x974>
 800cd0e:	4b65      	ldr	r3, [pc, #404]	; (800cea4 <_dtoa_r+0x62c>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	4640      	mov	r0, r8
 800cd14:	4649      	mov	r1, r9
 800cd16:	f7f3 fc8f 	bl	8000638 <__aeabi_dmul>
 800cd1a:	4652      	mov	r2, sl
 800cd1c:	465b      	mov	r3, fp
 800cd1e:	f7f3 ff11 	bl	8000b44 <__aeabi_dcmpge>
 800cd22:	9e03      	ldr	r6, [sp, #12]
 800cd24:	4637      	mov	r7, r6
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f040 8245 	bne.w	800d1b6 <_dtoa_r+0x93e>
 800cd2c:	9d01      	ldr	r5, [sp, #4]
 800cd2e:	2331      	movs	r3, #49	; 0x31
 800cd30:	f805 3b01 	strb.w	r3, [r5], #1
 800cd34:	9b00      	ldr	r3, [sp, #0]
 800cd36:	3301      	adds	r3, #1
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	e240      	b.n	800d1be <_dtoa_r+0x946>
 800cd3c:	07f2      	lsls	r2, r6, #31
 800cd3e:	d505      	bpl.n	800cd4c <_dtoa_r+0x4d4>
 800cd40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd44:	f7f3 fc78 	bl	8000638 <__aeabi_dmul>
 800cd48:	3501      	adds	r5, #1
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	1076      	asrs	r6, r6, #1
 800cd4e:	3708      	adds	r7, #8
 800cd50:	e777      	b.n	800cc42 <_dtoa_r+0x3ca>
 800cd52:	2502      	movs	r5, #2
 800cd54:	e779      	b.n	800cc4a <_dtoa_r+0x3d2>
 800cd56:	9f00      	ldr	r7, [sp, #0]
 800cd58:	9e03      	ldr	r6, [sp, #12]
 800cd5a:	e794      	b.n	800cc86 <_dtoa_r+0x40e>
 800cd5c:	9901      	ldr	r1, [sp, #4]
 800cd5e:	4b4c      	ldr	r3, [pc, #304]	; (800ce90 <_dtoa_r+0x618>)
 800cd60:	4431      	add	r1, r6
 800cd62:	910d      	str	r1, [sp, #52]	; 0x34
 800cd64:	9908      	ldr	r1, [sp, #32]
 800cd66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd6e:	2900      	cmp	r1, #0
 800cd70:	d043      	beq.n	800cdfa <_dtoa_r+0x582>
 800cd72:	494d      	ldr	r1, [pc, #308]	; (800cea8 <_dtoa_r+0x630>)
 800cd74:	2000      	movs	r0, #0
 800cd76:	f7f3 fd89 	bl	800088c <__aeabi_ddiv>
 800cd7a:	4652      	mov	r2, sl
 800cd7c:	465b      	mov	r3, fp
 800cd7e:	f7f3 faa3 	bl	80002c8 <__aeabi_dsub>
 800cd82:	9d01      	ldr	r5, [sp, #4]
 800cd84:	4682      	mov	sl, r0
 800cd86:	468b      	mov	fp, r1
 800cd88:	4649      	mov	r1, r9
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	f7f3 ff04 	bl	8000b98 <__aeabi_d2iz>
 800cd90:	4606      	mov	r6, r0
 800cd92:	f7f3 fbe7 	bl	8000564 <__aeabi_i2d>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	4649      	mov	r1, r9
 800cd9e:	f7f3 fa93 	bl	80002c8 <__aeabi_dsub>
 800cda2:	3630      	adds	r6, #48	; 0x30
 800cda4:	f805 6b01 	strb.w	r6, [r5], #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	465b      	mov	r3, fp
 800cdac:	4680      	mov	r8, r0
 800cdae:	4689      	mov	r9, r1
 800cdb0:	f7f3 feb4 	bl	8000b1c <__aeabi_dcmplt>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d163      	bne.n	800ce80 <_dtoa_r+0x608>
 800cdb8:	4642      	mov	r2, r8
 800cdba:	464b      	mov	r3, r9
 800cdbc:	4936      	ldr	r1, [pc, #216]	; (800ce98 <_dtoa_r+0x620>)
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	f7f3 fa82 	bl	80002c8 <__aeabi_dsub>
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	465b      	mov	r3, fp
 800cdc8:	f7f3 fea8 	bl	8000b1c <__aeabi_dcmplt>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f040 80b5 	bne.w	800cf3c <_dtoa_r+0x6c4>
 800cdd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd4:	429d      	cmp	r5, r3
 800cdd6:	d081      	beq.n	800ccdc <_dtoa_r+0x464>
 800cdd8:	4b30      	ldr	r3, [pc, #192]	; (800ce9c <_dtoa_r+0x624>)
 800cdda:	2200      	movs	r2, #0
 800cddc:	4650      	mov	r0, sl
 800cdde:	4659      	mov	r1, fp
 800cde0:	f7f3 fc2a 	bl	8000638 <__aeabi_dmul>
 800cde4:	4b2d      	ldr	r3, [pc, #180]	; (800ce9c <_dtoa_r+0x624>)
 800cde6:	4682      	mov	sl, r0
 800cde8:	468b      	mov	fp, r1
 800cdea:	4640      	mov	r0, r8
 800cdec:	4649      	mov	r1, r9
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f7f3 fc22 	bl	8000638 <__aeabi_dmul>
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	4689      	mov	r9, r1
 800cdf8:	e7c6      	b.n	800cd88 <_dtoa_r+0x510>
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	f7f3 fc1b 	bl	8000638 <__aeabi_dmul>
 800ce02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce04:	9d01      	ldr	r5, [sp, #4]
 800ce06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce08:	4682      	mov	sl, r0
 800ce0a:	468b      	mov	fp, r1
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	4640      	mov	r0, r8
 800ce10:	f7f3 fec2 	bl	8000b98 <__aeabi_d2iz>
 800ce14:	4606      	mov	r6, r0
 800ce16:	f7f3 fba5 	bl	8000564 <__aeabi_i2d>
 800ce1a:	3630      	adds	r6, #48	; 0x30
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4640      	mov	r0, r8
 800ce22:	4649      	mov	r1, r9
 800ce24:	f7f3 fa50 	bl	80002c8 <__aeabi_dsub>
 800ce28:	f805 6b01 	strb.w	r6, [r5], #1
 800ce2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce2e:	429d      	cmp	r5, r3
 800ce30:	4680      	mov	r8, r0
 800ce32:	4689      	mov	r9, r1
 800ce34:	f04f 0200 	mov.w	r2, #0
 800ce38:	d124      	bne.n	800ce84 <_dtoa_r+0x60c>
 800ce3a:	4b1b      	ldr	r3, [pc, #108]	; (800cea8 <_dtoa_r+0x630>)
 800ce3c:	4650      	mov	r0, sl
 800ce3e:	4659      	mov	r1, fp
 800ce40:	f7f3 fa44 	bl	80002cc <__adddf3>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4640      	mov	r0, r8
 800ce4a:	4649      	mov	r1, r9
 800ce4c:	f7f3 fe84 	bl	8000b58 <__aeabi_dcmpgt>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d173      	bne.n	800cf3c <_dtoa_r+0x6c4>
 800ce54:	4652      	mov	r2, sl
 800ce56:	465b      	mov	r3, fp
 800ce58:	4913      	ldr	r1, [pc, #76]	; (800cea8 <_dtoa_r+0x630>)
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	f7f3 fa34 	bl	80002c8 <__aeabi_dsub>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	4640      	mov	r0, r8
 800ce66:	4649      	mov	r1, r9
 800ce68:	f7f3 fe58 	bl	8000b1c <__aeabi_dcmplt>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	f43f af35 	beq.w	800ccdc <_dtoa_r+0x464>
 800ce72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce74:	1e6b      	subs	r3, r5, #1
 800ce76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce7c:	2b30      	cmp	r3, #48	; 0x30
 800ce7e:	d0f8      	beq.n	800ce72 <_dtoa_r+0x5fa>
 800ce80:	9700      	str	r7, [sp, #0]
 800ce82:	e049      	b.n	800cf18 <_dtoa_r+0x6a0>
 800ce84:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <_dtoa_r+0x624>)
 800ce86:	f7f3 fbd7 	bl	8000638 <__aeabi_dmul>
 800ce8a:	4680      	mov	r8, r0
 800ce8c:	4689      	mov	r9, r1
 800ce8e:	e7bd      	b.n	800ce0c <_dtoa_r+0x594>
 800ce90:	0800f958 	.word	0x0800f958
 800ce94:	0800f930 	.word	0x0800f930
 800ce98:	3ff00000 	.word	0x3ff00000
 800ce9c:	40240000 	.word	0x40240000
 800cea0:	401c0000 	.word	0x401c0000
 800cea4:	40140000 	.word	0x40140000
 800cea8:	3fe00000 	.word	0x3fe00000
 800ceac:	9d01      	ldr	r5, [sp, #4]
 800ceae:	4656      	mov	r6, sl
 800ceb0:	465f      	mov	r7, fp
 800ceb2:	4642      	mov	r2, r8
 800ceb4:	464b      	mov	r3, r9
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	4639      	mov	r1, r7
 800ceba:	f7f3 fce7 	bl	800088c <__aeabi_ddiv>
 800cebe:	f7f3 fe6b 	bl	8000b98 <__aeabi_d2iz>
 800cec2:	4682      	mov	sl, r0
 800cec4:	f7f3 fb4e 	bl	8000564 <__aeabi_i2d>
 800cec8:	4642      	mov	r2, r8
 800ceca:	464b      	mov	r3, r9
 800cecc:	f7f3 fbb4 	bl	8000638 <__aeabi_dmul>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4630      	mov	r0, r6
 800ced6:	4639      	mov	r1, r7
 800ced8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cedc:	f7f3 f9f4 	bl	80002c8 <__aeabi_dsub>
 800cee0:	f805 6b01 	strb.w	r6, [r5], #1
 800cee4:	9e01      	ldr	r6, [sp, #4]
 800cee6:	9f03      	ldr	r7, [sp, #12]
 800cee8:	1bae      	subs	r6, r5, r6
 800ceea:	42b7      	cmp	r7, r6
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	d135      	bne.n	800cf5e <_dtoa_r+0x6e6>
 800cef2:	f7f3 f9eb 	bl	80002cc <__adddf3>
 800cef6:	4642      	mov	r2, r8
 800cef8:	464b      	mov	r3, r9
 800cefa:	4606      	mov	r6, r0
 800cefc:	460f      	mov	r7, r1
 800cefe:	f7f3 fe2b 	bl	8000b58 <__aeabi_dcmpgt>
 800cf02:	b9d0      	cbnz	r0, 800cf3a <_dtoa_r+0x6c2>
 800cf04:	4642      	mov	r2, r8
 800cf06:	464b      	mov	r3, r9
 800cf08:	4630      	mov	r0, r6
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	f7f3 fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 800cf10:	b110      	cbz	r0, 800cf18 <_dtoa_r+0x6a0>
 800cf12:	f01a 0f01 	tst.w	sl, #1
 800cf16:	d110      	bne.n	800cf3a <_dtoa_r+0x6c2>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	ee18 1a10 	vmov	r1, s16
 800cf1e:	f000 fe75 	bl	800dc0c <_Bfree>
 800cf22:	2300      	movs	r3, #0
 800cf24:	9800      	ldr	r0, [sp, #0]
 800cf26:	702b      	strb	r3, [r5, #0]
 800cf28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	6018      	str	r0, [r3, #0]
 800cf2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f43f acf1 	beq.w	800c918 <_dtoa_r+0xa0>
 800cf36:	601d      	str	r5, [r3, #0]
 800cf38:	e4ee      	b.n	800c918 <_dtoa_r+0xa0>
 800cf3a:	9f00      	ldr	r7, [sp, #0]
 800cf3c:	462b      	mov	r3, r5
 800cf3e:	461d      	mov	r5, r3
 800cf40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf44:	2a39      	cmp	r2, #57	; 0x39
 800cf46:	d106      	bne.n	800cf56 <_dtoa_r+0x6de>
 800cf48:	9a01      	ldr	r2, [sp, #4]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d1f7      	bne.n	800cf3e <_dtoa_r+0x6c6>
 800cf4e:	9901      	ldr	r1, [sp, #4]
 800cf50:	2230      	movs	r2, #48	; 0x30
 800cf52:	3701      	adds	r7, #1
 800cf54:	700a      	strb	r2, [r1, #0]
 800cf56:	781a      	ldrb	r2, [r3, #0]
 800cf58:	3201      	adds	r2, #1
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	e790      	b.n	800ce80 <_dtoa_r+0x608>
 800cf5e:	4ba6      	ldr	r3, [pc, #664]	; (800d1f8 <_dtoa_r+0x980>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	f7f3 fb69 	bl	8000638 <__aeabi_dmul>
 800cf66:	2200      	movs	r2, #0
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	f7f3 fdcb 	bl	8000b08 <__aeabi_dcmpeq>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d09d      	beq.n	800ceb2 <_dtoa_r+0x63a>
 800cf76:	e7cf      	b.n	800cf18 <_dtoa_r+0x6a0>
 800cf78:	9a08      	ldr	r2, [sp, #32]
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	f000 80d7 	beq.w	800d12e <_dtoa_r+0x8b6>
 800cf80:	9a06      	ldr	r2, [sp, #24]
 800cf82:	2a01      	cmp	r2, #1
 800cf84:	f300 80ba 	bgt.w	800d0fc <_dtoa_r+0x884>
 800cf88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf8a:	2a00      	cmp	r2, #0
 800cf8c:	f000 80b2 	beq.w	800d0f4 <_dtoa_r+0x87c>
 800cf90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf94:	9e07      	ldr	r6, [sp, #28]
 800cf96:	9d04      	ldr	r5, [sp, #16]
 800cf98:	9a04      	ldr	r2, [sp, #16]
 800cf9a:	441a      	add	r2, r3
 800cf9c:	9204      	str	r2, [sp, #16]
 800cf9e:	9a05      	ldr	r2, [sp, #20]
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	441a      	add	r2, r3
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	9205      	str	r2, [sp, #20]
 800cfa8:	f000 ff32 	bl	800de10 <__i2b>
 800cfac:	4607      	mov	r7, r0
 800cfae:	2d00      	cmp	r5, #0
 800cfb0:	dd0c      	ble.n	800cfcc <_dtoa_r+0x754>
 800cfb2:	9b05      	ldr	r3, [sp, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	dd09      	ble.n	800cfcc <_dtoa_r+0x754>
 800cfb8:	42ab      	cmp	r3, r5
 800cfba:	9a04      	ldr	r2, [sp, #16]
 800cfbc:	bfa8      	it	ge
 800cfbe:	462b      	movge	r3, r5
 800cfc0:	1ad2      	subs	r2, r2, r3
 800cfc2:	9204      	str	r2, [sp, #16]
 800cfc4:	9a05      	ldr	r2, [sp, #20]
 800cfc6:	1aed      	subs	r5, r5, r3
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	9305      	str	r3, [sp, #20]
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	b31b      	cbz	r3, 800d018 <_dtoa_r+0x7a0>
 800cfd0:	9b08      	ldr	r3, [sp, #32]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 80af 	beq.w	800d136 <_dtoa_r+0x8be>
 800cfd8:	2e00      	cmp	r6, #0
 800cfda:	dd13      	ble.n	800d004 <_dtoa_r+0x78c>
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4632      	mov	r2, r6
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f000 ffd5 	bl	800df90 <__pow5mult>
 800cfe6:	ee18 2a10 	vmov	r2, s16
 800cfea:	4601      	mov	r1, r0
 800cfec:	4607      	mov	r7, r0
 800cfee:	4620      	mov	r0, r4
 800cff0:	f000 ff24 	bl	800de3c <__multiply>
 800cff4:	ee18 1a10 	vmov	r1, s16
 800cff8:	4680      	mov	r8, r0
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 fe06 	bl	800dc0c <_Bfree>
 800d000:	ee08 8a10 	vmov	s16, r8
 800d004:	9b07      	ldr	r3, [sp, #28]
 800d006:	1b9a      	subs	r2, r3, r6
 800d008:	d006      	beq.n	800d018 <_dtoa_r+0x7a0>
 800d00a:	ee18 1a10 	vmov	r1, s16
 800d00e:	4620      	mov	r0, r4
 800d010:	f000 ffbe 	bl	800df90 <__pow5mult>
 800d014:	ee08 0a10 	vmov	s16, r0
 800d018:	2101      	movs	r1, #1
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 fef8 	bl	800de10 <__i2b>
 800d020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d022:	2b00      	cmp	r3, #0
 800d024:	4606      	mov	r6, r0
 800d026:	f340 8088 	ble.w	800d13a <_dtoa_r+0x8c2>
 800d02a:	461a      	mov	r2, r3
 800d02c:	4601      	mov	r1, r0
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 ffae 	bl	800df90 <__pow5mult>
 800d034:	9b06      	ldr	r3, [sp, #24]
 800d036:	2b01      	cmp	r3, #1
 800d038:	4606      	mov	r6, r0
 800d03a:	f340 8081 	ble.w	800d140 <_dtoa_r+0x8c8>
 800d03e:	f04f 0800 	mov.w	r8, #0
 800d042:	6933      	ldr	r3, [r6, #16]
 800d044:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d048:	6918      	ldr	r0, [r3, #16]
 800d04a:	f000 fe91 	bl	800dd70 <__hi0bits>
 800d04e:	f1c0 0020 	rsb	r0, r0, #32
 800d052:	9b05      	ldr	r3, [sp, #20]
 800d054:	4418      	add	r0, r3
 800d056:	f010 001f 	ands.w	r0, r0, #31
 800d05a:	f000 8092 	beq.w	800d182 <_dtoa_r+0x90a>
 800d05e:	f1c0 0320 	rsb	r3, r0, #32
 800d062:	2b04      	cmp	r3, #4
 800d064:	f340 808a 	ble.w	800d17c <_dtoa_r+0x904>
 800d068:	f1c0 001c 	rsb	r0, r0, #28
 800d06c:	9b04      	ldr	r3, [sp, #16]
 800d06e:	4403      	add	r3, r0
 800d070:	9304      	str	r3, [sp, #16]
 800d072:	9b05      	ldr	r3, [sp, #20]
 800d074:	4403      	add	r3, r0
 800d076:	4405      	add	r5, r0
 800d078:	9305      	str	r3, [sp, #20]
 800d07a:	9b04      	ldr	r3, [sp, #16]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	dd07      	ble.n	800d090 <_dtoa_r+0x818>
 800d080:	ee18 1a10 	vmov	r1, s16
 800d084:	461a      	mov	r2, r3
 800d086:	4620      	mov	r0, r4
 800d088:	f000 ffdc 	bl	800e044 <__lshift>
 800d08c:	ee08 0a10 	vmov	s16, r0
 800d090:	9b05      	ldr	r3, [sp, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	dd05      	ble.n	800d0a2 <_dtoa_r+0x82a>
 800d096:	4631      	mov	r1, r6
 800d098:	461a      	mov	r2, r3
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 ffd2 	bl	800e044 <__lshift>
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d06e      	beq.n	800d186 <_dtoa_r+0x90e>
 800d0a8:	ee18 0a10 	vmov	r0, s16
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	f001 f839 	bl	800e124 <__mcmp>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	da67      	bge.n	800d186 <_dtoa_r+0x90e>
 800d0b6:	9b00      	ldr	r3, [sp, #0]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	ee18 1a10 	vmov	r1, s16
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	220a      	movs	r2, #10
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 fdc3 	bl	800dc50 <__multadd>
 800d0ca:	9b08      	ldr	r3, [sp, #32]
 800d0cc:	ee08 0a10 	vmov	s16, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 81b1 	beq.w	800d438 <_dtoa_r+0xbc0>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4639      	mov	r1, r7
 800d0da:	220a      	movs	r2, #10
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fdb7 	bl	800dc50 <__multadd>
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	f300 808e 	bgt.w	800d208 <_dtoa_r+0x990>
 800d0ec:	9b06      	ldr	r3, [sp, #24]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	dc51      	bgt.n	800d196 <_dtoa_r+0x91e>
 800d0f2:	e089      	b.n	800d208 <_dtoa_r+0x990>
 800d0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0fa:	e74b      	b.n	800cf94 <_dtoa_r+0x71c>
 800d0fc:	9b03      	ldr	r3, [sp, #12]
 800d0fe:	1e5e      	subs	r6, r3, #1
 800d100:	9b07      	ldr	r3, [sp, #28]
 800d102:	42b3      	cmp	r3, r6
 800d104:	bfbf      	itttt	lt
 800d106:	9b07      	ldrlt	r3, [sp, #28]
 800d108:	9607      	strlt	r6, [sp, #28]
 800d10a:	1af2      	sublt	r2, r6, r3
 800d10c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d10e:	bfb6      	itet	lt
 800d110:	189b      	addlt	r3, r3, r2
 800d112:	1b9e      	subge	r6, r3, r6
 800d114:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	bfb8      	it	lt
 800d11a:	2600      	movlt	r6, #0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bfb7      	itett	lt
 800d120:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d124:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d128:	1a9d      	sublt	r5, r3, r2
 800d12a:	2300      	movlt	r3, #0
 800d12c:	e734      	b.n	800cf98 <_dtoa_r+0x720>
 800d12e:	9e07      	ldr	r6, [sp, #28]
 800d130:	9d04      	ldr	r5, [sp, #16]
 800d132:	9f08      	ldr	r7, [sp, #32]
 800d134:	e73b      	b.n	800cfae <_dtoa_r+0x736>
 800d136:	9a07      	ldr	r2, [sp, #28]
 800d138:	e767      	b.n	800d00a <_dtoa_r+0x792>
 800d13a:	9b06      	ldr	r3, [sp, #24]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	dc18      	bgt.n	800d172 <_dtoa_r+0x8fa>
 800d140:	f1ba 0f00 	cmp.w	sl, #0
 800d144:	d115      	bne.n	800d172 <_dtoa_r+0x8fa>
 800d146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d14a:	b993      	cbnz	r3, 800d172 <_dtoa_r+0x8fa>
 800d14c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d150:	0d1b      	lsrs	r3, r3, #20
 800d152:	051b      	lsls	r3, r3, #20
 800d154:	b183      	cbz	r3, 800d178 <_dtoa_r+0x900>
 800d156:	9b04      	ldr	r3, [sp, #16]
 800d158:	3301      	adds	r3, #1
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	9b05      	ldr	r3, [sp, #20]
 800d15e:	3301      	adds	r3, #1
 800d160:	9305      	str	r3, [sp, #20]
 800d162:	f04f 0801 	mov.w	r8, #1
 800d166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f47f af6a 	bne.w	800d042 <_dtoa_r+0x7ca>
 800d16e:	2001      	movs	r0, #1
 800d170:	e76f      	b.n	800d052 <_dtoa_r+0x7da>
 800d172:	f04f 0800 	mov.w	r8, #0
 800d176:	e7f6      	b.n	800d166 <_dtoa_r+0x8ee>
 800d178:	4698      	mov	r8, r3
 800d17a:	e7f4      	b.n	800d166 <_dtoa_r+0x8ee>
 800d17c:	f43f af7d 	beq.w	800d07a <_dtoa_r+0x802>
 800d180:	4618      	mov	r0, r3
 800d182:	301c      	adds	r0, #28
 800d184:	e772      	b.n	800d06c <_dtoa_r+0x7f4>
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dc37      	bgt.n	800d1fc <_dtoa_r+0x984>
 800d18c:	9b06      	ldr	r3, [sp, #24]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	dd34      	ble.n	800d1fc <_dtoa_r+0x984>
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	9302      	str	r3, [sp, #8]
 800d196:	9b02      	ldr	r3, [sp, #8]
 800d198:	b96b      	cbnz	r3, 800d1b6 <_dtoa_r+0x93e>
 800d19a:	4631      	mov	r1, r6
 800d19c:	2205      	movs	r2, #5
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 fd56 	bl	800dc50 <__multadd>
 800d1a4:	4601      	mov	r1, r0
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	ee18 0a10 	vmov	r0, s16
 800d1ac:	f000 ffba 	bl	800e124 <__mcmp>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	f73f adbb 	bgt.w	800cd2c <_dtoa_r+0x4b4>
 800d1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b8:	9d01      	ldr	r5, [sp, #4]
 800d1ba:	43db      	mvns	r3, r3
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	f04f 0800 	mov.w	r8, #0
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 fd21 	bl	800dc0c <_Bfree>
 800d1ca:	2f00      	cmp	r7, #0
 800d1cc:	f43f aea4 	beq.w	800cf18 <_dtoa_r+0x6a0>
 800d1d0:	f1b8 0f00 	cmp.w	r8, #0
 800d1d4:	d005      	beq.n	800d1e2 <_dtoa_r+0x96a>
 800d1d6:	45b8      	cmp	r8, r7
 800d1d8:	d003      	beq.n	800d1e2 <_dtoa_r+0x96a>
 800d1da:	4641      	mov	r1, r8
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f000 fd15 	bl	800dc0c <_Bfree>
 800d1e2:	4639      	mov	r1, r7
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f000 fd11 	bl	800dc0c <_Bfree>
 800d1ea:	e695      	b.n	800cf18 <_dtoa_r+0x6a0>
 800d1ec:	2600      	movs	r6, #0
 800d1ee:	4637      	mov	r7, r6
 800d1f0:	e7e1      	b.n	800d1b6 <_dtoa_r+0x93e>
 800d1f2:	9700      	str	r7, [sp, #0]
 800d1f4:	4637      	mov	r7, r6
 800d1f6:	e599      	b.n	800cd2c <_dtoa_r+0x4b4>
 800d1f8:	40240000 	.word	0x40240000
 800d1fc:	9b08      	ldr	r3, [sp, #32]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 80ca 	beq.w	800d398 <_dtoa_r+0xb20>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	9302      	str	r3, [sp, #8]
 800d208:	2d00      	cmp	r5, #0
 800d20a:	dd05      	ble.n	800d218 <_dtoa_r+0x9a0>
 800d20c:	4639      	mov	r1, r7
 800d20e:	462a      	mov	r2, r5
 800d210:	4620      	mov	r0, r4
 800d212:	f000 ff17 	bl	800e044 <__lshift>
 800d216:	4607      	mov	r7, r0
 800d218:	f1b8 0f00 	cmp.w	r8, #0
 800d21c:	d05b      	beq.n	800d2d6 <_dtoa_r+0xa5e>
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fcb3 	bl	800db8c <_Balloc>
 800d226:	4605      	mov	r5, r0
 800d228:	b928      	cbnz	r0, 800d236 <_dtoa_r+0x9be>
 800d22a:	4b87      	ldr	r3, [pc, #540]	; (800d448 <_dtoa_r+0xbd0>)
 800d22c:	4602      	mov	r2, r0
 800d22e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d232:	f7ff bb3b 	b.w	800c8ac <_dtoa_r+0x34>
 800d236:	693a      	ldr	r2, [r7, #16]
 800d238:	3202      	adds	r2, #2
 800d23a:	0092      	lsls	r2, r2, #2
 800d23c:	f107 010c 	add.w	r1, r7, #12
 800d240:	300c      	adds	r0, #12
 800d242:	f000 fc95 	bl	800db70 <memcpy>
 800d246:	2201      	movs	r2, #1
 800d248:	4629      	mov	r1, r5
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 fefa 	bl	800e044 <__lshift>
 800d250:	9b01      	ldr	r3, [sp, #4]
 800d252:	f103 0901 	add.w	r9, r3, #1
 800d256:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d25a:	4413      	add	r3, r2
 800d25c:	9305      	str	r3, [sp, #20]
 800d25e:	f00a 0301 	and.w	r3, sl, #1
 800d262:	46b8      	mov	r8, r7
 800d264:	9304      	str	r3, [sp, #16]
 800d266:	4607      	mov	r7, r0
 800d268:	4631      	mov	r1, r6
 800d26a:	ee18 0a10 	vmov	r0, s16
 800d26e:	f7ff fa77 	bl	800c760 <quorem>
 800d272:	4641      	mov	r1, r8
 800d274:	9002      	str	r0, [sp, #8]
 800d276:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d27a:	ee18 0a10 	vmov	r0, s16
 800d27e:	f000 ff51 	bl	800e124 <__mcmp>
 800d282:	463a      	mov	r2, r7
 800d284:	9003      	str	r0, [sp, #12]
 800d286:	4631      	mov	r1, r6
 800d288:	4620      	mov	r0, r4
 800d28a:	f000 ff67 	bl	800e15c <__mdiff>
 800d28e:	68c2      	ldr	r2, [r0, #12]
 800d290:	f109 3bff 	add.w	fp, r9, #4294967295
 800d294:	4605      	mov	r5, r0
 800d296:	bb02      	cbnz	r2, 800d2da <_dtoa_r+0xa62>
 800d298:	4601      	mov	r1, r0
 800d29a:	ee18 0a10 	vmov	r0, s16
 800d29e:	f000 ff41 	bl	800e124 <__mcmp>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	9207      	str	r2, [sp, #28]
 800d2aa:	f000 fcaf 	bl	800dc0c <_Bfree>
 800d2ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d2b2:	ea43 0102 	orr.w	r1, r3, r2
 800d2b6:	9b04      	ldr	r3, [sp, #16]
 800d2b8:	430b      	orrs	r3, r1
 800d2ba:	464d      	mov	r5, r9
 800d2bc:	d10f      	bne.n	800d2de <_dtoa_r+0xa66>
 800d2be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d2c2:	d02a      	beq.n	800d31a <_dtoa_r+0xaa2>
 800d2c4:	9b03      	ldr	r3, [sp, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	dd02      	ble.n	800d2d0 <_dtoa_r+0xa58>
 800d2ca:	9b02      	ldr	r3, [sp, #8]
 800d2cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d2d0:	f88b a000 	strb.w	sl, [fp]
 800d2d4:	e775      	b.n	800d1c2 <_dtoa_r+0x94a>
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	e7ba      	b.n	800d250 <_dtoa_r+0x9d8>
 800d2da:	2201      	movs	r2, #1
 800d2dc:	e7e2      	b.n	800d2a4 <_dtoa_r+0xa2c>
 800d2de:	9b03      	ldr	r3, [sp, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	db04      	blt.n	800d2ee <_dtoa_r+0xa76>
 800d2e4:	9906      	ldr	r1, [sp, #24]
 800d2e6:	430b      	orrs	r3, r1
 800d2e8:	9904      	ldr	r1, [sp, #16]
 800d2ea:	430b      	orrs	r3, r1
 800d2ec:	d122      	bne.n	800d334 <_dtoa_r+0xabc>
 800d2ee:	2a00      	cmp	r2, #0
 800d2f0:	ddee      	ble.n	800d2d0 <_dtoa_r+0xa58>
 800d2f2:	ee18 1a10 	vmov	r1, s16
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f000 fea3 	bl	800e044 <__lshift>
 800d2fe:	4631      	mov	r1, r6
 800d300:	ee08 0a10 	vmov	s16, r0
 800d304:	f000 ff0e 	bl	800e124 <__mcmp>
 800d308:	2800      	cmp	r0, #0
 800d30a:	dc03      	bgt.n	800d314 <_dtoa_r+0xa9c>
 800d30c:	d1e0      	bne.n	800d2d0 <_dtoa_r+0xa58>
 800d30e:	f01a 0f01 	tst.w	sl, #1
 800d312:	d0dd      	beq.n	800d2d0 <_dtoa_r+0xa58>
 800d314:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d318:	d1d7      	bne.n	800d2ca <_dtoa_r+0xa52>
 800d31a:	2339      	movs	r3, #57	; 0x39
 800d31c:	f88b 3000 	strb.w	r3, [fp]
 800d320:	462b      	mov	r3, r5
 800d322:	461d      	mov	r5, r3
 800d324:	3b01      	subs	r3, #1
 800d326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d32a:	2a39      	cmp	r2, #57	; 0x39
 800d32c:	d071      	beq.n	800d412 <_dtoa_r+0xb9a>
 800d32e:	3201      	adds	r2, #1
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	e746      	b.n	800d1c2 <_dtoa_r+0x94a>
 800d334:	2a00      	cmp	r2, #0
 800d336:	dd07      	ble.n	800d348 <_dtoa_r+0xad0>
 800d338:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d33c:	d0ed      	beq.n	800d31a <_dtoa_r+0xaa2>
 800d33e:	f10a 0301 	add.w	r3, sl, #1
 800d342:	f88b 3000 	strb.w	r3, [fp]
 800d346:	e73c      	b.n	800d1c2 <_dtoa_r+0x94a>
 800d348:	9b05      	ldr	r3, [sp, #20]
 800d34a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d34e:	4599      	cmp	r9, r3
 800d350:	d047      	beq.n	800d3e2 <_dtoa_r+0xb6a>
 800d352:	ee18 1a10 	vmov	r1, s16
 800d356:	2300      	movs	r3, #0
 800d358:	220a      	movs	r2, #10
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 fc78 	bl	800dc50 <__multadd>
 800d360:	45b8      	cmp	r8, r7
 800d362:	ee08 0a10 	vmov	s16, r0
 800d366:	f04f 0300 	mov.w	r3, #0
 800d36a:	f04f 020a 	mov.w	r2, #10
 800d36e:	4641      	mov	r1, r8
 800d370:	4620      	mov	r0, r4
 800d372:	d106      	bne.n	800d382 <_dtoa_r+0xb0a>
 800d374:	f000 fc6c 	bl	800dc50 <__multadd>
 800d378:	4680      	mov	r8, r0
 800d37a:	4607      	mov	r7, r0
 800d37c:	f109 0901 	add.w	r9, r9, #1
 800d380:	e772      	b.n	800d268 <_dtoa_r+0x9f0>
 800d382:	f000 fc65 	bl	800dc50 <__multadd>
 800d386:	4639      	mov	r1, r7
 800d388:	4680      	mov	r8, r0
 800d38a:	2300      	movs	r3, #0
 800d38c:	220a      	movs	r2, #10
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fc5e 	bl	800dc50 <__multadd>
 800d394:	4607      	mov	r7, r0
 800d396:	e7f1      	b.n	800d37c <_dtoa_r+0xb04>
 800d398:	9b03      	ldr	r3, [sp, #12]
 800d39a:	9302      	str	r3, [sp, #8]
 800d39c:	9d01      	ldr	r5, [sp, #4]
 800d39e:	ee18 0a10 	vmov	r0, s16
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	f7ff f9dc 	bl	800c760 <quorem>
 800d3a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d3ac:	9b01      	ldr	r3, [sp, #4]
 800d3ae:	f805 ab01 	strb.w	sl, [r5], #1
 800d3b2:	1aea      	subs	r2, r5, r3
 800d3b4:	9b02      	ldr	r3, [sp, #8]
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	dd09      	ble.n	800d3ce <_dtoa_r+0xb56>
 800d3ba:	ee18 1a10 	vmov	r1, s16
 800d3be:	2300      	movs	r3, #0
 800d3c0:	220a      	movs	r2, #10
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fc44 	bl	800dc50 <__multadd>
 800d3c8:	ee08 0a10 	vmov	s16, r0
 800d3cc:	e7e7      	b.n	800d39e <_dtoa_r+0xb26>
 800d3ce:	9b02      	ldr	r3, [sp, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	bfc8      	it	gt
 800d3d4:	461d      	movgt	r5, r3
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	bfd8      	it	le
 800d3da:	2501      	movle	r5, #1
 800d3dc:	441d      	add	r5, r3
 800d3de:	f04f 0800 	mov.w	r8, #0
 800d3e2:	ee18 1a10 	vmov	r1, s16
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fe2b 	bl	800e044 <__lshift>
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	ee08 0a10 	vmov	s16, r0
 800d3f4:	f000 fe96 	bl	800e124 <__mcmp>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	dc91      	bgt.n	800d320 <_dtoa_r+0xaa8>
 800d3fc:	d102      	bne.n	800d404 <_dtoa_r+0xb8c>
 800d3fe:	f01a 0f01 	tst.w	sl, #1
 800d402:	d18d      	bne.n	800d320 <_dtoa_r+0xaa8>
 800d404:	462b      	mov	r3, r5
 800d406:	461d      	mov	r5, r3
 800d408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d40c:	2a30      	cmp	r2, #48	; 0x30
 800d40e:	d0fa      	beq.n	800d406 <_dtoa_r+0xb8e>
 800d410:	e6d7      	b.n	800d1c2 <_dtoa_r+0x94a>
 800d412:	9a01      	ldr	r2, [sp, #4]
 800d414:	429a      	cmp	r2, r3
 800d416:	d184      	bne.n	800d322 <_dtoa_r+0xaaa>
 800d418:	9b00      	ldr	r3, [sp, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	2331      	movs	r3, #49	; 0x31
 800d420:	7013      	strb	r3, [r2, #0]
 800d422:	e6ce      	b.n	800d1c2 <_dtoa_r+0x94a>
 800d424:	4b09      	ldr	r3, [pc, #36]	; (800d44c <_dtoa_r+0xbd4>)
 800d426:	f7ff ba95 	b.w	800c954 <_dtoa_r+0xdc>
 800d42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f47f aa6e 	bne.w	800c90e <_dtoa_r+0x96>
 800d432:	4b07      	ldr	r3, [pc, #28]	; (800d450 <_dtoa_r+0xbd8>)
 800d434:	f7ff ba8e 	b.w	800c954 <_dtoa_r+0xdc>
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dcae      	bgt.n	800d39c <_dtoa_r+0xb24>
 800d43e:	9b06      	ldr	r3, [sp, #24]
 800d440:	2b02      	cmp	r3, #2
 800d442:	f73f aea8 	bgt.w	800d196 <_dtoa_r+0x91e>
 800d446:	e7a9      	b.n	800d39c <_dtoa_r+0xb24>
 800d448:	0800f848 	.word	0x0800f848
 800d44c:	0800f64c 	.word	0x0800f64c
 800d450:	0800f7c9 	.word	0x0800f7c9

0800d454 <rshift>:
 800d454:	6903      	ldr	r3, [r0, #16]
 800d456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d45a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d45e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d462:	f100 0414 	add.w	r4, r0, #20
 800d466:	dd45      	ble.n	800d4f4 <rshift+0xa0>
 800d468:	f011 011f 	ands.w	r1, r1, #31
 800d46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d474:	d10c      	bne.n	800d490 <rshift+0x3c>
 800d476:	f100 0710 	add.w	r7, r0, #16
 800d47a:	4629      	mov	r1, r5
 800d47c:	42b1      	cmp	r1, r6
 800d47e:	d334      	bcc.n	800d4ea <rshift+0x96>
 800d480:	1a9b      	subs	r3, r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	1eea      	subs	r2, r5, #3
 800d486:	4296      	cmp	r6, r2
 800d488:	bf38      	it	cc
 800d48a:	2300      	movcc	r3, #0
 800d48c:	4423      	add	r3, r4
 800d48e:	e015      	b.n	800d4bc <rshift+0x68>
 800d490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d494:	f1c1 0820 	rsb	r8, r1, #32
 800d498:	40cf      	lsrs	r7, r1
 800d49a:	f105 0e04 	add.w	lr, r5, #4
 800d49e:	46a1      	mov	r9, r4
 800d4a0:	4576      	cmp	r6, lr
 800d4a2:	46f4      	mov	ip, lr
 800d4a4:	d815      	bhi.n	800d4d2 <rshift+0x7e>
 800d4a6:	1a9a      	subs	r2, r3, r2
 800d4a8:	0092      	lsls	r2, r2, #2
 800d4aa:	3a04      	subs	r2, #4
 800d4ac:	3501      	adds	r5, #1
 800d4ae:	42ae      	cmp	r6, r5
 800d4b0:	bf38      	it	cc
 800d4b2:	2200      	movcc	r2, #0
 800d4b4:	18a3      	adds	r3, r4, r2
 800d4b6:	50a7      	str	r7, [r4, r2]
 800d4b8:	b107      	cbz	r7, 800d4bc <rshift+0x68>
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	1b1a      	subs	r2, r3, r4
 800d4be:	42a3      	cmp	r3, r4
 800d4c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d4c4:	bf08      	it	eq
 800d4c6:	2300      	moveq	r3, #0
 800d4c8:	6102      	str	r2, [r0, #16]
 800d4ca:	bf08      	it	eq
 800d4cc:	6143      	streq	r3, [r0, #20]
 800d4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4d2:	f8dc c000 	ldr.w	ip, [ip]
 800d4d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d4da:	ea4c 0707 	orr.w	r7, ip, r7
 800d4de:	f849 7b04 	str.w	r7, [r9], #4
 800d4e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d4e6:	40cf      	lsrs	r7, r1
 800d4e8:	e7da      	b.n	800d4a0 <rshift+0x4c>
 800d4ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800d4ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800d4f2:	e7c3      	b.n	800d47c <rshift+0x28>
 800d4f4:	4623      	mov	r3, r4
 800d4f6:	e7e1      	b.n	800d4bc <rshift+0x68>

0800d4f8 <__hexdig_fun>:
 800d4f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d4fc:	2b09      	cmp	r3, #9
 800d4fe:	d802      	bhi.n	800d506 <__hexdig_fun+0xe>
 800d500:	3820      	subs	r0, #32
 800d502:	b2c0      	uxtb	r0, r0
 800d504:	4770      	bx	lr
 800d506:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d50a:	2b05      	cmp	r3, #5
 800d50c:	d801      	bhi.n	800d512 <__hexdig_fun+0x1a>
 800d50e:	3847      	subs	r0, #71	; 0x47
 800d510:	e7f7      	b.n	800d502 <__hexdig_fun+0xa>
 800d512:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d516:	2b05      	cmp	r3, #5
 800d518:	d801      	bhi.n	800d51e <__hexdig_fun+0x26>
 800d51a:	3827      	subs	r0, #39	; 0x27
 800d51c:	e7f1      	b.n	800d502 <__hexdig_fun+0xa>
 800d51e:	2000      	movs	r0, #0
 800d520:	4770      	bx	lr
	...

0800d524 <__gethex>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	ed2d 8b02 	vpush	{d8}
 800d52c:	b089      	sub	sp, #36	; 0x24
 800d52e:	ee08 0a10 	vmov	s16, r0
 800d532:	9304      	str	r3, [sp, #16]
 800d534:	4bb4      	ldr	r3, [pc, #720]	; (800d808 <__gethex+0x2e4>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	4618      	mov	r0, r3
 800d53c:	468b      	mov	fp, r1
 800d53e:	4690      	mov	r8, r2
 800d540:	f7f2 fe66 	bl	8000210 <strlen>
 800d544:	9b01      	ldr	r3, [sp, #4]
 800d546:	f8db 2000 	ldr.w	r2, [fp]
 800d54a:	4403      	add	r3, r0
 800d54c:	4682      	mov	sl, r0
 800d54e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	1c93      	adds	r3, r2, #2
 800d556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d55a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d55e:	32fe      	adds	r2, #254	; 0xfe
 800d560:	18d1      	adds	r1, r2, r3
 800d562:	461f      	mov	r7, r3
 800d564:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d568:	9100      	str	r1, [sp, #0]
 800d56a:	2830      	cmp	r0, #48	; 0x30
 800d56c:	d0f8      	beq.n	800d560 <__gethex+0x3c>
 800d56e:	f7ff ffc3 	bl	800d4f8 <__hexdig_fun>
 800d572:	4604      	mov	r4, r0
 800d574:	2800      	cmp	r0, #0
 800d576:	d13a      	bne.n	800d5ee <__gethex+0xca>
 800d578:	9901      	ldr	r1, [sp, #4]
 800d57a:	4652      	mov	r2, sl
 800d57c:	4638      	mov	r0, r7
 800d57e:	f001 fa33 	bl	800e9e8 <strncmp>
 800d582:	4605      	mov	r5, r0
 800d584:	2800      	cmp	r0, #0
 800d586:	d168      	bne.n	800d65a <__gethex+0x136>
 800d588:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d58c:	eb07 060a 	add.w	r6, r7, sl
 800d590:	f7ff ffb2 	bl	800d4f8 <__hexdig_fun>
 800d594:	2800      	cmp	r0, #0
 800d596:	d062      	beq.n	800d65e <__gethex+0x13a>
 800d598:	4633      	mov	r3, r6
 800d59a:	7818      	ldrb	r0, [r3, #0]
 800d59c:	2830      	cmp	r0, #48	; 0x30
 800d59e:	461f      	mov	r7, r3
 800d5a0:	f103 0301 	add.w	r3, r3, #1
 800d5a4:	d0f9      	beq.n	800d59a <__gethex+0x76>
 800d5a6:	f7ff ffa7 	bl	800d4f8 <__hexdig_fun>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	fab0 f480 	clz	r4, r0
 800d5b0:	0964      	lsrs	r4, r4, #5
 800d5b2:	4635      	mov	r5, r6
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	4616      	mov	r6, r2
 800d5ba:	3201      	adds	r2, #1
 800d5bc:	7830      	ldrb	r0, [r6, #0]
 800d5be:	f7ff ff9b 	bl	800d4f8 <__hexdig_fun>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d1f8      	bne.n	800d5b8 <__gethex+0x94>
 800d5c6:	9901      	ldr	r1, [sp, #4]
 800d5c8:	4652      	mov	r2, sl
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f001 fa0c 	bl	800e9e8 <strncmp>
 800d5d0:	b980      	cbnz	r0, 800d5f4 <__gethex+0xd0>
 800d5d2:	b94d      	cbnz	r5, 800d5e8 <__gethex+0xc4>
 800d5d4:	eb06 050a 	add.w	r5, r6, sl
 800d5d8:	462a      	mov	r2, r5
 800d5da:	4616      	mov	r6, r2
 800d5dc:	3201      	adds	r2, #1
 800d5de:	7830      	ldrb	r0, [r6, #0]
 800d5e0:	f7ff ff8a 	bl	800d4f8 <__hexdig_fun>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d1f8      	bne.n	800d5da <__gethex+0xb6>
 800d5e8:	1bad      	subs	r5, r5, r6
 800d5ea:	00ad      	lsls	r5, r5, #2
 800d5ec:	e004      	b.n	800d5f8 <__gethex+0xd4>
 800d5ee:	2400      	movs	r4, #0
 800d5f0:	4625      	mov	r5, r4
 800d5f2:	e7e0      	b.n	800d5b6 <__gethex+0x92>
 800d5f4:	2d00      	cmp	r5, #0
 800d5f6:	d1f7      	bne.n	800d5e8 <__gethex+0xc4>
 800d5f8:	7833      	ldrb	r3, [r6, #0]
 800d5fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d5fe:	2b50      	cmp	r3, #80	; 0x50
 800d600:	d13b      	bne.n	800d67a <__gethex+0x156>
 800d602:	7873      	ldrb	r3, [r6, #1]
 800d604:	2b2b      	cmp	r3, #43	; 0x2b
 800d606:	d02c      	beq.n	800d662 <__gethex+0x13e>
 800d608:	2b2d      	cmp	r3, #45	; 0x2d
 800d60a:	d02e      	beq.n	800d66a <__gethex+0x146>
 800d60c:	1c71      	adds	r1, r6, #1
 800d60e:	f04f 0900 	mov.w	r9, #0
 800d612:	7808      	ldrb	r0, [r1, #0]
 800d614:	f7ff ff70 	bl	800d4f8 <__hexdig_fun>
 800d618:	1e43      	subs	r3, r0, #1
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	2b18      	cmp	r3, #24
 800d61e:	d82c      	bhi.n	800d67a <__gethex+0x156>
 800d620:	f1a0 0210 	sub.w	r2, r0, #16
 800d624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d628:	f7ff ff66 	bl	800d4f8 <__hexdig_fun>
 800d62c:	1e43      	subs	r3, r0, #1
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b18      	cmp	r3, #24
 800d632:	d91d      	bls.n	800d670 <__gethex+0x14c>
 800d634:	f1b9 0f00 	cmp.w	r9, #0
 800d638:	d000      	beq.n	800d63c <__gethex+0x118>
 800d63a:	4252      	negs	r2, r2
 800d63c:	4415      	add	r5, r2
 800d63e:	f8cb 1000 	str.w	r1, [fp]
 800d642:	b1e4      	cbz	r4, 800d67e <__gethex+0x15a>
 800d644:	9b00      	ldr	r3, [sp, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	bf14      	ite	ne
 800d64a:	2700      	movne	r7, #0
 800d64c:	2706      	moveq	r7, #6
 800d64e:	4638      	mov	r0, r7
 800d650:	b009      	add	sp, #36	; 0x24
 800d652:	ecbd 8b02 	vpop	{d8}
 800d656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65a:	463e      	mov	r6, r7
 800d65c:	4625      	mov	r5, r4
 800d65e:	2401      	movs	r4, #1
 800d660:	e7ca      	b.n	800d5f8 <__gethex+0xd4>
 800d662:	f04f 0900 	mov.w	r9, #0
 800d666:	1cb1      	adds	r1, r6, #2
 800d668:	e7d3      	b.n	800d612 <__gethex+0xee>
 800d66a:	f04f 0901 	mov.w	r9, #1
 800d66e:	e7fa      	b.n	800d666 <__gethex+0x142>
 800d670:	230a      	movs	r3, #10
 800d672:	fb03 0202 	mla	r2, r3, r2, r0
 800d676:	3a10      	subs	r2, #16
 800d678:	e7d4      	b.n	800d624 <__gethex+0x100>
 800d67a:	4631      	mov	r1, r6
 800d67c:	e7df      	b.n	800d63e <__gethex+0x11a>
 800d67e:	1bf3      	subs	r3, r6, r7
 800d680:	3b01      	subs	r3, #1
 800d682:	4621      	mov	r1, r4
 800d684:	2b07      	cmp	r3, #7
 800d686:	dc0b      	bgt.n	800d6a0 <__gethex+0x17c>
 800d688:	ee18 0a10 	vmov	r0, s16
 800d68c:	f000 fa7e 	bl	800db8c <_Balloc>
 800d690:	4604      	mov	r4, r0
 800d692:	b940      	cbnz	r0, 800d6a6 <__gethex+0x182>
 800d694:	4b5d      	ldr	r3, [pc, #372]	; (800d80c <__gethex+0x2e8>)
 800d696:	4602      	mov	r2, r0
 800d698:	21de      	movs	r1, #222	; 0xde
 800d69a:	485d      	ldr	r0, [pc, #372]	; (800d810 <__gethex+0x2ec>)
 800d69c:	f001 f9c6 	bl	800ea2c <__assert_func>
 800d6a0:	3101      	adds	r1, #1
 800d6a2:	105b      	asrs	r3, r3, #1
 800d6a4:	e7ee      	b.n	800d684 <__gethex+0x160>
 800d6a6:	f100 0914 	add.w	r9, r0, #20
 800d6aa:	f04f 0b00 	mov.w	fp, #0
 800d6ae:	f1ca 0301 	rsb	r3, sl, #1
 800d6b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6b6:	f8cd b000 	str.w	fp, [sp]
 800d6ba:	9306      	str	r3, [sp, #24]
 800d6bc:	42b7      	cmp	r7, r6
 800d6be:	d340      	bcc.n	800d742 <__gethex+0x21e>
 800d6c0:	9802      	ldr	r0, [sp, #8]
 800d6c2:	9b00      	ldr	r3, [sp, #0]
 800d6c4:	f840 3b04 	str.w	r3, [r0], #4
 800d6c8:	eba0 0009 	sub.w	r0, r0, r9
 800d6cc:	1080      	asrs	r0, r0, #2
 800d6ce:	0146      	lsls	r6, r0, #5
 800d6d0:	6120      	str	r0, [r4, #16]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fb4c 	bl	800dd70 <__hi0bits>
 800d6d8:	1a30      	subs	r0, r6, r0
 800d6da:	f8d8 6000 	ldr.w	r6, [r8]
 800d6de:	42b0      	cmp	r0, r6
 800d6e0:	dd63      	ble.n	800d7aa <__gethex+0x286>
 800d6e2:	1b87      	subs	r7, r0, r6
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f000 fef0 	bl	800e4cc <__any_on>
 800d6ec:	4682      	mov	sl, r0
 800d6ee:	b1a8      	cbz	r0, 800d71c <__gethex+0x1f8>
 800d6f0:	1e7b      	subs	r3, r7, #1
 800d6f2:	1159      	asrs	r1, r3, #5
 800d6f4:	f003 021f 	and.w	r2, r3, #31
 800d6f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d6fc:	f04f 0a01 	mov.w	sl, #1
 800d700:	fa0a f202 	lsl.w	r2, sl, r2
 800d704:	420a      	tst	r2, r1
 800d706:	d009      	beq.n	800d71c <__gethex+0x1f8>
 800d708:	4553      	cmp	r3, sl
 800d70a:	dd05      	ble.n	800d718 <__gethex+0x1f4>
 800d70c:	1eb9      	subs	r1, r7, #2
 800d70e:	4620      	mov	r0, r4
 800d710:	f000 fedc 	bl	800e4cc <__any_on>
 800d714:	2800      	cmp	r0, #0
 800d716:	d145      	bne.n	800d7a4 <__gethex+0x280>
 800d718:	f04f 0a02 	mov.w	sl, #2
 800d71c:	4639      	mov	r1, r7
 800d71e:	4620      	mov	r0, r4
 800d720:	f7ff fe98 	bl	800d454 <rshift>
 800d724:	443d      	add	r5, r7
 800d726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d72a:	42ab      	cmp	r3, r5
 800d72c:	da4c      	bge.n	800d7c8 <__gethex+0x2a4>
 800d72e:	ee18 0a10 	vmov	r0, s16
 800d732:	4621      	mov	r1, r4
 800d734:	f000 fa6a 	bl	800dc0c <_Bfree>
 800d738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d73a:	2300      	movs	r3, #0
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	27a3      	movs	r7, #163	; 0xa3
 800d740:	e785      	b.n	800d64e <__gethex+0x12a>
 800d742:	1e73      	subs	r3, r6, #1
 800d744:	9a05      	ldr	r2, [sp, #20]
 800d746:	9303      	str	r3, [sp, #12]
 800d748:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d019      	beq.n	800d784 <__gethex+0x260>
 800d750:	f1bb 0f20 	cmp.w	fp, #32
 800d754:	d107      	bne.n	800d766 <__gethex+0x242>
 800d756:	9b02      	ldr	r3, [sp, #8]
 800d758:	9a00      	ldr	r2, [sp, #0]
 800d75a:	f843 2b04 	str.w	r2, [r3], #4
 800d75e:	9302      	str	r3, [sp, #8]
 800d760:	2300      	movs	r3, #0
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	469b      	mov	fp, r3
 800d766:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d76a:	f7ff fec5 	bl	800d4f8 <__hexdig_fun>
 800d76e:	9b00      	ldr	r3, [sp, #0]
 800d770:	f000 000f 	and.w	r0, r0, #15
 800d774:	fa00 f00b 	lsl.w	r0, r0, fp
 800d778:	4303      	orrs	r3, r0
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	f10b 0b04 	add.w	fp, fp, #4
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	e00d      	b.n	800d7a0 <__gethex+0x27c>
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	9a06      	ldr	r2, [sp, #24]
 800d788:	4413      	add	r3, r2
 800d78a:	42bb      	cmp	r3, r7
 800d78c:	d3e0      	bcc.n	800d750 <__gethex+0x22c>
 800d78e:	4618      	mov	r0, r3
 800d790:	9901      	ldr	r1, [sp, #4]
 800d792:	9307      	str	r3, [sp, #28]
 800d794:	4652      	mov	r2, sl
 800d796:	f001 f927 	bl	800e9e8 <strncmp>
 800d79a:	9b07      	ldr	r3, [sp, #28]
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d1d7      	bne.n	800d750 <__gethex+0x22c>
 800d7a0:	461e      	mov	r6, r3
 800d7a2:	e78b      	b.n	800d6bc <__gethex+0x198>
 800d7a4:	f04f 0a03 	mov.w	sl, #3
 800d7a8:	e7b8      	b.n	800d71c <__gethex+0x1f8>
 800d7aa:	da0a      	bge.n	800d7c2 <__gethex+0x29e>
 800d7ac:	1a37      	subs	r7, r6, r0
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	ee18 0a10 	vmov	r0, s16
 800d7b4:	463a      	mov	r2, r7
 800d7b6:	f000 fc45 	bl	800e044 <__lshift>
 800d7ba:	1bed      	subs	r5, r5, r7
 800d7bc:	4604      	mov	r4, r0
 800d7be:	f100 0914 	add.w	r9, r0, #20
 800d7c2:	f04f 0a00 	mov.w	sl, #0
 800d7c6:	e7ae      	b.n	800d726 <__gethex+0x202>
 800d7c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d7cc:	42a8      	cmp	r0, r5
 800d7ce:	dd72      	ble.n	800d8b6 <__gethex+0x392>
 800d7d0:	1b45      	subs	r5, r0, r5
 800d7d2:	42ae      	cmp	r6, r5
 800d7d4:	dc36      	bgt.n	800d844 <__gethex+0x320>
 800d7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d02a      	beq.n	800d834 <__gethex+0x310>
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d02c      	beq.n	800d83c <__gethex+0x318>
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d11c      	bne.n	800d820 <__gethex+0x2fc>
 800d7e6:	42ae      	cmp	r6, r5
 800d7e8:	d11a      	bne.n	800d820 <__gethex+0x2fc>
 800d7ea:	2e01      	cmp	r6, #1
 800d7ec:	d112      	bne.n	800d814 <__gethex+0x2f0>
 800d7ee:	9a04      	ldr	r2, [sp, #16]
 800d7f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	6123      	str	r3, [r4, #16]
 800d7fa:	f8c9 3000 	str.w	r3, [r9]
 800d7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d800:	2762      	movs	r7, #98	; 0x62
 800d802:	601c      	str	r4, [r3, #0]
 800d804:	e723      	b.n	800d64e <__gethex+0x12a>
 800d806:	bf00      	nop
 800d808:	0800f8c0 	.word	0x0800f8c0
 800d80c:	0800f848 	.word	0x0800f848
 800d810:	0800f859 	.word	0x0800f859
 800d814:	1e71      	subs	r1, r6, #1
 800d816:	4620      	mov	r0, r4
 800d818:	f000 fe58 	bl	800e4cc <__any_on>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d1e6      	bne.n	800d7ee <__gethex+0x2ca>
 800d820:	ee18 0a10 	vmov	r0, s16
 800d824:	4621      	mov	r1, r4
 800d826:	f000 f9f1 	bl	800dc0c <_Bfree>
 800d82a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d82c:	2300      	movs	r3, #0
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	2750      	movs	r7, #80	; 0x50
 800d832:	e70c      	b.n	800d64e <__gethex+0x12a>
 800d834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1f2      	bne.n	800d820 <__gethex+0x2fc>
 800d83a:	e7d8      	b.n	800d7ee <__gethex+0x2ca>
 800d83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1d5      	bne.n	800d7ee <__gethex+0x2ca>
 800d842:	e7ed      	b.n	800d820 <__gethex+0x2fc>
 800d844:	1e6f      	subs	r7, r5, #1
 800d846:	f1ba 0f00 	cmp.w	sl, #0
 800d84a:	d131      	bne.n	800d8b0 <__gethex+0x38c>
 800d84c:	b127      	cbz	r7, 800d858 <__gethex+0x334>
 800d84e:	4639      	mov	r1, r7
 800d850:	4620      	mov	r0, r4
 800d852:	f000 fe3b 	bl	800e4cc <__any_on>
 800d856:	4682      	mov	sl, r0
 800d858:	117b      	asrs	r3, r7, #5
 800d85a:	2101      	movs	r1, #1
 800d85c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d860:	f007 071f 	and.w	r7, r7, #31
 800d864:	fa01 f707 	lsl.w	r7, r1, r7
 800d868:	421f      	tst	r7, r3
 800d86a:	4629      	mov	r1, r5
 800d86c:	4620      	mov	r0, r4
 800d86e:	bf18      	it	ne
 800d870:	f04a 0a02 	orrne.w	sl, sl, #2
 800d874:	1b76      	subs	r6, r6, r5
 800d876:	f7ff fded 	bl	800d454 <rshift>
 800d87a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d87e:	2702      	movs	r7, #2
 800d880:	f1ba 0f00 	cmp.w	sl, #0
 800d884:	d048      	beq.n	800d918 <__gethex+0x3f4>
 800d886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d015      	beq.n	800d8ba <__gethex+0x396>
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d017      	beq.n	800d8c2 <__gethex+0x39e>
 800d892:	2b01      	cmp	r3, #1
 800d894:	d109      	bne.n	800d8aa <__gethex+0x386>
 800d896:	f01a 0f02 	tst.w	sl, #2
 800d89a:	d006      	beq.n	800d8aa <__gethex+0x386>
 800d89c:	f8d9 0000 	ldr.w	r0, [r9]
 800d8a0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d8a4:	f01a 0f01 	tst.w	sl, #1
 800d8a8:	d10e      	bne.n	800d8c8 <__gethex+0x3a4>
 800d8aa:	f047 0710 	orr.w	r7, r7, #16
 800d8ae:	e033      	b.n	800d918 <__gethex+0x3f4>
 800d8b0:	f04f 0a01 	mov.w	sl, #1
 800d8b4:	e7d0      	b.n	800d858 <__gethex+0x334>
 800d8b6:	2701      	movs	r7, #1
 800d8b8:	e7e2      	b.n	800d880 <__gethex+0x35c>
 800d8ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8bc:	f1c3 0301 	rsb	r3, r3, #1
 800d8c0:	9315      	str	r3, [sp, #84]	; 0x54
 800d8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d0f0      	beq.n	800d8aa <__gethex+0x386>
 800d8c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8cc:	f104 0314 	add.w	r3, r4, #20
 800d8d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8d8:	f04f 0c00 	mov.w	ip, #0
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8e6:	d01c      	beq.n	800d922 <__gethex+0x3fe>
 800d8e8:	3201      	adds	r2, #1
 800d8ea:	6002      	str	r2, [r0, #0]
 800d8ec:	2f02      	cmp	r7, #2
 800d8ee:	f104 0314 	add.w	r3, r4, #20
 800d8f2:	d13f      	bne.n	800d974 <__gethex+0x450>
 800d8f4:	f8d8 2000 	ldr.w	r2, [r8]
 800d8f8:	3a01      	subs	r2, #1
 800d8fa:	42b2      	cmp	r2, r6
 800d8fc:	d10a      	bne.n	800d914 <__gethex+0x3f0>
 800d8fe:	1171      	asrs	r1, r6, #5
 800d900:	2201      	movs	r2, #1
 800d902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d906:	f006 061f 	and.w	r6, r6, #31
 800d90a:	fa02 f606 	lsl.w	r6, r2, r6
 800d90e:	421e      	tst	r6, r3
 800d910:	bf18      	it	ne
 800d912:	4617      	movne	r7, r2
 800d914:	f047 0720 	orr.w	r7, r7, #32
 800d918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d91a:	601c      	str	r4, [r3, #0]
 800d91c:	9b04      	ldr	r3, [sp, #16]
 800d91e:	601d      	str	r5, [r3, #0]
 800d920:	e695      	b.n	800d64e <__gethex+0x12a>
 800d922:	4299      	cmp	r1, r3
 800d924:	f843 cc04 	str.w	ip, [r3, #-4]
 800d928:	d8d8      	bhi.n	800d8dc <__gethex+0x3b8>
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	459b      	cmp	fp, r3
 800d92e:	db19      	blt.n	800d964 <__gethex+0x440>
 800d930:	6861      	ldr	r1, [r4, #4]
 800d932:	ee18 0a10 	vmov	r0, s16
 800d936:	3101      	adds	r1, #1
 800d938:	f000 f928 	bl	800db8c <_Balloc>
 800d93c:	4681      	mov	r9, r0
 800d93e:	b918      	cbnz	r0, 800d948 <__gethex+0x424>
 800d940:	4b1a      	ldr	r3, [pc, #104]	; (800d9ac <__gethex+0x488>)
 800d942:	4602      	mov	r2, r0
 800d944:	2184      	movs	r1, #132	; 0x84
 800d946:	e6a8      	b.n	800d69a <__gethex+0x176>
 800d948:	6922      	ldr	r2, [r4, #16]
 800d94a:	3202      	adds	r2, #2
 800d94c:	f104 010c 	add.w	r1, r4, #12
 800d950:	0092      	lsls	r2, r2, #2
 800d952:	300c      	adds	r0, #12
 800d954:	f000 f90c 	bl	800db70 <memcpy>
 800d958:	4621      	mov	r1, r4
 800d95a:	ee18 0a10 	vmov	r0, s16
 800d95e:	f000 f955 	bl	800dc0c <_Bfree>
 800d962:	464c      	mov	r4, r9
 800d964:	6923      	ldr	r3, [r4, #16]
 800d966:	1c5a      	adds	r2, r3, #1
 800d968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d96c:	6122      	str	r2, [r4, #16]
 800d96e:	2201      	movs	r2, #1
 800d970:	615a      	str	r2, [r3, #20]
 800d972:	e7bb      	b.n	800d8ec <__gethex+0x3c8>
 800d974:	6922      	ldr	r2, [r4, #16]
 800d976:	455a      	cmp	r2, fp
 800d978:	dd0b      	ble.n	800d992 <__gethex+0x46e>
 800d97a:	2101      	movs	r1, #1
 800d97c:	4620      	mov	r0, r4
 800d97e:	f7ff fd69 	bl	800d454 <rshift>
 800d982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d986:	3501      	adds	r5, #1
 800d988:	42ab      	cmp	r3, r5
 800d98a:	f6ff aed0 	blt.w	800d72e <__gethex+0x20a>
 800d98e:	2701      	movs	r7, #1
 800d990:	e7c0      	b.n	800d914 <__gethex+0x3f0>
 800d992:	f016 061f 	ands.w	r6, r6, #31
 800d996:	d0fa      	beq.n	800d98e <__gethex+0x46a>
 800d998:	4453      	add	r3, sl
 800d99a:	f1c6 0620 	rsb	r6, r6, #32
 800d99e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d9a2:	f000 f9e5 	bl	800dd70 <__hi0bits>
 800d9a6:	42b0      	cmp	r0, r6
 800d9a8:	dbe7      	blt.n	800d97a <__gethex+0x456>
 800d9aa:	e7f0      	b.n	800d98e <__gethex+0x46a>
 800d9ac:	0800f848 	.word	0x0800f848

0800d9b0 <L_shift>:
 800d9b0:	f1c2 0208 	rsb	r2, r2, #8
 800d9b4:	0092      	lsls	r2, r2, #2
 800d9b6:	b570      	push	{r4, r5, r6, lr}
 800d9b8:	f1c2 0620 	rsb	r6, r2, #32
 800d9bc:	6843      	ldr	r3, [r0, #4]
 800d9be:	6804      	ldr	r4, [r0, #0]
 800d9c0:	fa03 f506 	lsl.w	r5, r3, r6
 800d9c4:	432c      	orrs	r4, r5
 800d9c6:	40d3      	lsrs	r3, r2
 800d9c8:	6004      	str	r4, [r0, #0]
 800d9ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9ce:	4288      	cmp	r0, r1
 800d9d0:	d3f4      	bcc.n	800d9bc <L_shift+0xc>
 800d9d2:	bd70      	pop	{r4, r5, r6, pc}

0800d9d4 <__match>:
 800d9d4:	b530      	push	{r4, r5, lr}
 800d9d6:	6803      	ldr	r3, [r0, #0]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9de:	b914      	cbnz	r4, 800d9e6 <__match+0x12>
 800d9e0:	6003      	str	r3, [r0, #0]
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	bd30      	pop	{r4, r5, pc}
 800d9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d9ee:	2d19      	cmp	r5, #25
 800d9f0:	bf98      	it	ls
 800d9f2:	3220      	addls	r2, #32
 800d9f4:	42a2      	cmp	r2, r4
 800d9f6:	d0f0      	beq.n	800d9da <__match+0x6>
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	e7f3      	b.n	800d9e4 <__match+0x10>

0800d9fc <__hexnan>:
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	680b      	ldr	r3, [r1, #0]
 800da02:	115e      	asrs	r6, r3, #5
 800da04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da08:	f013 031f 	ands.w	r3, r3, #31
 800da0c:	b087      	sub	sp, #28
 800da0e:	bf18      	it	ne
 800da10:	3604      	addne	r6, #4
 800da12:	2500      	movs	r5, #0
 800da14:	1f37      	subs	r7, r6, #4
 800da16:	4690      	mov	r8, r2
 800da18:	6802      	ldr	r2, [r0, #0]
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	4682      	mov	sl, r0
 800da1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800da22:	46b9      	mov	r9, r7
 800da24:	463c      	mov	r4, r7
 800da26:	9502      	str	r5, [sp, #8]
 800da28:	46ab      	mov	fp, r5
 800da2a:	7851      	ldrb	r1, [r2, #1]
 800da2c:	1c53      	adds	r3, r2, #1
 800da2e:	9303      	str	r3, [sp, #12]
 800da30:	b341      	cbz	r1, 800da84 <__hexnan+0x88>
 800da32:	4608      	mov	r0, r1
 800da34:	9205      	str	r2, [sp, #20]
 800da36:	9104      	str	r1, [sp, #16]
 800da38:	f7ff fd5e 	bl	800d4f8 <__hexdig_fun>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d14f      	bne.n	800dae0 <__hexnan+0xe4>
 800da40:	9904      	ldr	r1, [sp, #16]
 800da42:	9a05      	ldr	r2, [sp, #20]
 800da44:	2920      	cmp	r1, #32
 800da46:	d818      	bhi.n	800da7a <__hexnan+0x7e>
 800da48:	9b02      	ldr	r3, [sp, #8]
 800da4a:	459b      	cmp	fp, r3
 800da4c:	dd13      	ble.n	800da76 <__hexnan+0x7a>
 800da4e:	454c      	cmp	r4, r9
 800da50:	d206      	bcs.n	800da60 <__hexnan+0x64>
 800da52:	2d07      	cmp	r5, #7
 800da54:	dc04      	bgt.n	800da60 <__hexnan+0x64>
 800da56:	462a      	mov	r2, r5
 800da58:	4649      	mov	r1, r9
 800da5a:	4620      	mov	r0, r4
 800da5c:	f7ff ffa8 	bl	800d9b0 <L_shift>
 800da60:	4544      	cmp	r4, r8
 800da62:	d950      	bls.n	800db06 <__hexnan+0x10a>
 800da64:	2300      	movs	r3, #0
 800da66:	f1a4 0904 	sub.w	r9, r4, #4
 800da6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800da6e:	f8cd b008 	str.w	fp, [sp, #8]
 800da72:	464c      	mov	r4, r9
 800da74:	461d      	mov	r5, r3
 800da76:	9a03      	ldr	r2, [sp, #12]
 800da78:	e7d7      	b.n	800da2a <__hexnan+0x2e>
 800da7a:	2929      	cmp	r1, #41	; 0x29
 800da7c:	d156      	bne.n	800db2c <__hexnan+0x130>
 800da7e:	3202      	adds	r2, #2
 800da80:	f8ca 2000 	str.w	r2, [sl]
 800da84:	f1bb 0f00 	cmp.w	fp, #0
 800da88:	d050      	beq.n	800db2c <__hexnan+0x130>
 800da8a:	454c      	cmp	r4, r9
 800da8c:	d206      	bcs.n	800da9c <__hexnan+0xa0>
 800da8e:	2d07      	cmp	r5, #7
 800da90:	dc04      	bgt.n	800da9c <__hexnan+0xa0>
 800da92:	462a      	mov	r2, r5
 800da94:	4649      	mov	r1, r9
 800da96:	4620      	mov	r0, r4
 800da98:	f7ff ff8a 	bl	800d9b0 <L_shift>
 800da9c:	4544      	cmp	r4, r8
 800da9e:	d934      	bls.n	800db0a <__hexnan+0x10e>
 800daa0:	f1a8 0204 	sub.w	r2, r8, #4
 800daa4:	4623      	mov	r3, r4
 800daa6:	f853 1b04 	ldr.w	r1, [r3], #4
 800daaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800daae:	429f      	cmp	r7, r3
 800dab0:	d2f9      	bcs.n	800daa6 <__hexnan+0xaa>
 800dab2:	1b3b      	subs	r3, r7, r4
 800dab4:	f023 0303 	bic.w	r3, r3, #3
 800dab8:	3304      	adds	r3, #4
 800daba:	3401      	adds	r4, #1
 800dabc:	3e03      	subs	r6, #3
 800dabe:	42b4      	cmp	r4, r6
 800dac0:	bf88      	it	hi
 800dac2:	2304      	movhi	r3, #4
 800dac4:	4443      	add	r3, r8
 800dac6:	2200      	movs	r2, #0
 800dac8:	f843 2b04 	str.w	r2, [r3], #4
 800dacc:	429f      	cmp	r7, r3
 800dace:	d2fb      	bcs.n	800dac8 <__hexnan+0xcc>
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	b91b      	cbnz	r3, 800dadc <__hexnan+0xe0>
 800dad4:	4547      	cmp	r7, r8
 800dad6:	d127      	bne.n	800db28 <__hexnan+0x12c>
 800dad8:	2301      	movs	r3, #1
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	2005      	movs	r0, #5
 800dade:	e026      	b.n	800db2e <__hexnan+0x132>
 800dae0:	3501      	adds	r5, #1
 800dae2:	2d08      	cmp	r5, #8
 800dae4:	f10b 0b01 	add.w	fp, fp, #1
 800dae8:	dd06      	ble.n	800daf8 <__hexnan+0xfc>
 800daea:	4544      	cmp	r4, r8
 800daec:	d9c3      	bls.n	800da76 <__hexnan+0x7a>
 800daee:	2300      	movs	r3, #0
 800daf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800daf4:	2501      	movs	r5, #1
 800daf6:	3c04      	subs	r4, #4
 800daf8:	6822      	ldr	r2, [r4, #0]
 800dafa:	f000 000f 	and.w	r0, r0, #15
 800dafe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800db02:	6022      	str	r2, [r4, #0]
 800db04:	e7b7      	b.n	800da76 <__hexnan+0x7a>
 800db06:	2508      	movs	r5, #8
 800db08:	e7b5      	b.n	800da76 <__hexnan+0x7a>
 800db0a:	9b01      	ldr	r3, [sp, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d0df      	beq.n	800dad0 <__hexnan+0xd4>
 800db10:	f04f 32ff 	mov.w	r2, #4294967295
 800db14:	f1c3 0320 	rsb	r3, r3, #32
 800db18:	fa22 f303 	lsr.w	r3, r2, r3
 800db1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800db20:	401a      	ands	r2, r3
 800db22:	f846 2c04 	str.w	r2, [r6, #-4]
 800db26:	e7d3      	b.n	800dad0 <__hexnan+0xd4>
 800db28:	3f04      	subs	r7, #4
 800db2a:	e7d1      	b.n	800dad0 <__hexnan+0xd4>
 800db2c:	2004      	movs	r0, #4
 800db2e:	b007      	add	sp, #28
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db34 <_localeconv_r>:
 800db34:	4800      	ldr	r0, [pc, #0]	; (800db38 <_localeconv_r+0x4>)
 800db36:	4770      	bx	lr
 800db38:	20000264 	.word	0x20000264

0800db3c <malloc>:
 800db3c:	4b02      	ldr	r3, [pc, #8]	; (800db48 <malloc+0xc>)
 800db3e:	4601      	mov	r1, r0
 800db40:	6818      	ldr	r0, [r3, #0]
 800db42:	f000 bd67 	b.w	800e614 <_malloc_r>
 800db46:	bf00      	nop
 800db48:	2000010c 	.word	0x2000010c

0800db4c <__ascii_mbtowc>:
 800db4c:	b082      	sub	sp, #8
 800db4e:	b901      	cbnz	r1, 800db52 <__ascii_mbtowc+0x6>
 800db50:	a901      	add	r1, sp, #4
 800db52:	b142      	cbz	r2, 800db66 <__ascii_mbtowc+0x1a>
 800db54:	b14b      	cbz	r3, 800db6a <__ascii_mbtowc+0x1e>
 800db56:	7813      	ldrb	r3, [r2, #0]
 800db58:	600b      	str	r3, [r1, #0]
 800db5a:	7812      	ldrb	r2, [r2, #0]
 800db5c:	1e10      	subs	r0, r2, #0
 800db5e:	bf18      	it	ne
 800db60:	2001      	movne	r0, #1
 800db62:	b002      	add	sp, #8
 800db64:	4770      	bx	lr
 800db66:	4610      	mov	r0, r2
 800db68:	e7fb      	b.n	800db62 <__ascii_mbtowc+0x16>
 800db6a:	f06f 0001 	mvn.w	r0, #1
 800db6e:	e7f8      	b.n	800db62 <__ascii_mbtowc+0x16>

0800db70 <memcpy>:
 800db70:	440a      	add	r2, r1
 800db72:	4291      	cmp	r1, r2
 800db74:	f100 33ff 	add.w	r3, r0, #4294967295
 800db78:	d100      	bne.n	800db7c <memcpy+0xc>
 800db7a:	4770      	bx	lr
 800db7c:	b510      	push	{r4, lr}
 800db7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db86:	4291      	cmp	r1, r2
 800db88:	d1f9      	bne.n	800db7e <memcpy+0xe>
 800db8a:	bd10      	pop	{r4, pc}

0800db8c <_Balloc>:
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db90:	4604      	mov	r4, r0
 800db92:	460d      	mov	r5, r1
 800db94:	b976      	cbnz	r6, 800dbb4 <_Balloc+0x28>
 800db96:	2010      	movs	r0, #16
 800db98:	f7ff ffd0 	bl	800db3c <malloc>
 800db9c:	4602      	mov	r2, r0
 800db9e:	6260      	str	r0, [r4, #36]	; 0x24
 800dba0:	b920      	cbnz	r0, 800dbac <_Balloc+0x20>
 800dba2:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <_Balloc+0x78>)
 800dba4:	4818      	ldr	r0, [pc, #96]	; (800dc08 <_Balloc+0x7c>)
 800dba6:	2166      	movs	r1, #102	; 0x66
 800dba8:	f000 ff40 	bl	800ea2c <__assert_func>
 800dbac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbb0:	6006      	str	r6, [r0, #0]
 800dbb2:	60c6      	str	r6, [r0, #12]
 800dbb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dbb6:	68f3      	ldr	r3, [r6, #12]
 800dbb8:	b183      	cbz	r3, 800dbdc <_Balloc+0x50>
 800dbba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbc2:	b9b8      	cbnz	r0, 800dbf4 <_Balloc+0x68>
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	fa01 f605 	lsl.w	r6, r1, r5
 800dbca:	1d72      	adds	r2, r6, #5
 800dbcc:	0092      	lsls	r2, r2, #2
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f000 fc9d 	bl	800e50e <_calloc_r>
 800dbd4:	b160      	cbz	r0, 800dbf0 <_Balloc+0x64>
 800dbd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbda:	e00e      	b.n	800dbfa <_Balloc+0x6e>
 800dbdc:	2221      	movs	r2, #33	; 0x21
 800dbde:	2104      	movs	r1, #4
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f000 fc94 	bl	800e50e <_calloc_r>
 800dbe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbe8:	60f0      	str	r0, [r6, #12]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d1e4      	bne.n	800dbba <_Balloc+0x2e>
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
 800dbf4:	6802      	ldr	r2, [r0, #0]
 800dbf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc00:	e7f7      	b.n	800dbf2 <_Balloc+0x66>
 800dc02:	bf00      	nop
 800dc04:	0800f7d6 	.word	0x0800f7d6
 800dc08:	0800f8d4 	.word	0x0800f8d4

0800dc0c <_Bfree>:
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc10:	4605      	mov	r5, r0
 800dc12:	460c      	mov	r4, r1
 800dc14:	b976      	cbnz	r6, 800dc34 <_Bfree+0x28>
 800dc16:	2010      	movs	r0, #16
 800dc18:	f7ff ff90 	bl	800db3c <malloc>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	6268      	str	r0, [r5, #36]	; 0x24
 800dc20:	b920      	cbnz	r0, 800dc2c <_Bfree+0x20>
 800dc22:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <_Bfree+0x3c>)
 800dc24:	4809      	ldr	r0, [pc, #36]	; (800dc4c <_Bfree+0x40>)
 800dc26:	218a      	movs	r1, #138	; 0x8a
 800dc28:	f000 ff00 	bl	800ea2c <__assert_func>
 800dc2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc30:	6006      	str	r6, [r0, #0]
 800dc32:	60c6      	str	r6, [r0, #12]
 800dc34:	b13c      	cbz	r4, 800dc46 <_Bfree+0x3a>
 800dc36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc38:	6862      	ldr	r2, [r4, #4]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc40:	6021      	str	r1, [r4, #0]
 800dc42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	0800f7d6 	.word	0x0800f7d6
 800dc4c:	0800f8d4 	.word	0x0800f8d4

0800dc50 <__multadd>:
 800dc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc54:	690d      	ldr	r5, [r1, #16]
 800dc56:	4607      	mov	r7, r0
 800dc58:	460c      	mov	r4, r1
 800dc5a:	461e      	mov	r6, r3
 800dc5c:	f101 0c14 	add.w	ip, r1, #20
 800dc60:	2000      	movs	r0, #0
 800dc62:	f8dc 3000 	ldr.w	r3, [ip]
 800dc66:	b299      	uxth	r1, r3
 800dc68:	fb02 6101 	mla	r1, r2, r1, r6
 800dc6c:	0c1e      	lsrs	r6, r3, #16
 800dc6e:	0c0b      	lsrs	r3, r1, #16
 800dc70:	fb02 3306 	mla	r3, r2, r6, r3
 800dc74:	b289      	uxth	r1, r1
 800dc76:	3001      	adds	r0, #1
 800dc78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc7c:	4285      	cmp	r5, r0
 800dc7e:	f84c 1b04 	str.w	r1, [ip], #4
 800dc82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc86:	dcec      	bgt.n	800dc62 <__multadd+0x12>
 800dc88:	b30e      	cbz	r6, 800dcce <__multadd+0x7e>
 800dc8a:	68a3      	ldr	r3, [r4, #8]
 800dc8c:	42ab      	cmp	r3, r5
 800dc8e:	dc19      	bgt.n	800dcc4 <__multadd+0x74>
 800dc90:	6861      	ldr	r1, [r4, #4]
 800dc92:	4638      	mov	r0, r7
 800dc94:	3101      	adds	r1, #1
 800dc96:	f7ff ff79 	bl	800db8c <_Balloc>
 800dc9a:	4680      	mov	r8, r0
 800dc9c:	b928      	cbnz	r0, 800dcaa <__multadd+0x5a>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	4b0c      	ldr	r3, [pc, #48]	; (800dcd4 <__multadd+0x84>)
 800dca2:	480d      	ldr	r0, [pc, #52]	; (800dcd8 <__multadd+0x88>)
 800dca4:	21b5      	movs	r1, #181	; 0xb5
 800dca6:	f000 fec1 	bl	800ea2c <__assert_func>
 800dcaa:	6922      	ldr	r2, [r4, #16]
 800dcac:	3202      	adds	r2, #2
 800dcae:	f104 010c 	add.w	r1, r4, #12
 800dcb2:	0092      	lsls	r2, r2, #2
 800dcb4:	300c      	adds	r0, #12
 800dcb6:	f7ff ff5b 	bl	800db70 <memcpy>
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4638      	mov	r0, r7
 800dcbe:	f7ff ffa5 	bl	800dc0c <_Bfree>
 800dcc2:	4644      	mov	r4, r8
 800dcc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcc8:	3501      	adds	r5, #1
 800dcca:	615e      	str	r6, [r3, #20]
 800dccc:	6125      	str	r5, [r4, #16]
 800dcce:	4620      	mov	r0, r4
 800dcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd4:	0800f848 	.word	0x0800f848
 800dcd8:	0800f8d4 	.word	0x0800f8d4

0800dcdc <__s2b>:
 800dcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce0:	460c      	mov	r4, r1
 800dce2:	4615      	mov	r5, r2
 800dce4:	461f      	mov	r7, r3
 800dce6:	2209      	movs	r2, #9
 800dce8:	3308      	adds	r3, #8
 800dcea:	4606      	mov	r6, r0
 800dcec:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	db09      	blt.n	800dd0c <__s2b+0x30>
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f7ff ff47 	bl	800db8c <_Balloc>
 800dcfe:	b940      	cbnz	r0, 800dd12 <__s2b+0x36>
 800dd00:	4602      	mov	r2, r0
 800dd02:	4b19      	ldr	r3, [pc, #100]	; (800dd68 <__s2b+0x8c>)
 800dd04:	4819      	ldr	r0, [pc, #100]	; (800dd6c <__s2b+0x90>)
 800dd06:	21ce      	movs	r1, #206	; 0xce
 800dd08:	f000 fe90 	bl	800ea2c <__assert_func>
 800dd0c:	0052      	lsls	r2, r2, #1
 800dd0e:	3101      	adds	r1, #1
 800dd10:	e7f0      	b.n	800dcf4 <__s2b+0x18>
 800dd12:	9b08      	ldr	r3, [sp, #32]
 800dd14:	6143      	str	r3, [r0, #20]
 800dd16:	2d09      	cmp	r5, #9
 800dd18:	f04f 0301 	mov.w	r3, #1
 800dd1c:	6103      	str	r3, [r0, #16]
 800dd1e:	dd16      	ble.n	800dd4e <__s2b+0x72>
 800dd20:	f104 0909 	add.w	r9, r4, #9
 800dd24:	46c8      	mov	r8, r9
 800dd26:	442c      	add	r4, r5
 800dd28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	3b30      	subs	r3, #48	; 0x30
 800dd30:	220a      	movs	r2, #10
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ff8c 	bl	800dc50 <__multadd>
 800dd38:	45a0      	cmp	r8, r4
 800dd3a:	d1f5      	bne.n	800dd28 <__s2b+0x4c>
 800dd3c:	f1a5 0408 	sub.w	r4, r5, #8
 800dd40:	444c      	add	r4, r9
 800dd42:	1b2d      	subs	r5, r5, r4
 800dd44:	1963      	adds	r3, r4, r5
 800dd46:	42bb      	cmp	r3, r7
 800dd48:	db04      	blt.n	800dd54 <__s2b+0x78>
 800dd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd4e:	340a      	adds	r4, #10
 800dd50:	2509      	movs	r5, #9
 800dd52:	e7f6      	b.n	800dd42 <__s2b+0x66>
 800dd54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd58:	4601      	mov	r1, r0
 800dd5a:	3b30      	subs	r3, #48	; 0x30
 800dd5c:	220a      	movs	r2, #10
 800dd5e:	4630      	mov	r0, r6
 800dd60:	f7ff ff76 	bl	800dc50 <__multadd>
 800dd64:	e7ee      	b.n	800dd44 <__s2b+0x68>
 800dd66:	bf00      	nop
 800dd68:	0800f848 	.word	0x0800f848
 800dd6c:	0800f8d4 	.word	0x0800f8d4

0800dd70 <__hi0bits>:
 800dd70:	0c03      	lsrs	r3, r0, #16
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	b9d3      	cbnz	r3, 800ddac <__hi0bits+0x3c>
 800dd76:	0400      	lsls	r0, r0, #16
 800dd78:	2310      	movs	r3, #16
 800dd7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd7e:	bf04      	itt	eq
 800dd80:	0200      	lsleq	r0, r0, #8
 800dd82:	3308      	addeq	r3, #8
 800dd84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd88:	bf04      	itt	eq
 800dd8a:	0100      	lsleq	r0, r0, #4
 800dd8c:	3304      	addeq	r3, #4
 800dd8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd92:	bf04      	itt	eq
 800dd94:	0080      	lsleq	r0, r0, #2
 800dd96:	3302      	addeq	r3, #2
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	db05      	blt.n	800dda8 <__hi0bits+0x38>
 800dd9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dda0:	f103 0301 	add.w	r3, r3, #1
 800dda4:	bf08      	it	eq
 800dda6:	2320      	moveq	r3, #32
 800dda8:	4618      	mov	r0, r3
 800ddaa:	4770      	bx	lr
 800ddac:	2300      	movs	r3, #0
 800ddae:	e7e4      	b.n	800dd7a <__hi0bits+0xa>

0800ddb0 <__lo0bits>:
 800ddb0:	6803      	ldr	r3, [r0, #0]
 800ddb2:	f013 0207 	ands.w	r2, r3, #7
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	d00b      	beq.n	800ddd2 <__lo0bits+0x22>
 800ddba:	07da      	lsls	r2, r3, #31
 800ddbc:	d423      	bmi.n	800de06 <__lo0bits+0x56>
 800ddbe:	0798      	lsls	r0, r3, #30
 800ddc0:	bf49      	itett	mi
 800ddc2:	085b      	lsrmi	r3, r3, #1
 800ddc4:	089b      	lsrpl	r3, r3, #2
 800ddc6:	2001      	movmi	r0, #1
 800ddc8:	600b      	strmi	r3, [r1, #0]
 800ddca:	bf5c      	itt	pl
 800ddcc:	600b      	strpl	r3, [r1, #0]
 800ddce:	2002      	movpl	r0, #2
 800ddd0:	4770      	bx	lr
 800ddd2:	b298      	uxth	r0, r3
 800ddd4:	b9a8      	cbnz	r0, 800de02 <__lo0bits+0x52>
 800ddd6:	0c1b      	lsrs	r3, r3, #16
 800ddd8:	2010      	movs	r0, #16
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	b90a      	cbnz	r2, 800dde2 <__lo0bits+0x32>
 800ddde:	3008      	adds	r0, #8
 800dde0:	0a1b      	lsrs	r3, r3, #8
 800dde2:	071a      	lsls	r2, r3, #28
 800dde4:	bf04      	itt	eq
 800dde6:	091b      	lsreq	r3, r3, #4
 800dde8:	3004      	addeq	r0, #4
 800ddea:	079a      	lsls	r2, r3, #30
 800ddec:	bf04      	itt	eq
 800ddee:	089b      	lsreq	r3, r3, #2
 800ddf0:	3002      	addeq	r0, #2
 800ddf2:	07da      	lsls	r2, r3, #31
 800ddf4:	d403      	bmi.n	800ddfe <__lo0bits+0x4e>
 800ddf6:	085b      	lsrs	r3, r3, #1
 800ddf8:	f100 0001 	add.w	r0, r0, #1
 800ddfc:	d005      	beq.n	800de0a <__lo0bits+0x5a>
 800ddfe:	600b      	str	r3, [r1, #0]
 800de00:	4770      	bx	lr
 800de02:	4610      	mov	r0, r2
 800de04:	e7e9      	b.n	800ddda <__lo0bits+0x2a>
 800de06:	2000      	movs	r0, #0
 800de08:	4770      	bx	lr
 800de0a:	2020      	movs	r0, #32
 800de0c:	4770      	bx	lr
	...

0800de10 <__i2b>:
 800de10:	b510      	push	{r4, lr}
 800de12:	460c      	mov	r4, r1
 800de14:	2101      	movs	r1, #1
 800de16:	f7ff feb9 	bl	800db8c <_Balloc>
 800de1a:	4602      	mov	r2, r0
 800de1c:	b928      	cbnz	r0, 800de2a <__i2b+0x1a>
 800de1e:	4b05      	ldr	r3, [pc, #20]	; (800de34 <__i2b+0x24>)
 800de20:	4805      	ldr	r0, [pc, #20]	; (800de38 <__i2b+0x28>)
 800de22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de26:	f000 fe01 	bl	800ea2c <__assert_func>
 800de2a:	2301      	movs	r3, #1
 800de2c:	6144      	str	r4, [r0, #20]
 800de2e:	6103      	str	r3, [r0, #16]
 800de30:	bd10      	pop	{r4, pc}
 800de32:	bf00      	nop
 800de34:	0800f848 	.word	0x0800f848
 800de38:	0800f8d4 	.word	0x0800f8d4

0800de3c <__multiply>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	4691      	mov	r9, r2
 800de42:	690a      	ldr	r2, [r1, #16]
 800de44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de48:	429a      	cmp	r2, r3
 800de4a:	bfb8      	it	lt
 800de4c:	460b      	movlt	r3, r1
 800de4e:	460c      	mov	r4, r1
 800de50:	bfbc      	itt	lt
 800de52:	464c      	movlt	r4, r9
 800de54:	4699      	movlt	r9, r3
 800de56:	6927      	ldr	r7, [r4, #16]
 800de58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de5c:	68a3      	ldr	r3, [r4, #8]
 800de5e:	6861      	ldr	r1, [r4, #4]
 800de60:	eb07 060a 	add.w	r6, r7, sl
 800de64:	42b3      	cmp	r3, r6
 800de66:	b085      	sub	sp, #20
 800de68:	bfb8      	it	lt
 800de6a:	3101      	addlt	r1, #1
 800de6c:	f7ff fe8e 	bl	800db8c <_Balloc>
 800de70:	b930      	cbnz	r0, 800de80 <__multiply+0x44>
 800de72:	4602      	mov	r2, r0
 800de74:	4b44      	ldr	r3, [pc, #272]	; (800df88 <__multiply+0x14c>)
 800de76:	4845      	ldr	r0, [pc, #276]	; (800df8c <__multiply+0x150>)
 800de78:	f240 115d 	movw	r1, #349	; 0x15d
 800de7c:	f000 fdd6 	bl	800ea2c <__assert_func>
 800de80:	f100 0514 	add.w	r5, r0, #20
 800de84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de88:	462b      	mov	r3, r5
 800de8a:	2200      	movs	r2, #0
 800de8c:	4543      	cmp	r3, r8
 800de8e:	d321      	bcc.n	800ded4 <__multiply+0x98>
 800de90:	f104 0314 	add.w	r3, r4, #20
 800de94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800de98:	f109 0314 	add.w	r3, r9, #20
 800de9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dea0:	9202      	str	r2, [sp, #8]
 800dea2:	1b3a      	subs	r2, r7, r4
 800dea4:	3a15      	subs	r2, #21
 800dea6:	f022 0203 	bic.w	r2, r2, #3
 800deaa:	3204      	adds	r2, #4
 800deac:	f104 0115 	add.w	r1, r4, #21
 800deb0:	428f      	cmp	r7, r1
 800deb2:	bf38      	it	cc
 800deb4:	2204      	movcc	r2, #4
 800deb6:	9201      	str	r2, [sp, #4]
 800deb8:	9a02      	ldr	r2, [sp, #8]
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	429a      	cmp	r2, r3
 800debe:	d80c      	bhi.n	800deda <__multiply+0x9e>
 800dec0:	2e00      	cmp	r6, #0
 800dec2:	dd03      	ble.n	800decc <__multiply+0x90>
 800dec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d05a      	beq.n	800df82 <__multiply+0x146>
 800decc:	6106      	str	r6, [r0, #16]
 800dece:	b005      	add	sp, #20
 800ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded4:	f843 2b04 	str.w	r2, [r3], #4
 800ded8:	e7d8      	b.n	800de8c <__multiply+0x50>
 800deda:	f8b3 a000 	ldrh.w	sl, [r3]
 800dede:	f1ba 0f00 	cmp.w	sl, #0
 800dee2:	d024      	beq.n	800df2e <__multiply+0xf2>
 800dee4:	f104 0e14 	add.w	lr, r4, #20
 800dee8:	46a9      	mov	r9, r5
 800deea:	f04f 0c00 	mov.w	ip, #0
 800deee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800def2:	f8d9 1000 	ldr.w	r1, [r9]
 800def6:	fa1f fb82 	uxth.w	fp, r2
 800defa:	b289      	uxth	r1, r1
 800defc:	fb0a 110b 	mla	r1, sl, fp, r1
 800df00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df04:	f8d9 2000 	ldr.w	r2, [r9]
 800df08:	4461      	add	r1, ip
 800df0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df0e:	fb0a c20b 	mla	r2, sl, fp, ip
 800df12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df16:	b289      	uxth	r1, r1
 800df18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df1c:	4577      	cmp	r7, lr
 800df1e:	f849 1b04 	str.w	r1, [r9], #4
 800df22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df26:	d8e2      	bhi.n	800deee <__multiply+0xb2>
 800df28:	9a01      	ldr	r2, [sp, #4]
 800df2a:	f845 c002 	str.w	ip, [r5, r2]
 800df2e:	9a03      	ldr	r2, [sp, #12]
 800df30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df34:	3304      	adds	r3, #4
 800df36:	f1b9 0f00 	cmp.w	r9, #0
 800df3a:	d020      	beq.n	800df7e <__multiply+0x142>
 800df3c:	6829      	ldr	r1, [r5, #0]
 800df3e:	f104 0c14 	add.w	ip, r4, #20
 800df42:	46ae      	mov	lr, r5
 800df44:	f04f 0a00 	mov.w	sl, #0
 800df48:	f8bc b000 	ldrh.w	fp, [ip]
 800df4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df50:	fb09 220b 	mla	r2, r9, fp, r2
 800df54:	4492      	add	sl, r2
 800df56:	b289      	uxth	r1, r1
 800df58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800df5c:	f84e 1b04 	str.w	r1, [lr], #4
 800df60:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df64:	f8be 1000 	ldrh.w	r1, [lr]
 800df68:	0c12      	lsrs	r2, r2, #16
 800df6a:	fb09 1102 	mla	r1, r9, r2, r1
 800df6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800df72:	4567      	cmp	r7, ip
 800df74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df78:	d8e6      	bhi.n	800df48 <__multiply+0x10c>
 800df7a:	9a01      	ldr	r2, [sp, #4]
 800df7c:	50a9      	str	r1, [r5, r2]
 800df7e:	3504      	adds	r5, #4
 800df80:	e79a      	b.n	800deb8 <__multiply+0x7c>
 800df82:	3e01      	subs	r6, #1
 800df84:	e79c      	b.n	800dec0 <__multiply+0x84>
 800df86:	bf00      	nop
 800df88:	0800f848 	.word	0x0800f848
 800df8c:	0800f8d4 	.word	0x0800f8d4

0800df90 <__pow5mult>:
 800df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df94:	4615      	mov	r5, r2
 800df96:	f012 0203 	ands.w	r2, r2, #3
 800df9a:	4606      	mov	r6, r0
 800df9c:	460f      	mov	r7, r1
 800df9e:	d007      	beq.n	800dfb0 <__pow5mult+0x20>
 800dfa0:	4c25      	ldr	r4, [pc, #148]	; (800e038 <__pow5mult+0xa8>)
 800dfa2:	3a01      	subs	r2, #1
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfaa:	f7ff fe51 	bl	800dc50 <__multadd>
 800dfae:	4607      	mov	r7, r0
 800dfb0:	10ad      	asrs	r5, r5, #2
 800dfb2:	d03d      	beq.n	800e030 <__pow5mult+0xa0>
 800dfb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dfb6:	b97c      	cbnz	r4, 800dfd8 <__pow5mult+0x48>
 800dfb8:	2010      	movs	r0, #16
 800dfba:	f7ff fdbf 	bl	800db3c <malloc>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	6270      	str	r0, [r6, #36]	; 0x24
 800dfc2:	b928      	cbnz	r0, 800dfd0 <__pow5mult+0x40>
 800dfc4:	4b1d      	ldr	r3, [pc, #116]	; (800e03c <__pow5mult+0xac>)
 800dfc6:	481e      	ldr	r0, [pc, #120]	; (800e040 <__pow5mult+0xb0>)
 800dfc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dfcc:	f000 fd2e 	bl	800ea2c <__assert_func>
 800dfd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfd4:	6004      	str	r4, [r0, #0]
 800dfd6:	60c4      	str	r4, [r0, #12]
 800dfd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dfdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfe0:	b94c      	cbnz	r4, 800dff6 <__pow5mult+0x66>
 800dfe2:	f240 2171 	movw	r1, #625	; 0x271
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f7ff ff12 	bl	800de10 <__i2b>
 800dfec:	2300      	movs	r3, #0
 800dfee:	f8c8 0008 	str.w	r0, [r8, #8]
 800dff2:	4604      	mov	r4, r0
 800dff4:	6003      	str	r3, [r0, #0]
 800dff6:	f04f 0900 	mov.w	r9, #0
 800dffa:	07eb      	lsls	r3, r5, #31
 800dffc:	d50a      	bpl.n	800e014 <__pow5mult+0x84>
 800dffe:	4639      	mov	r1, r7
 800e000:	4622      	mov	r2, r4
 800e002:	4630      	mov	r0, r6
 800e004:	f7ff ff1a 	bl	800de3c <__multiply>
 800e008:	4639      	mov	r1, r7
 800e00a:	4680      	mov	r8, r0
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7ff fdfd 	bl	800dc0c <_Bfree>
 800e012:	4647      	mov	r7, r8
 800e014:	106d      	asrs	r5, r5, #1
 800e016:	d00b      	beq.n	800e030 <__pow5mult+0xa0>
 800e018:	6820      	ldr	r0, [r4, #0]
 800e01a:	b938      	cbnz	r0, 800e02c <__pow5mult+0x9c>
 800e01c:	4622      	mov	r2, r4
 800e01e:	4621      	mov	r1, r4
 800e020:	4630      	mov	r0, r6
 800e022:	f7ff ff0b 	bl	800de3c <__multiply>
 800e026:	6020      	str	r0, [r4, #0]
 800e028:	f8c0 9000 	str.w	r9, [r0]
 800e02c:	4604      	mov	r4, r0
 800e02e:	e7e4      	b.n	800dffa <__pow5mult+0x6a>
 800e030:	4638      	mov	r0, r7
 800e032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e036:	bf00      	nop
 800e038:	0800fa20 	.word	0x0800fa20
 800e03c:	0800f7d6 	.word	0x0800f7d6
 800e040:	0800f8d4 	.word	0x0800f8d4

0800e044 <__lshift>:
 800e044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e048:	460c      	mov	r4, r1
 800e04a:	6849      	ldr	r1, [r1, #4]
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e052:	68a3      	ldr	r3, [r4, #8]
 800e054:	4607      	mov	r7, r0
 800e056:	4691      	mov	r9, r2
 800e058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e05c:	f108 0601 	add.w	r6, r8, #1
 800e060:	42b3      	cmp	r3, r6
 800e062:	db0b      	blt.n	800e07c <__lshift+0x38>
 800e064:	4638      	mov	r0, r7
 800e066:	f7ff fd91 	bl	800db8c <_Balloc>
 800e06a:	4605      	mov	r5, r0
 800e06c:	b948      	cbnz	r0, 800e082 <__lshift+0x3e>
 800e06e:	4602      	mov	r2, r0
 800e070:	4b2a      	ldr	r3, [pc, #168]	; (800e11c <__lshift+0xd8>)
 800e072:	482b      	ldr	r0, [pc, #172]	; (800e120 <__lshift+0xdc>)
 800e074:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e078:	f000 fcd8 	bl	800ea2c <__assert_func>
 800e07c:	3101      	adds	r1, #1
 800e07e:	005b      	lsls	r3, r3, #1
 800e080:	e7ee      	b.n	800e060 <__lshift+0x1c>
 800e082:	2300      	movs	r3, #0
 800e084:	f100 0114 	add.w	r1, r0, #20
 800e088:	f100 0210 	add.w	r2, r0, #16
 800e08c:	4618      	mov	r0, r3
 800e08e:	4553      	cmp	r3, sl
 800e090:	db37      	blt.n	800e102 <__lshift+0xbe>
 800e092:	6920      	ldr	r0, [r4, #16]
 800e094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e098:	f104 0314 	add.w	r3, r4, #20
 800e09c:	f019 091f 	ands.w	r9, r9, #31
 800e0a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e0a8:	d02f      	beq.n	800e10a <__lshift+0xc6>
 800e0aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e0ae:	468a      	mov	sl, r1
 800e0b0:	f04f 0c00 	mov.w	ip, #0
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	fa02 f209 	lsl.w	r2, r2, r9
 800e0ba:	ea42 020c 	orr.w	r2, r2, ip
 800e0be:	f84a 2b04 	str.w	r2, [sl], #4
 800e0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0c6:	4298      	cmp	r0, r3
 800e0c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e0cc:	d8f2      	bhi.n	800e0b4 <__lshift+0x70>
 800e0ce:	1b03      	subs	r3, r0, r4
 800e0d0:	3b15      	subs	r3, #21
 800e0d2:	f023 0303 	bic.w	r3, r3, #3
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	f104 0215 	add.w	r2, r4, #21
 800e0dc:	4290      	cmp	r0, r2
 800e0de:	bf38      	it	cc
 800e0e0:	2304      	movcc	r3, #4
 800e0e2:	f841 c003 	str.w	ip, [r1, r3]
 800e0e6:	f1bc 0f00 	cmp.w	ip, #0
 800e0ea:	d001      	beq.n	800e0f0 <__lshift+0xac>
 800e0ec:	f108 0602 	add.w	r6, r8, #2
 800e0f0:	3e01      	subs	r6, #1
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	612e      	str	r6, [r5, #16]
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	f7ff fd88 	bl	800dc0c <_Bfree>
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e102:	f842 0f04 	str.w	r0, [r2, #4]!
 800e106:	3301      	adds	r3, #1
 800e108:	e7c1      	b.n	800e08e <__lshift+0x4a>
 800e10a:	3904      	subs	r1, #4
 800e10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e110:	f841 2f04 	str.w	r2, [r1, #4]!
 800e114:	4298      	cmp	r0, r3
 800e116:	d8f9      	bhi.n	800e10c <__lshift+0xc8>
 800e118:	e7ea      	b.n	800e0f0 <__lshift+0xac>
 800e11a:	bf00      	nop
 800e11c:	0800f848 	.word	0x0800f848
 800e120:	0800f8d4 	.word	0x0800f8d4

0800e124 <__mcmp>:
 800e124:	b530      	push	{r4, r5, lr}
 800e126:	6902      	ldr	r2, [r0, #16]
 800e128:	690c      	ldr	r4, [r1, #16]
 800e12a:	1b12      	subs	r2, r2, r4
 800e12c:	d10e      	bne.n	800e14c <__mcmp+0x28>
 800e12e:	f100 0314 	add.w	r3, r0, #20
 800e132:	3114      	adds	r1, #20
 800e134:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e138:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e13c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e140:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e144:	42a5      	cmp	r5, r4
 800e146:	d003      	beq.n	800e150 <__mcmp+0x2c>
 800e148:	d305      	bcc.n	800e156 <__mcmp+0x32>
 800e14a:	2201      	movs	r2, #1
 800e14c:	4610      	mov	r0, r2
 800e14e:	bd30      	pop	{r4, r5, pc}
 800e150:	4283      	cmp	r3, r0
 800e152:	d3f3      	bcc.n	800e13c <__mcmp+0x18>
 800e154:	e7fa      	b.n	800e14c <__mcmp+0x28>
 800e156:	f04f 32ff 	mov.w	r2, #4294967295
 800e15a:	e7f7      	b.n	800e14c <__mcmp+0x28>

0800e15c <__mdiff>:
 800e15c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e160:	460c      	mov	r4, r1
 800e162:	4606      	mov	r6, r0
 800e164:	4611      	mov	r1, r2
 800e166:	4620      	mov	r0, r4
 800e168:	4690      	mov	r8, r2
 800e16a:	f7ff ffdb 	bl	800e124 <__mcmp>
 800e16e:	1e05      	subs	r5, r0, #0
 800e170:	d110      	bne.n	800e194 <__mdiff+0x38>
 800e172:	4629      	mov	r1, r5
 800e174:	4630      	mov	r0, r6
 800e176:	f7ff fd09 	bl	800db8c <_Balloc>
 800e17a:	b930      	cbnz	r0, 800e18a <__mdiff+0x2e>
 800e17c:	4b3a      	ldr	r3, [pc, #232]	; (800e268 <__mdiff+0x10c>)
 800e17e:	4602      	mov	r2, r0
 800e180:	f240 2132 	movw	r1, #562	; 0x232
 800e184:	4839      	ldr	r0, [pc, #228]	; (800e26c <__mdiff+0x110>)
 800e186:	f000 fc51 	bl	800ea2c <__assert_func>
 800e18a:	2301      	movs	r3, #1
 800e18c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e194:	bfa4      	itt	ge
 800e196:	4643      	movge	r3, r8
 800e198:	46a0      	movge	r8, r4
 800e19a:	4630      	mov	r0, r6
 800e19c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1a0:	bfa6      	itte	ge
 800e1a2:	461c      	movge	r4, r3
 800e1a4:	2500      	movge	r5, #0
 800e1a6:	2501      	movlt	r5, #1
 800e1a8:	f7ff fcf0 	bl	800db8c <_Balloc>
 800e1ac:	b920      	cbnz	r0, 800e1b8 <__mdiff+0x5c>
 800e1ae:	4b2e      	ldr	r3, [pc, #184]	; (800e268 <__mdiff+0x10c>)
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e1b6:	e7e5      	b.n	800e184 <__mdiff+0x28>
 800e1b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1bc:	6926      	ldr	r6, [r4, #16]
 800e1be:	60c5      	str	r5, [r0, #12]
 800e1c0:	f104 0914 	add.w	r9, r4, #20
 800e1c4:	f108 0514 	add.w	r5, r8, #20
 800e1c8:	f100 0e14 	add.w	lr, r0, #20
 800e1cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e1d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e1d4:	f108 0210 	add.w	r2, r8, #16
 800e1d8:	46f2      	mov	sl, lr
 800e1da:	2100      	movs	r1, #0
 800e1dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1e4:	fa1f f883 	uxth.w	r8, r3
 800e1e8:	fa11 f18b 	uxtah	r1, r1, fp
 800e1ec:	0c1b      	lsrs	r3, r3, #16
 800e1ee:	eba1 0808 	sub.w	r8, r1, r8
 800e1f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1fa:	fa1f f888 	uxth.w	r8, r8
 800e1fe:	1419      	asrs	r1, r3, #16
 800e200:	454e      	cmp	r6, r9
 800e202:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e206:	f84a 3b04 	str.w	r3, [sl], #4
 800e20a:	d8e7      	bhi.n	800e1dc <__mdiff+0x80>
 800e20c:	1b33      	subs	r3, r6, r4
 800e20e:	3b15      	subs	r3, #21
 800e210:	f023 0303 	bic.w	r3, r3, #3
 800e214:	3304      	adds	r3, #4
 800e216:	3415      	adds	r4, #21
 800e218:	42a6      	cmp	r6, r4
 800e21a:	bf38      	it	cc
 800e21c:	2304      	movcc	r3, #4
 800e21e:	441d      	add	r5, r3
 800e220:	4473      	add	r3, lr
 800e222:	469e      	mov	lr, r3
 800e224:	462e      	mov	r6, r5
 800e226:	4566      	cmp	r6, ip
 800e228:	d30e      	bcc.n	800e248 <__mdiff+0xec>
 800e22a:	f10c 0203 	add.w	r2, ip, #3
 800e22e:	1b52      	subs	r2, r2, r5
 800e230:	f022 0203 	bic.w	r2, r2, #3
 800e234:	3d03      	subs	r5, #3
 800e236:	45ac      	cmp	ip, r5
 800e238:	bf38      	it	cc
 800e23a:	2200      	movcc	r2, #0
 800e23c:	441a      	add	r2, r3
 800e23e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e242:	b17b      	cbz	r3, 800e264 <__mdiff+0x108>
 800e244:	6107      	str	r7, [r0, #16]
 800e246:	e7a3      	b.n	800e190 <__mdiff+0x34>
 800e248:	f856 8b04 	ldr.w	r8, [r6], #4
 800e24c:	fa11 f288 	uxtah	r2, r1, r8
 800e250:	1414      	asrs	r4, r2, #16
 800e252:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e256:	b292      	uxth	r2, r2
 800e258:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e25c:	f84e 2b04 	str.w	r2, [lr], #4
 800e260:	1421      	asrs	r1, r4, #16
 800e262:	e7e0      	b.n	800e226 <__mdiff+0xca>
 800e264:	3f01      	subs	r7, #1
 800e266:	e7ea      	b.n	800e23e <__mdiff+0xe2>
 800e268:	0800f848 	.word	0x0800f848
 800e26c:	0800f8d4 	.word	0x0800f8d4

0800e270 <__ulp>:
 800e270:	b082      	sub	sp, #8
 800e272:	ed8d 0b00 	vstr	d0, [sp]
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	4912      	ldr	r1, [pc, #72]	; (800e2c4 <__ulp+0x54>)
 800e27a:	4019      	ands	r1, r3
 800e27c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e280:	2900      	cmp	r1, #0
 800e282:	dd05      	ble.n	800e290 <__ulp+0x20>
 800e284:	2200      	movs	r2, #0
 800e286:	460b      	mov	r3, r1
 800e288:	ec43 2b10 	vmov	d0, r2, r3
 800e28c:	b002      	add	sp, #8
 800e28e:	4770      	bx	lr
 800e290:	4249      	negs	r1, r1
 800e292:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e296:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e29a:	f04f 0200 	mov.w	r2, #0
 800e29e:	f04f 0300 	mov.w	r3, #0
 800e2a2:	da04      	bge.n	800e2ae <__ulp+0x3e>
 800e2a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e2a8:	fa41 f300 	asr.w	r3, r1, r0
 800e2ac:	e7ec      	b.n	800e288 <__ulp+0x18>
 800e2ae:	f1a0 0114 	sub.w	r1, r0, #20
 800e2b2:	291e      	cmp	r1, #30
 800e2b4:	bfda      	itte	le
 800e2b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e2ba:	fa20 f101 	lsrle.w	r1, r0, r1
 800e2be:	2101      	movgt	r1, #1
 800e2c0:	460a      	mov	r2, r1
 800e2c2:	e7e1      	b.n	800e288 <__ulp+0x18>
 800e2c4:	7ff00000 	.word	0x7ff00000

0800e2c8 <__b2d>:
 800e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ca:	6905      	ldr	r5, [r0, #16]
 800e2cc:	f100 0714 	add.w	r7, r0, #20
 800e2d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e2d4:	1f2e      	subs	r6, r5, #4
 800e2d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f7ff fd48 	bl	800dd70 <__hi0bits>
 800e2e0:	f1c0 0320 	rsb	r3, r0, #32
 800e2e4:	280a      	cmp	r0, #10
 800e2e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e364 <__b2d+0x9c>
 800e2ea:	600b      	str	r3, [r1, #0]
 800e2ec:	dc14      	bgt.n	800e318 <__b2d+0x50>
 800e2ee:	f1c0 0e0b 	rsb	lr, r0, #11
 800e2f2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e2f6:	42b7      	cmp	r7, r6
 800e2f8:	ea41 030c 	orr.w	r3, r1, ip
 800e2fc:	bf34      	ite	cc
 800e2fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e302:	2100      	movcs	r1, #0
 800e304:	3015      	adds	r0, #21
 800e306:	fa04 f000 	lsl.w	r0, r4, r0
 800e30a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e30e:	ea40 0201 	orr.w	r2, r0, r1
 800e312:	ec43 2b10 	vmov	d0, r2, r3
 800e316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e318:	42b7      	cmp	r7, r6
 800e31a:	bf3a      	itte	cc
 800e31c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e320:	f1a5 0608 	subcc.w	r6, r5, #8
 800e324:	2100      	movcs	r1, #0
 800e326:	380b      	subs	r0, #11
 800e328:	d017      	beq.n	800e35a <__b2d+0x92>
 800e32a:	f1c0 0c20 	rsb	ip, r0, #32
 800e32e:	fa04 f500 	lsl.w	r5, r4, r0
 800e332:	42be      	cmp	r6, r7
 800e334:	fa21 f40c 	lsr.w	r4, r1, ip
 800e338:	ea45 0504 	orr.w	r5, r5, r4
 800e33c:	bf8c      	ite	hi
 800e33e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e342:	2400      	movls	r4, #0
 800e344:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e348:	fa01 f000 	lsl.w	r0, r1, r0
 800e34c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e350:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e354:	ea40 0204 	orr.w	r2, r0, r4
 800e358:	e7db      	b.n	800e312 <__b2d+0x4a>
 800e35a:	ea44 030c 	orr.w	r3, r4, ip
 800e35e:	460a      	mov	r2, r1
 800e360:	e7d7      	b.n	800e312 <__b2d+0x4a>
 800e362:	bf00      	nop
 800e364:	3ff00000 	.word	0x3ff00000

0800e368 <__d2b>:
 800e368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e36c:	4689      	mov	r9, r1
 800e36e:	2101      	movs	r1, #1
 800e370:	ec57 6b10 	vmov	r6, r7, d0
 800e374:	4690      	mov	r8, r2
 800e376:	f7ff fc09 	bl	800db8c <_Balloc>
 800e37a:	4604      	mov	r4, r0
 800e37c:	b930      	cbnz	r0, 800e38c <__d2b+0x24>
 800e37e:	4602      	mov	r2, r0
 800e380:	4b25      	ldr	r3, [pc, #148]	; (800e418 <__d2b+0xb0>)
 800e382:	4826      	ldr	r0, [pc, #152]	; (800e41c <__d2b+0xb4>)
 800e384:	f240 310a 	movw	r1, #778	; 0x30a
 800e388:	f000 fb50 	bl	800ea2c <__assert_func>
 800e38c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e394:	bb35      	cbnz	r5, 800e3e4 <__d2b+0x7c>
 800e396:	2e00      	cmp	r6, #0
 800e398:	9301      	str	r3, [sp, #4]
 800e39a:	d028      	beq.n	800e3ee <__d2b+0x86>
 800e39c:	4668      	mov	r0, sp
 800e39e:	9600      	str	r6, [sp, #0]
 800e3a0:	f7ff fd06 	bl	800ddb0 <__lo0bits>
 800e3a4:	9900      	ldr	r1, [sp, #0]
 800e3a6:	b300      	cbz	r0, 800e3ea <__d2b+0x82>
 800e3a8:	9a01      	ldr	r2, [sp, #4]
 800e3aa:	f1c0 0320 	rsb	r3, r0, #32
 800e3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e3b2:	430b      	orrs	r3, r1
 800e3b4:	40c2      	lsrs	r2, r0
 800e3b6:	6163      	str	r3, [r4, #20]
 800e3b8:	9201      	str	r2, [sp, #4]
 800e3ba:	9b01      	ldr	r3, [sp, #4]
 800e3bc:	61a3      	str	r3, [r4, #24]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	bf14      	ite	ne
 800e3c2:	2202      	movne	r2, #2
 800e3c4:	2201      	moveq	r2, #1
 800e3c6:	6122      	str	r2, [r4, #16]
 800e3c8:	b1d5      	cbz	r5, 800e400 <__d2b+0x98>
 800e3ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e3ce:	4405      	add	r5, r0
 800e3d0:	f8c9 5000 	str.w	r5, [r9]
 800e3d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e3d8:	f8c8 0000 	str.w	r0, [r8]
 800e3dc:	4620      	mov	r0, r4
 800e3de:	b003      	add	sp, #12
 800e3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3e8:	e7d5      	b.n	800e396 <__d2b+0x2e>
 800e3ea:	6161      	str	r1, [r4, #20]
 800e3ec:	e7e5      	b.n	800e3ba <__d2b+0x52>
 800e3ee:	a801      	add	r0, sp, #4
 800e3f0:	f7ff fcde 	bl	800ddb0 <__lo0bits>
 800e3f4:	9b01      	ldr	r3, [sp, #4]
 800e3f6:	6163      	str	r3, [r4, #20]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	6122      	str	r2, [r4, #16]
 800e3fc:	3020      	adds	r0, #32
 800e3fe:	e7e3      	b.n	800e3c8 <__d2b+0x60>
 800e400:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e404:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e408:	f8c9 0000 	str.w	r0, [r9]
 800e40c:	6918      	ldr	r0, [r3, #16]
 800e40e:	f7ff fcaf 	bl	800dd70 <__hi0bits>
 800e412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e416:	e7df      	b.n	800e3d8 <__d2b+0x70>
 800e418:	0800f848 	.word	0x0800f848
 800e41c:	0800f8d4 	.word	0x0800f8d4

0800e420 <__ratio>:
 800e420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	4688      	mov	r8, r1
 800e426:	4669      	mov	r1, sp
 800e428:	4681      	mov	r9, r0
 800e42a:	f7ff ff4d 	bl	800e2c8 <__b2d>
 800e42e:	a901      	add	r1, sp, #4
 800e430:	4640      	mov	r0, r8
 800e432:	ec55 4b10 	vmov	r4, r5, d0
 800e436:	f7ff ff47 	bl	800e2c8 <__b2d>
 800e43a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e43e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e442:	eba3 0c02 	sub.w	ip, r3, r2
 800e446:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e44a:	1a9b      	subs	r3, r3, r2
 800e44c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e450:	ec51 0b10 	vmov	r0, r1, d0
 800e454:	2b00      	cmp	r3, #0
 800e456:	bfd6      	itet	le
 800e458:	460a      	movle	r2, r1
 800e45a:	462a      	movgt	r2, r5
 800e45c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e460:	468b      	mov	fp, r1
 800e462:	462f      	mov	r7, r5
 800e464:	bfd4      	ite	le
 800e466:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e46a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e46e:	4620      	mov	r0, r4
 800e470:	ee10 2a10 	vmov	r2, s0
 800e474:	465b      	mov	r3, fp
 800e476:	4639      	mov	r1, r7
 800e478:	f7f2 fa08 	bl	800088c <__aeabi_ddiv>
 800e47c:	ec41 0b10 	vmov	d0, r0, r1
 800e480:	b003      	add	sp, #12
 800e482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e486 <__copybits>:
 800e486:	3901      	subs	r1, #1
 800e488:	b570      	push	{r4, r5, r6, lr}
 800e48a:	1149      	asrs	r1, r1, #5
 800e48c:	6914      	ldr	r4, [r2, #16]
 800e48e:	3101      	adds	r1, #1
 800e490:	f102 0314 	add.w	r3, r2, #20
 800e494:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e498:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e49c:	1f05      	subs	r5, r0, #4
 800e49e:	42a3      	cmp	r3, r4
 800e4a0:	d30c      	bcc.n	800e4bc <__copybits+0x36>
 800e4a2:	1aa3      	subs	r3, r4, r2
 800e4a4:	3b11      	subs	r3, #17
 800e4a6:	f023 0303 	bic.w	r3, r3, #3
 800e4aa:	3211      	adds	r2, #17
 800e4ac:	42a2      	cmp	r2, r4
 800e4ae:	bf88      	it	hi
 800e4b0:	2300      	movhi	r3, #0
 800e4b2:	4418      	add	r0, r3
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4288      	cmp	r0, r1
 800e4b8:	d305      	bcc.n	800e4c6 <__copybits+0x40>
 800e4ba:	bd70      	pop	{r4, r5, r6, pc}
 800e4bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800e4c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800e4c4:	e7eb      	b.n	800e49e <__copybits+0x18>
 800e4c6:	f840 3b04 	str.w	r3, [r0], #4
 800e4ca:	e7f4      	b.n	800e4b6 <__copybits+0x30>

0800e4cc <__any_on>:
 800e4cc:	f100 0214 	add.w	r2, r0, #20
 800e4d0:	6900      	ldr	r0, [r0, #16]
 800e4d2:	114b      	asrs	r3, r1, #5
 800e4d4:	4298      	cmp	r0, r3
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	db11      	blt.n	800e4fe <__any_on+0x32>
 800e4da:	dd0a      	ble.n	800e4f2 <__any_on+0x26>
 800e4dc:	f011 011f 	ands.w	r1, r1, #31
 800e4e0:	d007      	beq.n	800e4f2 <__any_on+0x26>
 800e4e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4e6:	fa24 f001 	lsr.w	r0, r4, r1
 800e4ea:	fa00 f101 	lsl.w	r1, r0, r1
 800e4ee:	428c      	cmp	r4, r1
 800e4f0:	d10b      	bne.n	800e50a <__any_on+0x3e>
 800e4f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d803      	bhi.n	800e502 <__any_on+0x36>
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	4603      	mov	r3, r0
 800e500:	e7f7      	b.n	800e4f2 <__any_on+0x26>
 800e502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e506:	2900      	cmp	r1, #0
 800e508:	d0f5      	beq.n	800e4f6 <__any_on+0x2a>
 800e50a:	2001      	movs	r0, #1
 800e50c:	e7f6      	b.n	800e4fc <__any_on+0x30>

0800e50e <_calloc_r>:
 800e50e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e510:	fba1 2402 	umull	r2, r4, r1, r2
 800e514:	b94c      	cbnz	r4, 800e52a <_calloc_r+0x1c>
 800e516:	4611      	mov	r1, r2
 800e518:	9201      	str	r2, [sp, #4]
 800e51a:	f000 f87b 	bl	800e614 <_malloc_r>
 800e51e:	9a01      	ldr	r2, [sp, #4]
 800e520:	4605      	mov	r5, r0
 800e522:	b930      	cbnz	r0, 800e532 <_calloc_r+0x24>
 800e524:	4628      	mov	r0, r5
 800e526:	b003      	add	sp, #12
 800e528:	bd30      	pop	{r4, r5, pc}
 800e52a:	220c      	movs	r2, #12
 800e52c:	6002      	str	r2, [r0, #0]
 800e52e:	2500      	movs	r5, #0
 800e530:	e7f8      	b.n	800e524 <_calloc_r+0x16>
 800e532:	4621      	mov	r1, r4
 800e534:	f7fc fbc0 	bl	800acb8 <memset>
 800e538:	e7f4      	b.n	800e524 <_calloc_r+0x16>
	...

0800e53c <_free_r>:
 800e53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e53e:	2900      	cmp	r1, #0
 800e540:	d044      	beq.n	800e5cc <_free_r+0x90>
 800e542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e546:	9001      	str	r0, [sp, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f1a1 0404 	sub.w	r4, r1, #4
 800e54e:	bfb8      	it	lt
 800e550:	18e4      	addlt	r4, r4, r3
 800e552:	f000 fab5 	bl	800eac0 <__malloc_lock>
 800e556:	4a1e      	ldr	r2, [pc, #120]	; (800e5d0 <_free_r+0x94>)
 800e558:	9801      	ldr	r0, [sp, #4]
 800e55a:	6813      	ldr	r3, [r2, #0]
 800e55c:	b933      	cbnz	r3, 800e56c <_free_r+0x30>
 800e55e:	6063      	str	r3, [r4, #4]
 800e560:	6014      	str	r4, [r2, #0]
 800e562:	b003      	add	sp, #12
 800e564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e568:	f000 bab0 	b.w	800eacc <__malloc_unlock>
 800e56c:	42a3      	cmp	r3, r4
 800e56e:	d908      	bls.n	800e582 <_free_r+0x46>
 800e570:	6825      	ldr	r5, [r4, #0]
 800e572:	1961      	adds	r1, r4, r5
 800e574:	428b      	cmp	r3, r1
 800e576:	bf01      	itttt	eq
 800e578:	6819      	ldreq	r1, [r3, #0]
 800e57a:	685b      	ldreq	r3, [r3, #4]
 800e57c:	1949      	addeq	r1, r1, r5
 800e57e:	6021      	streq	r1, [r4, #0]
 800e580:	e7ed      	b.n	800e55e <_free_r+0x22>
 800e582:	461a      	mov	r2, r3
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	b10b      	cbz	r3, 800e58c <_free_r+0x50>
 800e588:	42a3      	cmp	r3, r4
 800e58a:	d9fa      	bls.n	800e582 <_free_r+0x46>
 800e58c:	6811      	ldr	r1, [r2, #0]
 800e58e:	1855      	adds	r5, r2, r1
 800e590:	42a5      	cmp	r5, r4
 800e592:	d10b      	bne.n	800e5ac <_free_r+0x70>
 800e594:	6824      	ldr	r4, [r4, #0]
 800e596:	4421      	add	r1, r4
 800e598:	1854      	adds	r4, r2, r1
 800e59a:	42a3      	cmp	r3, r4
 800e59c:	6011      	str	r1, [r2, #0]
 800e59e:	d1e0      	bne.n	800e562 <_free_r+0x26>
 800e5a0:	681c      	ldr	r4, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	6053      	str	r3, [r2, #4]
 800e5a6:	4421      	add	r1, r4
 800e5a8:	6011      	str	r1, [r2, #0]
 800e5aa:	e7da      	b.n	800e562 <_free_r+0x26>
 800e5ac:	d902      	bls.n	800e5b4 <_free_r+0x78>
 800e5ae:	230c      	movs	r3, #12
 800e5b0:	6003      	str	r3, [r0, #0]
 800e5b2:	e7d6      	b.n	800e562 <_free_r+0x26>
 800e5b4:	6825      	ldr	r5, [r4, #0]
 800e5b6:	1961      	adds	r1, r4, r5
 800e5b8:	428b      	cmp	r3, r1
 800e5ba:	bf04      	itt	eq
 800e5bc:	6819      	ldreq	r1, [r3, #0]
 800e5be:	685b      	ldreq	r3, [r3, #4]
 800e5c0:	6063      	str	r3, [r4, #4]
 800e5c2:	bf04      	itt	eq
 800e5c4:	1949      	addeq	r1, r1, r5
 800e5c6:	6021      	streq	r1, [r4, #0]
 800e5c8:	6054      	str	r4, [r2, #4]
 800e5ca:	e7ca      	b.n	800e562 <_free_r+0x26>
 800e5cc:	b003      	add	sp, #12
 800e5ce:	bd30      	pop	{r4, r5, pc}
 800e5d0:	20002108 	.word	0x20002108

0800e5d4 <sbrk_aligned>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	4e0e      	ldr	r6, [pc, #56]	; (800e610 <sbrk_aligned+0x3c>)
 800e5d8:	460c      	mov	r4, r1
 800e5da:	6831      	ldr	r1, [r6, #0]
 800e5dc:	4605      	mov	r5, r0
 800e5de:	b911      	cbnz	r1, 800e5e6 <sbrk_aligned+0x12>
 800e5e0:	f000 f9f2 	bl	800e9c8 <_sbrk_r>
 800e5e4:	6030      	str	r0, [r6, #0]
 800e5e6:	4621      	mov	r1, r4
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	f000 f9ed 	bl	800e9c8 <_sbrk_r>
 800e5ee:	1c43      	adds	r3, r0, #1
 800e5f0:	d00a      	beq.n	800e608 <sbrk_aligned+0x34>
 800e5f2:	1cc4      	adds	r4, r0, #3
 800e5f4:	f024 0403 	bic.w	r4, r4, #3
 800e5f8:	42a0      	cmp	r0, r4
 800e5fa:	d007      	beq.n	800e60c <sbrk_aligned+0x38>
 800e5fc:	1a21      	subs	r1, r4, r0
 800e5fe:	4628      	mov	r0, r5
 800e600:	f000 f9e2 	bl	800e9c8 <_sbrk_r>
 800e604:	3001      	adds	r0, #1
 800e606:	d101      	bne.n	800e60c <sbrk_aligned+0x38>
 800e608:	f04f 34ff 	mov.w	r4, #4294967295
 800e60c:	4620      	mov	r0, r4
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	2000210c 	.word	0x2000210c

0800e614 <_malloc_r>:
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e618:	1ccd      	adds	r5, r1, #3
 800e61a:	f025 0503 	bic.w	r5, r5, #3
 800e61e:	3508      	adds	r5, #8
 800e620:	2d0c      	cmp	r5, #12
 800e622:	bf38      	it	cc
 800e624:	250c      	movcc	r5, #12
 800e626:	2d00      	cmp	r5, #0
 800e628:	4607      	mov	r7, r0
 800e62a:	db01      	blt.n	800e630 <_malloc_r+0x1c>
 800e62c:	42a9      	cmp	r1, r5
 800e62e:	d905      	bls.n	800e63c <_malloc_r+0x28>
 800e630:	230c      	movs	r3, #12
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	2600      	movs	r6, #0
 800e636:	4630      	mov	r0, r6
 800e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e63c:	4e2e      	ldr	r6, [pc, #184]	; (800e6f8 <_malloc_r+0xe4>)
 800e63e:	f000 fa3f 	bl	800eac0 <__malloc_lock>
 800e642:	6833      	ldr	r3, [r6, #0]
 800e644:	461c      	mov	r4, r3
 800e646:	bb34      	cbnz	r4, 800e696 <_malloc_r+0x82>
 800e648:	4629      	mov	r1, r5
 800e64a:	4638      	mov	r0, r7
 800e64c:	f7ff ffc2 	bl	800e5d4 <sbrk_aligned>
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	4604      	mov	r4, r0
 800e654:	d14d      	bne.n	800e6f2 <_malloc_r+0xde>
 800e656:	6834      	ldr	r4, [r6, #0]
 800e658:	4626      	mov	r6, r4
 800e65a:	2e00      	cmp	r6, #0
 800e65c:	d140      	bne.n	800e6e0 <_malloc_r+0xcc>
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	4631      	mov	r1, r6
 800e662:	4638      	mov	r0, r7
 800e664:	eb04 0803 	add.w	r8, r4, r3
 800e668:	f000 f9ae 	bl	800e9c8 <_sbrk_r>
 800e66c:	4580      	cmp	r8, r0
 800e66e:	d13a      	bne.n	800e6e6 <_malloc_r+0xd2>
 800e670:	6821      	ldr	r1, [r4, #0]
 800e672:	3503      	adds	r5, #3
 800e674:	1a6d      	subs	r5, r5, r1
 800e676:	f025 0503 	bic.w	r5, r5, #3
 800e67a:	3508      	adds	r5, #8
 800e67c:	2d0c      	cmp	r5, #12
 800e67e:	bf38      	it	cc
 800e680:	250c      	movcc	r5, #12
 800e682:	4629      	mov	r1, r5
 800e684:	4638      	mov	r0, r7
 800e686:	f7ff ffa5 	bl	800e5d4 <sbrk_aligned>
 800e68a:	3001      	adds	r0, #1
 800e68c:	d02b      	beq.n	800e6e6 <_malloc_r+0xd2>
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	442b      	add	r3, r5
 800e692:	6023      	str	r3, [r4, #0]
 800e694:	e00e      	b.n	800e6b4 <_malloc_r+0xa0>
 800e696:	6822      	ldr	r2, [r4, #0]
 800e698:	1b52      	subs	r2, r2, r5
 800e69a:	d41e      	bmi.n	800e6da <_malloc_r+0xc6>
 800e69c:	2a0b      	cmp	r2, #11
 800e69e:	d916      	bls.n	800e6ce <_malloc_r+0xba>
 800e6a0:	1961      	adds	r1, r4, r5
 800e6a2:	42a3      	cmp	r3, r4
 800e6a4:	6025      	str	r5, [r4, #0]
 800e6a6:	bf18      	it	ne
 800e6a8:	6059      	strne	r1, [r3, #4]
 800e6aa:	6863      	ldr	r3, [r4, #4]
 800e6ac:	bf08      	it	eq
 800e6ae:	6031      	streq	r1, [r6, #0]
 800e6b0:	5162      	str	r2, [r4, r5]
 800e6b2:	604b      	str	r3, [r1, #4]
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	f104 060b 	add.w	r6, r4, #11
 800e6ba:	f000 fa07 	bl	800eacc <__malloc_unlock>
 800e6be:	f026 0607 	bic.w	r6, r6, #7
 800e6c2:	1d23      	adds	r3, r4, #4
 800e6c4:	1af2      	subs	r2, r6, r3
 800e6c6:	d0b6      	beq.n	800e636 <_malloc_r+0x22>
 800e6c8:	1b9b      	subs	r3, r3, r6
 800e6ca:	50a3      	str	r3, [r4, r2]
 800e6cc:	e7b3      	b.n	800e636 <_malloc_r+0x22>
 800e6ce:	6862      	ldr	r2, [r4, #4]
 800e6d0:	42a3      	cmp	r3, r4
 800e6d2:	bf0c      	ite	eq
 800e6d4:	6032      	streq	r2, [r6, #0]
 800e6d6:	605a      	strne	r2, [r3, #4]
 800e6d8:	e7ec      	b.n	800e6b4 <_malloc_r+0xa0>
 800e6da:	4623      	mov	r3, r4
 800e6dc:	6864      	ldr	r4, [r4, #4]
 800e6de:	e7b2      	b.n	800e646 <_malloc_r+0x32>
 800e6e0:	4634      	mov	r4, r6
 800e6e2:	6876      	ldr	r6, [r6, #4]
 800e6e4:	e7b9      	b.n	800e65a <_malloc_r+0x46>
 800e6e6:	230c      	movs	r3, #12
 800e6e8:	603b      	str	r3, [r7, #0]
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	f000 f9ee 	bl	800eacc <__malloc_unlock>
 800e6f0:	e7a1      	b.n	800e636 <_malloc_r+0x22>
 800e6f2:	6025      	str	r5, [r4, #0]
 800e6f4:	e7de      	b.n	800e6b4 <_malloc_r+0xa0>
 800e6f6:	bf00      	nop
 800e6f8:	20002108 	.word	0x20002108

0800e6fc <__ssputs_r>:
 800e6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	688e      	ldr	r6, [r1, #8]
 800e702:	429e      	cmp	r6, r3
 800e704:	4682      	mov	sl, r0
 800e706:	460c      	mov	r4, r1
 800e708:	4690      	mov	r8, r2
 800e70a:	461f      	mov	r7, r3
 800e70c:	d838      	bhi.n	800e780 <__ssputs_r+0x84>
 800e70e:	898a      	ldrh	r2, [r1, #12]
 800e710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e714:	d032      	beq.n	800e77c <__ssputs_r+0x80>
 800e716:	6825      	ldr	r5, [r4, #0]
 800e718:	6909      	ldr	r1, [r1, #16]
 800e71a:	eba5 0901 	sub.w	r9, r5, r1
 800e71e:	6965      	ldr	r5, [r4, #20]
 800e720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e728:	3301      	adds	r3, #1
 800e72a:	444b      	add	r3, r9
 800e72c:	106d      	asrs	r5, r5, #1
 800e72e:	429d      	cmp	r5, r3
 800e730:	bf38      	it	cc
 800e732:	461d      	movcc	r5, r3
 800e734:	0553      	lsls	r3, r2, #21
 800e736:	d531      	bpl.n	800e79c <__ssputs_r+0xa0>
 800e738:	4629      	mov	r1, r5
 800e73a:	f7ff ff6b 	bl	800e614 <_malloc_r>
 800e73e:	4606      	mov	r6, r0
 800e740:	b950      	cbnz	r0, 800e758 <__ssputs_r+0x5c>
 800e742:	230c      	movs	r3, #12
 800e744:	f8ca 3000 	str.w	r3, [sl]
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e74e:	81a3      	strh	r3, [r4, #12]
 800e750:	f04f 30ff 	mov.w	r0, #4294967295
 800e754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e758:	6921      	ldr	r1, [r4, #16]
 800e75a:	464a      	mov	r2, r9
 800e75c:	f7ff fa08 	bl	800db70 <memcpy>
 800e760:	89a3      	ldrh	r3, [r4, #12]
 800e762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e76a:	81a3      	strh	r3, [r4, #12]
 800e76c:	6126      	str	r6, [r4, #16]
 800e76e:	6165      	str	r5, [r4, #20]
 800e770:	444e      	add	r6, r9
 800e772:	eba5 0509 	sub.w	r5, r5, r9
 800e776:	6026      	str	r6, [r4, #0]
 800e778:	60a5      	str	r5, [r4, #8]
 800e77a:	463e      	mov	r6, r7
 800e77c:	42be      	cmp	r6, r7
 800e77e:	d900      	bls.n	800e782 <__ssputs_r+0x86>
 800e780:	463e      	mov	r6, r7
 800e782:	6820      	ldr	r0, [r4, #0]
 800e784:	4632      	mov	r2, r6
 800e786:	4641      	mov	r1, r8
 800e788:	f000 f980 	bl	800ea8c <memmove>
 800e78c:	68a3      	ldr	r3, [r4, #8]
 800e78e:	1b9b      	subs	r3, r3, r6
 800e790:	60a3      	str	r3, [r4, #8]
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	4433      	add	r3, r6
 800e796:	6023      	str	r3, [r4, #0]
 800e798:	2000      	movs	r0, #0
 800e79a:	e7db      	b.n	800e754 <__ssputs_r+0x58>
 800e79c:	462a      	mov	r2, r5
 800e79e:	f000 f99b 	bl	800ead8 <_realloc_r>
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d1e1      	bne.n	800e76c <__ssputs_r+0x70>
 800e7a8:	6921      	ldr	r1, [r4, #16]
 800e7aa:	4650      	mov	r0, sl
 800e7ac:	f7ff fec6 	bl	800e53c <_free_r>
 800e7b0:	e7c7      	b.n	800e742 <__ssputs_r+0x46>
	...

0800e7b4 <_svfiprintf_r>:
 800e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b8:	4698      	mov	r8, r3
 800e7ba:	898b      	ldrh	r3, [r1, #12]
 800e7bc:	061b      	lsls	r3, r3, #24
 800e7be:	b09d      	sub	sp, #116	; 0x74
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	d50e      	bpl.n	800e7e6 <_svfiprintf_r+0x32>
 800e7c8:	690b      	ldr	r3, [r1, #16]
 800e7ca:	b963      	cbnz	r3, 800e7e6 <_svfiprintf_r+0x32>
 800e7cc:	2140      	movs	r1, #64	; 0x40
 800e7ce:	f7ff ff21 	bl	800e614 <_malloc_r>
 800e7d2:	6028      	str	r0, [r5, #0]
 800e7d4:	6128      	str	r0, [r5, #16]
 800e7d6:	b920      	cbnz	r0, 800e7e2 <_svfiprintf_r+0x2e>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	e0d1      	b.n	800e986 <_svfiprintf_r+0x1d2>
 800e7e2:	2340      	movs	r3, #64	; 0x40
 800e7e4:	616b      	str	r3, [r5, #20]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ea:	2320      	movs	r3, #32
 800e7ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7f4:	2330      	movs	r3, #48	; 0x30
 800e7f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9a0 <_svfiprintf_r+0x1ec>
 800e7fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7fe:	f04f 0901 	mov.w	r9, #1
 800e802:	4623      	mov	r3, r4
 800e804:	469a      	mov	sl, r3
 800e806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e80a:	b10a      	cbz	r2, 800e810 <_svfiprintf_r+0x5c>
 800e80c:	2a25      	cmp	r2, #37	; 0x25
 800e80e:	d1f9      	bne.n	800e804 <_svfiprintf_r+0x50>
 800e810:	ebba 0b04 	subs.w	fp, sl, r4
 800e814:	d00b      	beq.n	800e82e <_svfiprintf_r+0x7a>
 800e816:	465b      	mov	r3, fp
 800e818:	4622      	mov	r2, r4
 800e81a:	4629      	mov	r1, r5
 800e81c:	4638      	mov	r0, r7
 800e81e:	f7ff ff6d 	bl	800e6fc <__ssputs_r>
 800e822:	3001      	adds	r0, #1
 800e824:	f000 80aa 	beq.w	800e97c <_svfiprintf_r+0x1c8>
 800e828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e82a:	445a      	add	r2, fp
 800e82c:	9209      	str	r2, [sp, #36]	; 0x24
 800e82e:	f89a 3000 	ldrb.w	r3, [sl]
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 80a2 	beq.w	800e97c <_svfiprintf_r+0x1c8>
 800e838:	2300      	movs	r3, #0
 800e83a:	f04f 32ff 	mov.w	r2, #4294967295
 800e83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e842:	f10a 0a01 	add.w	sl, sl, #1
 800e846:	9304      	str	r3, [sp, #16]
 800e848:	9307      	str	r3, [sp, #28]
 800e84a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e84e:	931a      	str	r3, [sp, #104]	; 0x68
 800e850:	4654      	mov	r4, sl
 800e852:	2205      	movs	r2, #5
 800e854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e858:	4851      	ldr	r0, [pc, #324]	; (800e9a0 <_svfiprintf_r+0x1ec>)
 800e85a:	f7f1 fce1 	bl	8000220 <memchr>
 800e85e:	9a04      	ldr	r2, [sp, #16]
 800e860:	b9d8      	cbnz	r0, 800e89a <_svfiprintf_r+0xe6>
 800e862:	06d0      	lsls	r0, r2, #27
 800e864:	bf44      	itt	mi
 800e866:	2320      	movmi	r3, #32
 800e868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e86c:	0711      	lsls	r1, r2, #28
 800e86e:	bf44      	itt	mi
 800e870:	232b      	movmi	r3, #43	; 0x2b
 800e872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e876:	f89a 3000 	ldrb.w	r3, [sl]
 800e87a:	2b2a      	cmp	r3, #42	; 0x2a
 800e87c:	d015      	beq.n	800e8aa <_svfiprintf_r+0xf6>
 800e87e:	9a07      	ldr	r2, [sp, #28]
 800e880:	4654      	mov	r4, sl
 800e882:	2000      	movs	r0, #0
 800e884:	f04f 0c0a 	mov.w	ip, #10
 800e888:	4621      	mov	r1, r4
 800e88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e88e:	3b30      	subs	r3, #48	; 0x30
 800e890:	2b09      	cmp	r3, #9
 800e892:	d94e      	bls.n	800e932 <_svfiprintf_r+0x17e>
 800e894:	b1b0      	cbz	r0, 800e8c4 <_svfiprintf_r+0x110>
 800e896:	9207      	str	r2, [sp, #28]
 800e898:	e014      	b.n	800e8c4 <_svfiprintf_r+0x110>
 800e89a:	eba0 0308 	sub.w	r3, r0, r8
 800e89e:	fa09 f303 	lsl.w	r3, r9, r3
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	9304      	str	r3, [sp, #16]
 800e8a6:	46a2      	mov	sl, r4
 800e8a8:	e7d2      	b.n	800e850 <_svfiprintf_r+0x9c>
 800e8aa:	9b03      	ldr	r3, [sp, #12]
 800e8ac:	1d19      	adds	r1, r3, #4
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	9103      	str	r1, [sp, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	bfbb      	ittet	lt
 800e8b6:	425b      	neglt	r3, r3
 800e8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800e8bc:	9307      	strge	r3, [sp, #28]
 800e8be:	9307      	strlt	r3, [sp, #28]
 800e8c0:	bfb8      	it	lt
 800e8c2:	9204      	strlt	r2, [sp, #16]
 800e8c4:	7823      	ldrb	r3, [r4, #0]
 800e8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e8c8:	d10c      	bne.n	800e8e4 <_svfiprintf_r+0x130>
 800e8ca:	7863      	ldrb	r3, [r4, #1]
 800e8cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ce:	d135      	bne.n	800e93c <_svfiprintf_r+0x188>
 800e8d0:	9b03      	ldr	r3, [sp, #12]
 800e8d2:	1d1a      	adds	r2, r3, #4
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	9203      	str	r2, [sp, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	bfb8      	it	lt
 800e8dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8e0:	3402      	adds	r4, #2
 800e8e2:	9305      	str	r3, [sp, #20]
 800e8e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e9b0 <_svfiprintf_r+0x1fc>
 800e8e8:	7821      	ldrb	r1, [r4, #0]
 800e8ea:	2203      	movs	r2, #3
 800e8ec:	4650      	mov	r0, sl
 800e8ee:	f7f1 fc97 	bl	8000220 <memchr>
 800e8f2:	b140      	cbz	r0, 800e906 <_svfiprintf_r+0x152>
 800e8f4:	2340      	movs	r3, #64	; 0x40
 800e8f6:	eba0 000a 	sub.w	r0, r0, sl
 800e8fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e8fe:	9b04      	ldr	r3, [sp, #16]
 800e900:	4303      	orrs	r3, r0
 800e902:	3401      	adds	r4, #1
 800e904:	9304      	str	r3, [sp, #16]
 800e906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e90a:	4826      	ldr	r0, [pc, #152]	; (800e9a4 <_svfiprintf_r+0x1f0>)
 800e90c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e910:	2206      	movs	r2, #6
 800e912:	f7f1 fc85 	bl	8000220 <memchr>
 800e916:	2800      	cmp	r0, #0
 800e918:	d038      	beq.n	800e98c <_svfiprintf_r+0x1d8>
 800e91a:	4b23      	ldr	r3, [pc, #140]	; (800e9a8 <_svfiprintf_r+0x1f4>)
 800e91c:	bb1b      	cbnz	r3, 800e966 <_svfiprintf_r+0x1b2>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	3307      	adds	r3, #7
 800e922:	f023 0307 	bic.w	r3, r3, #7
 800e926:	3308      	adds	r3, #8
 800e928:	9303      	str	r3, [sp, #12]
 800e92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e92c:	4433      	add	r3, r6
 800e92e:	9309      	str	r3, [sp, #36]	; 0x24
 800e930:	e767      	b.n	800e802 <_svfiprintf_r+0x4e>
 800e932:	fb0c 3202 	mla	r2, ip, r2, r3
 800e936:	460c      	mov	r4, r1
 800e938:	2001      	movs	r0, #1
 800e93a:	e7a5      	b.n	800e888 <_svfiprintf_r+0xd4>
 800e93c:	2300      	movs	r3, #0
 800e93e:	3401      	adds	r4, #1
 800e940:	9305      	str	r3, [sp, #20]
 800e942:	4619      	mov	r1, r3
 800e944:	f04f 0c0a 	mov.w	ip, #10
 800e948:	4620      	mov	r0, r4
 800e94a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e94e:	3a30      	subs	r2, #48	; 0x30
 800e950:	2a09      	cmp	r2, #9
 800e952:	d903      	bls.n	800e95c <_svfiprintf_r+0x1a8>
 800e954:	2b00      	cmp	r3, #0
 800e956:	d0c5      	beq.n	800e8e4 <_svfiprintf_r+0x130>
 800e958:	9105      	str	r1, [sp, #20]
 800e95a:	e7c3      	b.n	800e8e4 <_svfiprintf_r+0x130>
 800e95c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e960:	4604      	mov	r4, r0
 800e962:	2301      	movs	r3, #1
 800e964:	e7f0      	b.n	800e948 <_svfiprintf_r+0x194>
 800e966:	ab03      	add	r3, sp, #12
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	462a      	mov	r2, r5
 800e96c:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <_svfiprintf_r+0x1f8>)
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4638      	mov	r0, r7
 800e972:	f7fc fa49 	bl	800ae08 <_printf_float>
 800e976:	1c42      	adds	r2, r0, #1
 800e978:	4606      	mov	r6, r0
 800e97a:	d1d6      	bne.n	800e92a <_svfiprintf_r+0x176>
 800e97c:	89ab      	ldrh	r3, [r5, #12]
 800e97e:	065b      	lsls	r3, r3, #25
 800e980:	f53f af2c 	bmi.w	800e7dc <_svfiprintf_r+0x28>
 800e984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e986:	b01d      	add	sp, #116	; 0x74
 800e988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98c:	ab03      	add	r3, sp, #12
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	462a      	mov	r2, r5
 800e992:	4b06      	ldr	r3, [pc, #24]	; (800e9ac <_svfiprintf_r+0x1f8>)
 800e994:	a904      	add	r1, sp, #16
 800e996:	4638      	mov	r0, r7
 800e998:	f7fc fcda 	bl	800b350 <_printf_i>
 800e99c:	e7eb      	b.n	800e976 <_svfiprintf_r+0x1c2>
 800e99e:	bf00      	nop
 800e9a0:	0800fa2c 	.word	0x0800fa2c
 800e9a4:	0800fa36 	.word	0x0800fa36
 800e9a8:	0800ae09 	.word	0x0800ae09
 800e9ac:	0800e6fd 	.word	0x0800e6fd
 800e9b0:	0800fa32 	.word	0x0800fa32
 800e9b4:	00000000 	.word	0x00000000

0800e9b8 <nan>:
 800e9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e9c0 <nan+0x8>
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	00000000 	.word	0x00000000
 800e9c4:	7ff80000 	.word	0x7ff80000

0800e9c8 <_sbrk_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d06      	ldr	r5, [pc, #24]	; (800e9e4 <_sbrk_r+0x1c>)
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	4608      	mov	r0, r1
 800e9d2:	602b      	str	r3, [r5, #0]
 800e9d4:	f7f3 fc2c 	bl	8002230 <_sbrk>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d102      	bne.n	800e9e2 <_sbrk_r+0x1a>
 800e9dc:	682b      	ldr	r3, [r5, #0]
 800e9de:	b103      	cbz	r3, 800e9e2 <_sbrk_r+0x1a>
 800e9e0:	6023      	str	r3, [r4, #0]
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	20002110 	.word	0x20002110

0800e9e8 <strncmp>:
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	b17a      	cbz	r2, 800ea0c <strncmp+0x24>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	3901      	subs	r1, #1
 800e9f0:	1884      	adds	r4, r0, r2
 800e9f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e9f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e9fa:	4290      	cmp	r0, r2
 800e9fc:	d101      	bne.n	800ea02 <strncmp+0x1a>
 800e9fe:	42a3      	cmp	r3, r4
 800ea00:	d101      	bne.n	800ea06 <strncmp+0x1e>
 800ea02:	1a80      	subs	r0, r0, r2
 800ea04:	bd10      	pop	{r4, pc}
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d1f3      	bne.n	800e9f2 <strncmp+0xa>
 800ea0a:	e7fa      	b.n	800ea02 <strncmp+0x1a>
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	e7f9      	b.n	800ea04 <strncmp+0x1c>

0800ea10 <__ascii_wctomb>:
 800ea10:	b149      	cbz	r1, 800ea26 <__ascii_wctomb+0x16>
 800ea12:	2aff      	cmp	r2, #255	; 0xff
 800ea14:	bf85      	ittet	hi
 800ea16:	238a      	movhi	r3, #138	; 0x8a
 800ea18:	6003      	strhi	r3, [r0, #0]
 800ea1a:	700a      	strbls	r2, [r1, #0]
 800ea1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea20:	bf98      	it	ls
 800ea22:	2001      	movls	r0, #1
 800ea24:	4770      	bx	lr
 800ea26:	4608      	mov	r0, r1
 800ea28:	4770      	bx	lr
	...

0800ea2c <__assert_func>:
 800ea2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea2e:	4614      	mov	r4, r2
 800ea30:	461a      	mov	r2, r3
 800ea32:	4b09      	ldr	r3, [pc, #36]	; (800ea58 <__assert_func+0x2c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4605      	mov	r5, r0
 800ea38:	68d8      	ldr	r0, [r3, #12]
 800ea3a:	b14c      	cbz	r4, 800ea50 <__assert_func+0x24>
 800ea3c:	4b07      	ldr	r3, [pc, #28]	; (800ea5c <__assert_func+0x30>)
 800ea3e:	9100      	str	r1, [sp, #0]
 800ea40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea44:	4906      	ldr	r1, [pc, #24]	; (800ea60 <__assert_func+0x34>)
 800ea46:	462b      	mov	r3, r5
 800ea48:	f000 f80e 	bl	800ea68 <fiprintf>
 800ea4c:	f000 fa8c 	bl	800ef68 <abort>
 800ea50:	4b04      	ldr	r3, [pc, #16]	; (800ea64 <__assert_func+0x38>)
 800ea52:	461c      	mov	r4, r3
 800ea54:	e7f3      	b.n	800ea3e <__assert_func+0x12>
 800ea56:	bf00      	nop
 800ea58:	2000010c 	.word	0x2000010c
 800ea5c:	0800fa3d 	.word	0x0800fa3d
 800ea60:	0800fa4a 	.word	0x0800fa4a
 800ea64:	0800fa78 	.word	0x0800fa78

0800ea68 <fiprintf>:
 800ea68:	b40e      	push	{r1, r2, r3}
 800ea6a:	b503      	push	{r0, r1, lr}
 800ea6c:	4601      	mov	r1, r0
 800ea6e:	ab03      	add	r3, sp, #12
 800ea70:	4805      	ldr	r0, [pc, #20]	; (800ea88 <fiprintf+0x20>)
 800ea72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea76:	6800      	ldr	r0, [r0, #0]
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	f000 f885 	bl	800eb88 <_vfiprintf_r>
 800ea7e:	b002      	add	sp, #8
 800ea80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea84:	b003      	add	sp, #12
 800ea86:	4770      	bx	lr
 800ea88:	2000010c 	.word	0x2000010c

0800ea8c <memmove>:
 800ea8c:	4288      	cmp	r0, r1
 800ea8e:	b510      	push	{r4, lr}
 800ea90:	eb01 0402 	add.w	r4, r1, r2
 800ea94:	d902      	bls.n	800ea9c <memmove+0x10>
 800ea96:	4284      	cmp	r4, r0
 800ea98:	4623      	mov	r3, r4
 800ea9a:	d807      	bhi.n	800eaac <memmove+0x20>
 800ea9c:	1e43      	subs	r3, r0, #1
 800ea9e:	42a1      	cmp	r1, r4
 800eaa0:	d008      	beq.n	800eab4 <memmove+0x28>
 800eaa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eaaa:	e7f8      	b.n	800ea9e <memmove+0x12>
 800eaac:	4402      	add	r2, r0
 800eaae:	4601      	mov	r1, r0
 800eab0:	428a      	cmp	r2, r1
 800eab2:	d100      	bne.n	800eab6 <memmove+0x2a>
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eabe:	e7f7      	b.n	800eab0 <memmove+0x24>

0800eac0 <__malloc_lock>:
 800eac0:	4801      	ldr	r0, [pc, #4]	; (800eac8 <__malloc_lock+0x8>)
 800eac2:	f000 bc11 	b.w	800f2e8 <__retarget_lock_acquire_recursive>
 800eac6:	bf00      	nop
 800eac8:	20002114 	.word	0x20002114

0800eacc <__malloc_unlock>:
 800eacc:	4801      	ldr	r0, [pc, #4]	; (800ead4 <__malloc_unlock+0x8>)
 800eace:	f000 bc0c 	b.w	800f2ea <__retarget_lock_release_recursive>
 800ead2:	bf00      	nop
 800ead4:	20002114 	.word	0x20002114

0800ead8 <_realloc_r>:
 800ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eadc:	4680      	mov	r8, r0
 800eade:	4614      	mov	r4, r2
 800eae0:	460e      	mov	r6, r1
 800eae2:	b921      	cbnz	r1, 800eaee <_realloc_r+0x16>
 800eae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	4611      	mov	r1, r2
 800eaea:	f7ff bd93 	b.w	800e614 <_malloc_r>
 800eaee:	b92a      	cbnz	r2, 800eafc <_realloc_r+0x24>
 800eaf0:	f7ff fd24 	bl	800e53c <_free_r>
 800eaf4:	4625      	mov	r5, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eafc:	f000 fc5c 	bl	800f3b8 <_malloc_usable_size_r>
 800eb00:	4284      	cmp	r4, r0
 800eb02:	4607      	mov	r7, r0
 800eb04:	d802      	bhi.n	800eb0c <_realloc_r+0x34>
 800eb06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb0a:	d812      	bhi.n	800eb32 <_realloc_r+0x5a>
 800eb0c:	4621      	mov	r1, r4
 800eb0e:	4640      	mov	r0, r8
 800eb10:	f7ff fd80 	bl	800e614 <_malloc_r>
 800eb14:	4605      	mov	r5, r0
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d0ed      	beq.n	800eaf6 <_realloc_r+0x1e>
 800eb1a:	42bc      	cmp	r4, r7
 800eb1c:	4622      	mov	r2, r4
 800eb1e:	4631      	mov	r1, r6
 800eb20:	bf28      	it	cs
 800eb22:	463a      	movcs	r2, r7
 800eb24:	f7ff f824 	bl	800db70 <memcpy>
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4640      	mov	r0, r8
 800eb2c:	f7ff fd06 	bl	800e53c <_free_r>
 800eb30:	e7e1      	b.n	800eaf6 <_realloc_r+0x1e>
 800eb32:	4635      	mov	r5, r6
 800eb34:	e7df      	b.n	800eaf6 <_realloc_r+0x1e>

0800eb36 <__sfputc_r>:
 800eb36:	6893      	ldr	r3, [r2, #8]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	b410      	push	{r4}
 800eb3e:	6093      	str	r3, [r2, #8]
 800eb40:	da08      	bge.n	800eb54 <__sfputc_r+0x1e>
 800eb42:	6994      	ldr	r4, [r2, #24]
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	db01      	blt.n	800eb4c <__sfputc_r+0x16>
 800eb48:	290a      	cmp	r1, #10
 800eb4a:	d103      	bne.n	800eb54 <__sfputc_r+0x1e>
 800eb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb50:	f000 b94a 	b.w	800ede8 <__swbuf_r>
 800eb54:	6813      	ldr	r3, [r2, #0]
 800eb56:	1c58      	adds	r0, r3, #1
 800eb58:	6010      	str	r0, [r2, #0]
 800eb5a:	7019      	strb	r1, [r3, #0]
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <__sfputs_r>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	4606      	mov	r6, r0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	4614      	mov	r4, r2
 800eb6c:	18d5      	adds	r5, r2, r3
 800eb6e:	42ac      	cmp	r4, r5
 800eb70:	d101      	bne.n	800eb76 <__sfputs_r+0x12>
 800eb72:	2000      	movs	r0, #0
 800eb74:	e007      	b.n	800eb86 <__sfputs_r+0x22>
 800eb76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb7a:	463a      	mov	r2, r7
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7ff ffda 	bl	800eb36 <__sfputc_r>
 800eb82:	1c43      	adds	r3, r0, #1
 800eb84:	d1f3      	bne.n	800eb6e <__sfputs_r+0xa>
 800eb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb88 <_vfiprintf_r>:
 800eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	460d      	mov	r5, r1
 800eb8e:	b09d      	sub	sp, #116	; 0x74
 800eb90:	4614      	mov	r4, r2
 800eb92:	4698      	mov	r8, r3
 800eb94:	4606      	mov	r6, r0
 800eb96:	b118      	cbz	r0, 800eba0 <_vfiprintf_r+0x18>
 800eb98:	6983      	ldr	r3, [r0, #24]
 800eb9a:	b90b      	cbnz	r3, 800eba0 <_vfiprintf_r+0x18>
 800eb9c:	f000 fb06 	bl	800f1ac <__sinit>
 800eba0:	4b89      	ldr	r3, [pc, #548]	; (800edc8 <_vfiprintf_r+0x240>)
 800eba2:	429d      	cmp	r5, r3
 800eba4:	d11b      	bne.n	800ebde <_vfiprintf_r+0x56>
 800eba6:	6875      	ldr	r5, [r6, #4]
 800eba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebaa:	07d9      	lsls	r1, r3, #31
 800ebac:	d405      	bmi.n	800ebba <_vfiprintf_r+0x32>
 800ebae:	89ab      	ldrh	r3, [r5, #12]
 800ebb0:	059a      	lsls	r2, r3, #22
 800ebb2:	d402      	bmi.n	800ebba <_vfiprintf_r+0x32>
 800ebb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebb6:	f000 fb97 	bl	800f2e8 <__retarget_lock_acquire_recursive>
 800ebba:	89ab      	ldrh	r3, [r5, #12]
 800ebbc:	071b      	lsls	r3, r3, #28
 800ebbe:	d501      	bpl.n	800ebc4 <_vfiprintf_r+0x3c>
 800ebc0:	692b      	ldr	r3, [r5, #16]
 800ebc2:	b9eb      	cbnz	r3, 800ec00 <_vfiprintf_r+0x78>
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f000 f960 	bl	800ee8c <__swsetup_r>
 800ebcc:	b1c0      	cbz	r0, 800ec00 <_vfiprintf_r+0x78>
 800ebce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd0:	07dc      	lsls	r4, r3, #31
 800ebd2:	d50e      	bpl.n	800ebf2 <_vfiprintf_r+0x6a>
 800ebd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd8:	b01d      	add	sp, #116	; 0x74
 800ebda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebde:	4b7b      	ldr	r3, [pc, #492]	; (800edcc <_vfiprintf_r+0x244>)
 800ebe0:	429d      	cmp	r5, r3
 800ebe2:	d101      	bne.n	800ebe8 <_vfiprintf_r+0x60>
 800ebe4:	68b5      	ldr	r5, [r6, #8]
 800ebe6:	e7df      	b.n	800eba8 <_vfiprintf_r+0x20>
 800ebe8:	4b79      	ldr	r3, [pc, #484]	; (800edd0 <_vfiprintf_r+0x248>)
 800ebea:	429d      	cmp	r5, r3
 800ebec:	bf08      	it	eq
 800ebee:	68f5      	ldreq	r5, [r6, #12]
 800ebf0:	e7da      	b.n	800eba8 <_vfiprintf_r+0x20>
 800ebf2:	89ab      	ldrh	r3, [r5, #12]
 800ebf4:	0598      	lsls	r0, r3, #22
 800ebf6:	d4ed      	bmi.n	800ebd4 <_vfiprintf_r+0x4c>
 800ebf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebfa:	f000 fb76 	bl	800f2ea <__retarget_lock_release_recursive>
 800ebfe:	e7e9      	b.n	800ebd4 <_vfiprintf_r+0x4c>
 800ec00:	2300      	movs	r3, #0
 800ec02:	9309      	str	r3, [sp, #36]	; 0x24
 800ec04:	2320      	movs	r3, #32
 800ec06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec0e:	2330      	movs	r3, #48	; 0x30
 800ec10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edd4 <_vfiprintf_r+0x24c>
 800ec14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec18:	f04f 0901 	mov.w	r9, #1
 800ec1c:	4623      	mov	r3, r4
 800ec1e:	469a      	mov	sl, r3
 800ec20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec24:	b10a      	cbz	r2, 800ec2a <_vfiprintf_r+0xa2>
 800ec26:	2a25      	cmp	r2, #37	; 0x25
 800ec28:	d1f9      	bne.n	800ec1e <_vfiprintf_r+0x96>
 800ec2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ec2e:	d00b      	beq.n	800ec48 <_vfiprintf_r+0xc0>
 800ec30:	465b      	mov	r3, fp
 800ec32:	4622      	mov	r2, r4
 800ec34:	4629      	mov	r1, r5
 800ec36:	4630      	mov	r0, r6
 800ec38:	f7ff ff94 	bl	800eb64 <__sfputs_r>
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	f000 80aa 	beq.w	800ed96 <_vfiprintf_r+0x20e>
 800ec42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec44:	445a      	add	r2, fp
 800ec46:	9209      	str	r2, [sp, #36]	; 0x24
 800ec48:	f89a 3000 	ldrb.w	r3, [sl]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f000 80a2 	beq.w	800ed96 <_vfiprintf_r+0x20e>
 800ec52:	2300      	movs	r3, #0
 800ec54:	f04f 32ff 	mov.w	r2, #4294967295
 800ec58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec5c:	f10a 0a01 	add.w	sl, sl, #1
 800ec60:	9304      	str	r3, [sp, #16]
 800ec62:	9307      	str	r3, [sp, #28]
 800ec64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec68:	931a      	str	r3, [sp, #104]	; 0x68
 800ec6a:	4654      	mov	r4, sl
 800ec6c:	2205      	movs	r2, #5
 800ec6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec72:	4858      	ldr	r0, [pc, #352]	; (800edd4 <_vfiprintf_r+0x24c>)
 800ec74:	f7f1 fad4 	bl	8000220 <memchr>
 800ec78:	9a04      	ldr	r2, [sp, #16]
 800ec7a:	b9d8      	cbnz	r0, 800ecb4 <_vfiprintf_r+0x12c>
 800ec7c:	06d1      	lsls	r1, r2, #27
 800ec7e:	bf44      	itt	mi
 800ec80:	2320      	movmi	r3, #32
 800ec82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec86:	0713      	lsls	r3, r2, #28
 800ec88:	bf44      	itt	mi
 800ec8a:	232b      	movmi	r3, #43	; 0x2b
 800ec8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec90:	f89a 3000 	ldrb.w	r3, [sl]
 800ec94:	2b2a      	cmp	r3, #42	; 0x2a
 800ec96:	d015      	beq.n	800ecc4 <_vfiprintf_r+0x13c>
 800ec98:	9a07      	ldr	r2, [sp, #28]
 800ec9a:	4654      	mov	r4, sl
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	f04f 0c0a 	mov.w	ip, #10
 800eca2:	4621      	mov	r1, r4
 800eca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eca8:	3b30      	subs	r3, #48	; 0x30
 800ecaa:	2b09      	cmp	r3, #9
 800ecac:	d94e      	bls.n	800ed4c <_vfiprintf_r+0x1c4>
 800ecae:	b1b0      	cbz	r0, 800ecde <_vfiprintf_r+0x156>
 800ecb0:	9207      	str	r2, [sp, #28]
 800ecb2:	e014      	b.n	800ecde <_vfiprintf_r+0x156>
 800ecb4:	eba0 0308 	sub.w	r3, r0, r8
 800ecb8:	fa09 f303 	lsl.w	r3, r9, r3
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	9304      	str	r3, [sp, #16]
 800ecc0:	46a2      	mov	sl, r4
 800ecc2:	e7d2      	b.n	800ec6a <_vfiprintf_r+0xe2>
 800ecc4:	9b03      	ldr	r3, [sp, #12]
 800ecc6:	1d19      	adds	r1, r3, #4
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	9103      	str	r1, [sp, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	bfbb      	ittet	lt
 800ecd0:	425b      	neglt	r3, r3
 800ecd2:	f042 0202 	orrlt.w	r2, r2, #2
 800ecd6:	9307      	strge	r3, [sp, #28]
 800ecd8:	9307      	strlt	r3, [sp, #28]
 800ecda:	bfb8      	it	lt
 800ecdc:	9204      	strlt	r2, [sp, #16]
 800ecde:	7823      	ldrb	r3, [r4, #0]
 800ece0:	2b2e      	cmp	r3, #46	; 0x2e
 800ece2:	d10c      	bne.n	800ecfe <_vfiprintf_r+0x176>
 800ece4:	7863      	ldrb	r3, [r4, #1]
 800ece6:	2b2a      	cmp	r3, #42	; 0x2a
 800ece8:	d135      	bne.n	800ed56 <_vfiprintf_r+0x1ce>
 800ecea:	9b03      	ldr	r3, [sp, #12]
 800ecec:	1d1a      	adds	r2, r3, #4
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	9203      	str	r2, [sp, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	bfb8      	it	lt
 800ecf6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecfa:	3402      	adds	r4, #2
 800ecfc:	9305      	str	r3, [sp, #20]
 800ecfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ede4 <_vfiprintf_r+0x25c>
 800ed02:	7821      	ldrb	r1, [r4, #0]
 800ed04:	2203      	movs	r2, #3
 800ed06:	4650      	mov	r0, sl
 800ed08:	f7f1 fa8a 	bl	8000220 <memchr>
 800ed0c:	b140      	cbz	r0, 800ed20 <_vfiprintf_r+0x198>
 800ed0e:	2340      	movs	r3, #64	; 0x40
 800ed10:	eba0 000a 	sub.w	r0, r0, sl
 800ed14:	fa03 f000 	lsl.w	r0, r3, r0
 800ed18:	9b04      	ldr	r3, [sp, #16]
 800ed1a:	4303      	orrs	r3, r0
 800ed1c:	3401      	adds	r4, #1
 800ed1e:	9304      	str	r3, [sp, #16]
 800ed20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed24:	482c      	ldr	r0, [pc, #176]	; (800edd8 <_vfiprintf_r+0x250>)
 800ed26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed2a:	2206      	movs	r2, #6
 800ed2c:	f7f1 fa78 	bl	8000220 <memchr>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d03f      	beq.n	800edb4 <_vfiprintf_r+0x22c>
 800ed34:	4b29      	ldr	r3, [pc, #164]	; (800eddc <_vfiprintf_r+0x254>)
 800ed36:	bb1b      	cbnz	r3, 800ed80 <_vfiprintf_r+0x1f8>
 800ed38:	9b03      	ldr	r3, [sp, #12]
 800ed3a:	3307      	adds	r3, #7
 800ed3c:	f023 0307 	bic.w	r3, r3, #7
 800ed40:	3308      	adds	r3, #8
 800ed42:	9303      	str	r3, [sp, #12]
 800ed44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed46:	443b      	add	r3, r7
 800ed48:	9309      	str	r3, [sp, #36]	; 0x24
 800ed4a:	e767      	b.n	800ec1c <_vfiprintf_r+0x94>
 800ed4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed50:	460c      	mov	r4, r1
 800ed52:	2001      	movs	r0, #1
 800ed54:	e7a5      	b.n	800eca2 <_vfiprintf_r+0x11a>
 800ed56:	2300      	movs	r3, #0
 800ed58:	3401      	adds	r4, #1
 800ed5a:	9305      	str	r3, [sp, #20]
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	f04f 0c0a 	mov.w	ip, #10
 800ed62:	4620      	mov	r0, r4
 800ed64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed68:	3a30      	subs	r2, #48	; 0x30
 800ed6a:	2a09      	cmp	r2, #9
 800ed6c:	d903      	bls.n	800ed76 <_vfiprintf_r+0x1ee>
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d0c5      	beq.n	800ecfe <_vfiprintf_r+0x176>
 800ed72:	9105      	str	r1, [sp, #20]
 800ed74:	e7c3      	b.n	800ecfe <_vfiprintf_r+0x176>
 800ed76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e7f0      	b.n	800ed62 <_vfiprintf_r+0x1da>
 800ed80:	ab03      	add	r3, sp, #12
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	462a      	mov	r2, r5
 800ed86:	4b16      	ldr	r3, [pc, #88]	; (800ede0 <_vfiprintf_r+0x258>)
 800ed88:	a904      	add	r1, sp, #16
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f7fc f83c 	bl	800ae08 <_printf_float>
 800ed90:	4607      	mov	r7, r0
 800ed92:	1c78      	adds	r0, r7, #1
 800ed94:	d1d6      	bne.n	800ed44 <_vfiprintf_r+0x1bc>
 800ed96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed98:	07d9      	lsls	r1, r3, #31
 800ed9a:	d405      	bmi.n	800eda8 <_vfiprintf_r+0x220>
 800ed9c:	89ab      	ldrh	r3, [r5, #12]
 800ed9e:	059a      	lsls	r2, r3, #22
 800eda0:	d402      	bmi.n	800eda8 <_vfiprintf_r+0x220>
 800eda2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda4:	f000 faa1 	bl	800f2ea <__retarget_lock_release_recursive>
 800eda8:	89ab      	ldrh	r3, [r5, #12]
 800edaa:	065b      	lsls	r3, r3, #25
 800edac:	f53f af12 	bmi.w	800ebd4 <_vfiprintf_r+0x4c>
 800edb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edb2:	e711      	b.n	800ebd8 <_vfiprintf_r+0x50>
 800edb4:	ab03      	add	r3, sp, #12
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	462a      	mov	r2, r5
 800edba:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <_vfiprintf_r+0x258>)
 800edbc:	a904      	add	r1, sp, #16
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7fc fac6 	bl	800b350 <_printf_i>
 800edc4:	e7e4      	b.n	800ed90 <_vfiprintf_r+0x208>
 800edc6:	bf00      	nop
 800edc8:	0800fa9c 	.word	0x0800fa9c
 800edcc:	0800fabc 	.word	0x0800fabc
 800edd0:	0800fa7c 	.word	0x0800fa7c
 800edd4:	0800fa2c 	.word	0x0800fa2c
 800edd8:	0800fa36 	.word	0x0800fa36
 800eddc:	0800ae09 	.word	0x0800ae09
 800ede0:	0800eb65 	.word	0x0800eb65
 800ede4:	0800fa32 	.word	0x0800fa32

0800ede8 <__swbuf_r>:
 800ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edea:	460e      	mov	r6, r1
 800edec:	4614      	mov	r4, r2
 800edee:	4605      	mov	r5, r0
 800edf0:	b118      	cbz	r0, 800edfa <__swbuf_r+0x12>
 800edf2:	6983      	ldr	r3, [r0, #24]
 800edf4:	b90b      	cbnz	r3, 800edfa <__swbuf_r+0x12>
 800edf6:	f000 f9d9 	bl	800f1ac <__sinit>
 800edfa:	4b21      	ldr	r3, [pc, #132]	; (800ee80 <__swbuf_r+0x98>)
 800edfc:	429c      	cmp	r4, r3
 800edfe:	d12b      	bne.n	800ee58 <__swbuf_r+0x70>
 800ee00:	686c      	ldr	r4, [r5, #4]
 800ee02:	69a3      	ldr	r3, [r4, #24]
 800ee04:	60a3      	str	r3, [r4, #8]
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	071a      	lsls	r2, r3, #28
 800ee0a:	d52f      	bpl.n	800ee6c <__swbuf_r+0x84>
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	b36b      	cbz	r3, 800ee6c <__swbuf_r+0x84>
 800ee10:	6923      	ldr	r3, [r4, #16]
 800ee12:	6820      	ldr	r0, [r4, #0]
 800ee14:	1ac0      	subs	r0, r0, r3
 800ee16:	6963      	ldr	r3, [r4, #20]
 800ee18:	b2f6      	uxtb	r6, r6
 800ee1a:	4283      	cmp	r3, r0
 800ee1c:	4637      	mov	r7, r6
 800ee1e:	dc04      	bgt.n	800ee2a <__swbuf_r+0x42>
 800ee20:	4621      	mov	r1, r4
 800ee22:	4628      	mov	r0, r5
 800ee24:	f000 f92e 	bl	800f084 <_fflush_r>
 800ee28:	bb30      	cbnz	r0, 800ee78 <__swbuf_r+0x90>
 800ee2a:	68a3      	ldr	r3, [r4, #8]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	60a3      	str	r3, [r4, #8]
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	1c5a      	adds	r2, r3, #1
 800ee34:	6022      	str	r2, [r4, #0]
 800ee36:	701e      	strb	r6, [r3, #0]
 800ee38:	6963      	ldr	r3, [r4, #20]
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	4283      	cmp	r3, r0
 800ee3e:	d004      	beq.n	800ee4a <__swbuf_r+0x62>
 800ee40:	89a3      	ldrh	r3, [r4, #12]
 800ee42:	07db      	lsls	r3, r3, #31
 800ee44:	d506      	bpl.n	800ee54 <__swbuf_r+0x6c>
 800ee46:	2e0a      	cmp	r6, #10
 800ee48:	d104      	bne.n	800ee54 <__swbuf_r+0x6c>
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f000 f919 	bl	800f084 <_fflush_r>
 800ee52:	b988      	cbnz	r0, 800ee78 <__swbuf_r+0x90>
 800ee54:	4638      	mov	r0, r7
 800ee56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee58:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <__swbuf_r+0x9c>)
 800ee5a:	429c      	cmp	r4, r3
 800ee5c:	d101      	bne.n	800ee62 <__swbuf_r+0x7a>
 800ee5e:	68ac      	ldr	r4, [r5, #8]
 800ee60:	e7cf      	b.n	800ee02 <__swbuf_r+0x1a>
 800ee62:	4b09      	ldr	r3, [pc, #36]	; (800ee88 <__swbuf_r+0xa0>)
 800ee64:	429c      	cmp	r4, r3
 800ee66:	bf08      	it	eq
 800ee68:	68ec      	ldreq	r4, [r5, #12]
 800ee6a:	e7ca      	b.n	800ee02 <__swbuf_r+0x1a>
 800ee6c:	4621      	mov	r1, r4
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f000 f80c 	bl	800ee8c <__swsetup_r>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d0cb      	beq.n	800ee10 <__swbuf_r+0x28>
 800ee78:	f04f 37ff 	mov.w	r7, #4294967295
 800ee7c:	e7ea      	b.n	800ee54 <__swbuf_r+0x6c>
 800ee7e:	bf00      	nop
 800ee80:	0800fa9c 	.word	0x0800fa9c
 800ee84:	0800fabc 	.word	0x0800fabc
 800ee88:	0800fa7c 	.word	0x0800fa7c

0800ee8c <__swsetup_r>:
 800ee8c:	4b32      	ldr	r3, [pc, #200]	; (800ef58 <__swsetup_r+0xcc>)
 800ee8e:	b570      	push	{r4, r5, r6, lr}
 800ee90:	681d      	ldr	r5, [r3, #0]
 800ee92:	4606      	mov	r6, r0
 800ee94:	460c      	mov	r4, r1
 800ee96:	b125      	cbz	r5, 800eea2 <__swsetup_r+0x16>
 800ee98:	69ab      	ldr	r3, [r5, #24]
 800ee9a:	b913      	cbnz	r3, 800eea2 <__swsetup_r+0x16>
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f000 f985 	bl	800f1ac <__sinit>
 800eea2:	4b2e      	ldr	r3, [pc, #184]	; (800ef5c <__swsetup_r+0xd0>)
 800eea4:	429c      	cmp	r4, r3
 800eea6:	d10f      	bne.n	800eec8 <__swsetup_r+0x3c>
 800eea8:	686c      	ldr	r4, [r5, #4]
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eeb0:	0719      	lsls	r1, r3, #28
 800eeb2:	d42c      	bmi.n	800ef0e <__swsetup_r+0x82>
 800eeb4:	06dd      	lsls	r5, r3, #27
 800eeb6:	d411      	bmi.n	800eedc <__swsetup_r+0x50>
 800eeb8:	2309      	movs	r3, #9
 800eeba:	6033      	str	r3, [r6, #0]
 800eebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eec0:	81a3      	strh	r3, [r4, #12]
 800eec2:	f04f 30ff 	mov.w	r0, #4294967295
 800eec6:	e03e      	b.n	800ef46 <__swsetup_r+0xba>
 800eec8:	4b25      	ldr	r3, [pc, #148]	; (800ef60 <__swsetup_r+0xd4>)
 800eeca:	429c      	cmp	r4, r3
 800eecc:	d101      	bne.n	800eed2 <__swsetup_r+0x46>
 800eece:	68ac      	ldr	r4, [r5, #8]
 800eed0:	e7eb      	b.n	800eeaa <__swsetup_r+0x1e>
 800eed2:	4b24      	ldr	r3, [pc, #144]	; (800ef64 <__swsetup_r+0xd8>)
 800eed4:	429c      	cmp	r4, r3
 800eed6:	bf08      	it	eq
 800eed8:	68ec      	ldreq	r4, [r5, #12]
 800eeda:	e7e6      	b.n	800eeaa <__swsetup_r+0x1e>
 800eedc:	0758      	lsls	r0, r3, #29
 800eede:	d512      	bpl.n	800ef06 <__swsetup_r+0x7a>
 800eee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eee2:	b141      	cbz	r1, 800eef6 <__swsetup_r+0x6a>
 800eee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eee8:	4299      	cmp	r1, r3
 800eeea:	d002      	beq.n	800eef2 <__swsetup_r+0x66>
 800eeec:	4630      	mov	r0, r6
 800eeee:	f7ff fb25 	bl	800e53c <_free_r>
 800eef2:	2300      	movs	r3, #0
 800eef4:	6363      	str	r3, [r4, #52]	; 0x34
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eefc:	81a3      	strh	r3, [r4, #12]
 800eefe:	2300      	movs	r3, #0
 800ef00:	6063      	str	r3, [r4, #4]
 800ef02:	6923      	ldr	r3, [r4, #16]
 800ef04:	6023      	str	r3, [r4, #0]
 800ef06:	89a3      	ldrh	r3, [r4, #12]
 800ef08:	f043 0308 	orr.w	r3, r3, #8
 800ef0c:	81a3      	strh	r3, [r4, #12]
 800ef0e:	6923      	ldr	r3, [r4, #16]
 800ef10:	b94b      	cbnz	r3, 800ef26 <__swsetup_r+0x9a>
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef1c:	d003      	beq.n	800ef26 <__swsetup_r+0x9a>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4630      	mov	r0, r6
 800ef22:	f000 fa09 	bl	800f338 <__smakebuf_r>
 800ef26:	89a0      	ldrh	r0, [r4, #12]
 800ef28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef2c:	f010 0301 	ands.w	r3, r0, #1
 800ef30:	d00a      	beq.n	800ef48 <__swsetup_r+0xbc>
 800ef32:	2300      	movs	r3, #0
 800ef34:	60a3      	str	r3, [r4, #8]
 800ef36:	6963      	ldr	r3, [r4, #20]
 800ef38:	425b      	negs	r3, r3
 800ef3a:	61a3      	str	r3, [r4, #24]
 800ef3c:	6923      	ldr	r3, [r4, #16]
 800ef3e:	b943      	cbnz	r3, 800ef52 <__swsetup_r+0xc6>
 800ef40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef44:	d1ba      	bne.n	800eebc <__swsetup_r+0x30>
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	0781      	lsls	r1, r0, #30
 800ef4a:	bf58      	it	pl
 800ef4c:	6963      	ldrpl	r3, [r4, #20]
 800ef4e:	60a3      	str	r3, [r4, #8]
 800ef50:	e7f4      	b.n	800ef3c <__swsetup_r+0xb0>
 800ef52:	2000      	movs	r0, #0
 800ef54:	e7f7      	b.n	800ef46 <__swsetup_r+0xba>
 800ef56:	bf00      	nop
 800ef58:	2000010c 	.word	0x2000010c
 800ef5c:	0800fa9c 	.word	0x0800fa9c
 800ef60:	0800fabc 	.word	0x0800fabc
 800ef64:	0800fa7c 	.word	0x0800fa7c

0800ef68 <abort>:
 800ef68:	b508      	push	{r3, lr}
 800ef6a:	2006      	movs	r0, #6
 800ef6c:	f000 fa54 	bl	800f418 <raise>
 800ef70:	2001      	movs	r0, #1
 800ef72:	f7f3 f8e5 	bl	8002140 <_exit>
	...

0800ef78 <__sflush_r>:
 800ef78:	898a      	ldrh	r2, [r1, #12]
 800ef7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7e:	4605      	mov	r5, r0
 800ef80:	0710      	lsls	r0, r2, #28
 800ef82:	460c      	mov	r4, r1
 800ef84:	d458      	bmi.n	800f038 <__sflush_r+0xc0>
 800ef86:	684b      	ldr	r3, [r1, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	dc05      	bgt.n	800ef98 <__sflush_r+0x20>
 800ef8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	dc02      	bgt.n	800ef98 <__sflush_r+0x20>
 800ef92:	2000      	movs	r0, #0
 800ef94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef9a:	2e00      	cmp	r6, #0
 800ef9c:	d0f9      	beq.n	800ef92 <__sflush_r+0x1a>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efa4:	682f      	ldr	r7, [r5, #0]
 800efa6:	602b      	str	r3, [r5, #0]
 800efa8:	d032      	beq.n	800f010 <__sflush_r+0x98>
 800efaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efac:	89a3      	ldrh	r3, [r4, #12]
 800efae:	075a      	lsls	r2, r3, #29
 800efb0:	d505      	bpl.n	800efbe <__sflush_r+0x46>
 800efb2:	6863      	ldr	r3, [r4, #4]
 800efb4:	1ac0      	subs	r0, r0, r3
 800efb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efb8:	b10b      	cbz	r3, 800efbe <__sflush_r+0x46>
 800efba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efbc:	1ac0      	subs	r0, r0, r3
 800efbe:	2300      	movs	r3, #0
 800efc0:	4602      	mov	r2, r0
 800efc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efc4:	6a21      	ldr	r1, [r4, #32]
 800efc6:	4628      	mov	r0, r5
 800efc8:	47b0      	blx	r6
 800efca:	1c43      	adds	r3, r0, #1
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	d106      	bne.n	800efde <__sflush_r+0x66>
 800efd0:	6829      	ldr	r1, [r5, #0]
 800efd2:	291d      	cmp	r1, #29
 800efd4:	d82c      	bhi.n	800f030 <__sflush_r+0xb8>
 800efd6:	4a2a      	ldr	r2, [pc, #168]	; (800f080 <__sflush_r+0x108>)
 800efd8:	40ca      	lsrs	r2, r1
 800efda:	07d6      	lsls	r6, r2, #31
 800efdc:	d528      	bpl.n	800f030 <__sflush_r+0xb8>
 800efde:	2200      	movs	r2, #0
 800efe0:	6062      	str	r2, [r4, #4]
 800efe2:	04d9      	lsls	r1, r3, #19
 800efe4:	6922      	ldr	r2, [r4, #16]
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	d504      	bpl.n	800eff4 <__sflush_r+0x7c>
 800efea:	1c42      	adds	r2, r0, #1
 800efec:	d101      	bne.n	800eff2 <__sflush_r+0x7a>
 800efee:	682b      	ldr	r3, [r5, #0]
 800eff0:	b903      	cbnz	r3, 800eff4 <__sflush_r+0x7c>
 800eff2:	6560      	str	r0, [r4, #84]	; 0x54
 800eff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eff6:	602f      	str	r7, [r5, #0]
 800eff8:	2900      	cmp	r1, #0
 800effa:	d0ca      	beq.n	800ef92 <__sflush_r+0x1a>
 800effc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f000:	4299      	cmp	r1, r3
 800f002:	d002      	beq.n	800f00a <__sflush_r+0x92>
 800f004:	4628      	mov	r0, r5
 800f006:	f7ff fa99 	bl	800e53c <_free_r>
 800f00a:	2000      	movs	r0, #0
 800f00c:	6360      	str	r0, [r4, #52]	; 0x34
 800f00e:	e7c1      	b.n	800ef94 <__sflush_r+0x1c>
 800f010:	6a21      	ldr	r1, [r4, #32]
 800f012:	2301      	movs	r3, #1
 800f014:	4628      	mov	r0, r5
 800f016:	47b0      	blx	r6
 800f018:	1c41      	adds	r1, r0, #1
 800f01a:	d1c7      	bne.n	800efac <__sflush_r+0x34>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d0c4      	beq.n	800efac <__sflush_r+0x34>
 800f022:	2b1d      	cmp	r3, #29
 800f024:	d001      	beq.n	800f02a <__sflush_r+0xb2>
 800f026:	2b16      	cmp	r3, #22
 800f028:	d101      	bne.n	800f02e <__sflush_r+0xb6>
 800f02a:	602f      	str	r7, [r5, #0]
 800f02c:	e7b1      	b.n	800ef92 <__sflush_r+0x1a>
 800f02e:	89a3      	ldrh	r3, [r4, #12]
 800f030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f034:	81a3      	strh	r3, [r4, #12]
 800f036:	e7ad      	b.n	800ef94 <__sflush_r+0x1c>
 800f038:	690f      	ldr	r7, [r1, #16]
 800f03a:	2f00      	cmp	r7, #0
 800f03c:	d0a9      	beq.n	800ef92 <__sflush_r+0x1a>
 800f03e:	0793      	lsls	r3, r2, #30
 800f040:	680e      	ldr	r6, [r1, #0]
 800f042:	bf08      	it	eq
 800f044:	694b      	ldreq	r3, [r1, #20]
 800f046:	600f      	str	r7, [r1, #0]
 800f048:	bf18      	it	ne
 800f04a:	2300      	movne	r3, #0
 800f04c:	eba6 0807 	sub.w	r8, r6, r7
 800f050:	608b      	str	r3, [r1, #8]
 800f052:	f1b8 0f00 	cmp.w	r8, #0
 800f056:	dd9c      	ble.n	800ef92 <__sflush_r+0x1a>
 800f058:	6a21      	ldr	r1, [r4, #32]
 800f05a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f05c:	4643      	mov	r3, r8
 800f05e:	463a      	mov	r2, r7
 800f060:	4628      	mov	r0, r5
 800f062:	47b0      	blx	r6
 800f064:	2800      	cmp	r0, #0
 800f066:	dc06      	bgt.n	800f076 <__sflush_r+0xfe>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f06e:	81a3      	strh	r3, [r4, #12]
 800f070:	f04f 30ff 	mov.w	r0, #4294967295
 800f074:	e78e      	b.n	800ef94 <__sflush_r+0x1c>
 800f076:	4407      	add	r7, r0
 800f078:	eba8 0800 	sub.w	r8, r8, r0
 800f07c:	e7e9      	b.n	800f052 <__sflush_r+0xda>
 800f07e:	bf00      	nop
 800f080:	20400001 	.word	0x20400001

0800f084 <_fflush_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	690b      	ldr	r3, [r1, #16]
 800f088:	4605      	mov	r5, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	b913      	cbnz	r3, 800f094 <_fflush_r+0x10>
 800f08e:	2500      	movs	r5, #0
 800f090:	4628      	mov	r0, r5
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	b118      	cbz	r0, 800f09e <_fflush_r+0x1a>
 800f096:	6983      	ldr	r3, [r0, #24]
 800f098:	b90b      	cbnz	r3, 800f09e <_fflush_r+0x1a>
 800f09a:	f000 f887 	bl	800f1ac <__sinit>
 800f09e:	4b14      	ldr	r3, [pc, #80]	; (800f0f0 <_fflush_r+0x6c>)
 800f0a0:	429c      	cmp	r4, r3
 800f0a2:	d11b      	bne.n	800f0dc <_fflush_r+0x58>
 800f0a4:	686c      	ldr	r4, [r5, #4]
 800f0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0ef      	beq.n	800f08e <_fflush_r+0xa>
 800f0ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0b0:	07d0      	lsls	r0, r2, #31
 800f0b2:	d404      	bmi.n	800f0be <_fflush_r+0x3a>
 800f0b4:	0599      	lsls	r1, r3, #22
 800f0b6:	d402      	bmi.n	800f0be <_fflush_r+0x3a>
 800f0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ba:	f000 f915 	bl	800f2e8 <__retarget_lock_acquire_recursive>
 800f0be:	4628      	mov	r0, r5
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	f7ff ff59 	bl	800ef78 <__sflush_r>
 800f0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0c8:	07da      	lsls	r2, r3, #31
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	d4e0      	bmi.n	800f090 <_fflush_r+0xc>
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	059b      	lsls	r3, r3, #22
 800f0d2:	d4dd      	bmi.n	800f090 <_fflush_r+0xc>
 800f0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0d6:	f000 f908 	bl	800f2ea <__retarget_lock_release_recursive>
 800f0da:	e7d9      	b.n	800f090 <_fflush_r+0xc>
 800f0dc:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <_fflush_r+0x70>)
 800f0de:	429c      	cmp	r4, r3
 800f0e0:	d101      	bne.n	800f0e6 <_fflush_r+0x62>
 800f0e2:	68ac      	ldr	r4, [r5, #8]
 800f0e4:	e7df      	b.n	800f0a6 <_fflush_r+0x22>
 800f0e6:	4b04      	ldr	r3, [pc, #16]	; (800f0f8 <_fflush_r+0x74>)
 800f0e8:	429c      	cmp	r4, r3
 800f0ea:	bf08      	it	eq
 800f0ec:	68ec      	ldreq	r4, [r5, #12]
 800f0ee:	e7da      	b.n	800f0a6 <_fflush_r+0x22>
 800f0f0:	0800fa9c 	.word	0x0800fa9c
 800f0f4:	0800fabc 	.word	0x0800fabc
 800f0f8:	0800fa7c 	.word	0x0800fa7c

0800f0fc <std>:
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	b510      	push	{r4, lr}
 800f100:	4604      	mov	r4, r0
 800f102:	e9c0 3300 	strd	r3, r3, [r0]
 800f106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f10a:	6083      	str	r3, [r0, #8]
 800f10c:	8181      	strh	r1, [r0, #12]
 800f10e:	6643      	str	r3, [r0, #100]	; 0x64
 800f110:	81c2      	strh	r2, [r0, #14]
 800f112:	6183      	str	r3, [r0, #24]
 800f114:	4619      	mov	r1, r3
 800f116:	2208      	movs	r2, #8
 800f118:	305c      	adds	r0, #92	; 0x5c
 800f11a:	f7fb fdcd 	bl	800acb8 <memset>
 800f11e:	4b05      	ldr	r3, [pc, #20]	; (800f134 <std+0x38>)
 800f120:	6263      	str	r3, [r4, #36]	; 0x24
 800f122:	4b05      	ldr	r3, [pc, #20]	; (800f138 <std+0x3c>)
 800f124:	62a3      	str	r3, [r4, #40]	; 0x28
 800f126:	4b05      	ldr	r3, [pc, #20]	; (800f13c <std+0x40>)
 800f128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f12a:	4b05      	ldr	r3, [pc, #20]	; (800f140 <std+0x44>)
 800f12c:	6224      	str	r4, [r4, #32]
 800f12e:	6323      	str	r3, [r4, #48]	; 0x30
 800f130:	bd10      	pop	{r4, pc}
 800f132:	bf00      	nop
 800f134:	0800f451 	.word	0x0800f451
 800f138:	0800f473 	.word	0x0800f473
 800f13c:	0800f4ab 	.word	0x0800f4ab
 800f140:	0800f4cf 	.word	0x0800f4cf

0800f144 <_cleanup_r>:
 800f144:	4901      	ldr	r1, [pc, #4]	; (800f14c <_cleanup_r+0x8>)
 800f146:	f000 b8af 	b.w	800f2a8 <_fwalk_reent>
 800f14a:	bf00      	nop
 800f14c:	0800f085 	.word	0x0800f085

0800f150 <__sfmoreglue>:
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	2268      	movs	r2, #104	; 0x68
 800f154:	1e4d      	subs	r5, r1, #1
 800f156:	4355      	muls	r5, r2
 800f158:	460e      	mov	r6, r1
 800f15a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f15e:	f7ff fa59 	bl	800e614 <_malloc_r>
 800f162:	4604      	mov	r4, r0
 800f164:	b140      	cbz	r0, 800f178 <__sfmoreglue+0x28>
 800f166:	2100      	movs	r1, #0
 800f168:	e9c0 1600 	strd	r1, r6, [r0]
 800f16c:	300c      	adds	r0, #12
 800f16e:	60a0      	str	r0, [r4, #8]
 800f170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f174:	f7fb fda0 	bl	800acb8 <memset>
 800f178:	4620      	mov	r0, r4
 800f17a:	bd70      	pop	{r4, r5, r6, pc}

0800f17c <__sfp_lock_acquire>:
 800f17c:	4801      	ldr	r0, [pc, #4]	; (800f184 <__sfp_lock_acquire+0x8>)
 800f17e:	f000 b8b3 	b.w	800f2e8 <__retarget_lock_acquire_recursive>
 800f182:	bf00      	nop
 800f184:	20002115 	.word	0x20002115

0800f188 <__sfp_lock_release>:
 800f188:	4801      	ldr	r0, [pc, #4]	; (800f190 <__sfp_lock_release+0x8>)
 800f18a:	f000 b8ae 	b.w	800f2ea <__retarget_lock_release_recursive>
 800f18e:	bf00      	nop
 800f190:	20002115 	.word	0x20002115

0800f194 <__sinit_lock_acquire>:
 800f194:	4801      	ldr	r0, [pc, #4]	; (800f19c <__sinit_lock_acquire+0x8>)
 800f196:	f000 b8a7 	b.w	800f2e8 <__retarget_lock_acquire_recursive>
 800f19a:	bf00      	nop
 800f19c:	20002116 	.word	0x20002116

0800f1a0 <__sinit_lock_release>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	; (800f1a8 <__sinit_lock_release+0x8>)
 800f1a2:	f000 b8a2 	b.w	800f2ea <__retarget_lock_release_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	20002116 	.word	0x20002116

0800f1ac <__sinit>:
 800f1ac:	b510      	push	{r4, lr}
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	f7ff fff0 	bl	800f194 <__sinit_lock_acquire>
 800f1b4:	69a3      	ldr	r3, [r4, #24]
 800f1b6:	b11b      	cbz	r3, 800f1c0 <__sinit+0x14>
 800f1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1bc:	f7ff bff0 	b.w	800f1a0 <__sinit_lock_release>
 800f1c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1c4:	6523      	str	r3, [r4, #80]	; 0x50
 800f1c6:	4b13      	ldr	r3, [pc, #76]	; (800f214 <__sinit+0x68>)
 800f1c8:	4a13      	ldr	r2, [pc, #76]	; (800f218 <__sinit+0x6c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1ce:	42a3      	cmp	r3, r4
 800f1d0:	bf04      	itt	eq
 800f1d2:	2301      	moveq	r3, #1
 800f1d4:	61a3      	streq	r3, [r4, #24]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f000 f820 	bl	800f21c <__sfp>
 800f1dc:	6060      	str	r0, [r4, #4]
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 f81c 	bl	800f21c <__sfp>
 800f1e4:	60a0      	str	r0, [r4, #8]
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f000 f818 	bl	800f21c <__sfp>
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	60e0      	str	r0, [r4, #12]
 800f1f0:	2104      	movs	r1, #4
 800f1f2:	6860      	ldr	r0, [r4, #4]
 800f1f4:	f7ff ff82 	bl	800f0fc <std>
 800f1f8:	68a0      	ldr	r0, [r4, #8]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	2109      	movs	r1, #9
 800f1fe:	f7ff ff7d 	bl	800f0fc <std>
 800f202:	68e0      	ldr	r0, [r4, #12]
 800f204:	2202      	movs	r2, #2
 800f206:	2112      	movs	r1, #18
 800f208:	f7ff ff78 	bl	800f0fc <std>
 800f20c:	2301      	movs	r3, #1
 800f20e:	61a3      	str	r3, [r4, #24]
 800f210:	e7d2      	b.n	800f1b8 <__sinit+0xc>
 800f212:	bf00      	nop
 800f214:	0800f638 	.word	0x0800f638
 800f218:	0800f145 	.word	0x0800f145

0800f21c <__sfp>:
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21e:	4607      	mov	r7, r0
 800f220:	f7ff ffac 	bl	800f17c <__sfp_lock_acquire>
 800f224:	4b1e      	ldr	r3, [pc, #120]	; (800f2a0 <__sfp+0x84>)
 800f226:	681e      	ldr	r6, [r3, #0]
 800f228:	69b3      	ldr	r3, [r6, #24]
 800f22a:	b913      	cbnz	r3, 800f232 <__sfp+0x16>
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7ff ffbd 	bl	800f1ac <__sinit>
 800f232:	3648      	adds	r6, #72	; 0x48
 800f234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f238:	3b01      	subs	r3, #1
 800f23a:	d503      	bpl.n	800f244 <__sfp+0x28>
 800f23c:	6833      	ldr	r3, [r6, #0]
 800f23e:	b30b      	cbz	r3, 800f284 <__sfp+0x68>
 800f240:	6836      	ldr	r6, [r6, #0]
 800f242:	e7f7      	b.n	800f234 <__sfp+0x18>
 800f244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f248:	b9d5      	cbnz	r5, 800f280 <__sfp+0x64>
 800f24a:	4b16      	ldr	r3, [pc, #88]	; (800f2a4 <__sfp+0x88>)
 800f24c:	60e3      	str	r3, [r4, #12]
 800f24e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f252:	6665      	str	r5, [r4, #100]	; 0x64
 800f254:	f000 f847 	bl	800f2e6 <__retarget_lock_init_recursive>
 800f258:	f7ff ff96 	bl	800f188 <__sfp_lock_release>
 800f25c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f264:	6025      	str	r5, [r4, #0]
 800f266:	61a5      	str	r5, [r4, #24]
 800f268:	2208      	movs	r2, #8
 800f26a:	4629      	mov	r1, r5
 800f26c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f270:	f7fb fd22 	bl	800acb8 <memset>
 800f274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f27c:	4620      	mov	r0, r4
 800f27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f280:	3468      	adds	r4, #104	; 0x68
 800f282:	e7d9      	b.n	800f238 <__sfp+0x1c>
 800f284:	2104      	movs	r1, #4
 800f286:	4638      	mov	r0, r7
 800f288:	f7ff ff62 	bl	800f150 <__sfmoreglue>
 800f28c:	4604      	mov	r4, r0
 800f28e:	6030      	str	r0, [r6, #0]
 800f290:	2800      	cmp	r0, #0
 800f292:	d1d5      	bne.n	800f240 <__sfp+0x24>
 800f294:	f7ff ff78 	bl	800f188 <__sfp_lock_release>
 800f298:	230c      	movs	r3, #12
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	e7ee      	b.n	800f27c <__sfp+0x60>
 800f29e:	bf00      	nop
 800f2a0:	0800f638 	.word	0x0800f638
 800f2a4:	ffff0001 	.word	0xffff0001

0800f2a8 <_fwalk_reent>:
 800f2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	4688      	mov	r8, r1
 800f2b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2b4:	2700      	movs	r7, #0
 800f2b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2ba:	f1b9 0901 	subs.w	r9, r9, #1
 800f2be:	d505      	bpl.n	800f2cc <_fwalk_reent+0x24>
 800f2c0:	6824      	ldr	r4, [r4, #0]
 800f2c2:	2c00      	cmp	r4, #0
 800f2c4:	d1f7      	bne.n	800f2b6 <_fwalk_reent+0xe>
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2cc:	89ab      	ldrh	r3, [r5, #12]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d907      	bls.n	800f2e2 <_fwalk_reent+0x3a>
 800f2d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	d003      	beq.n	800f2e2 <_fwalk_reent+0x3a>
 800f2da:	4629      	mov	r1, r5
 800f2dc:	4630      	mov	r0, r6
 800f2de:	47c0      	blx	r8
 800f2e0:	4307      	orrs	r7, r0
 800f2e2:	3568      	adds	r5, #104	; 0x68
 800f2e4:	e7e9      	b.n	800f2ba <_fwalk_reent+0x12>

0800f2e6 <__retarget_lock_init_recursive>:
 800f2e6:	4770      	bx	lr

0800f2e8 <__retarget_lock_acquire_recursive>:
 800f2e8:	4770      	bx	lr

0800f2ea <__retarget_lock_release_recursive>:
 800f2ea:	4770      	bx	lr

0800f2ec <__swhatbuf_r>:
 800f2ec:	b570      	push	{r4, r5, r6, lr}
 800f2ee:	460e      	mov	r6, r1
 800f2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f4:	2900      	cmp	r1, #0
 800f2f6:	b096      	sub	sp, #88	; 0x58
 800f2f8:	4614      	mov	r4, r2
 800f2fa:	461d      	mov	r5, r3
 800f2fc:	da08      	bge.n	800f310 <__swhatbuf_r+0x24>
 800f2fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f302:	2200      	movs	r2, #0
 800f304:	602a      	str	r2, [r5, #0]
 800f306:	061a      	lsls	r2, r3, #24
 800f308:	d410      	bmi.n	800f32c <__swhatbuf_r+0x40>
 800f30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f30e:	e00e      	b.n	800f32e <__swhatbuf_r+0x42>
 800f310:	466a      	mov	r2, sp
 800f312:	f000 f903 	bl	800f51c <_fstat_r>
 800f316:	2800      	cmp	r0, #0
 800f318:	dbf1      	blt.n	800f2fe <__swhatbuf_r+0x12>
 800f31a:	9a01      	ldr	r2, [sp, #4]
 800f31c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f324:	425a      	negs	r2, r3
 800f326:	415a      	adcs	r2, r3
 800f328:	602a      	str	r2, [r5, #0]
 800f32a:	e7ee      	b.n	800f30a <__swhatbuf_r+0x1e>
 800f32c:	2340      	movs	r3, #64	; 0x40
 800f32e:	2000      	movs	r0, #0
 800f330:	6023      	str	r3, [r4, #0]
 800f332:	b016      	add	sp, #88	; 0x58
 800f334:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f338 <__smakebuf_r>:
 800f338:	898b      	ldrh	r3, [r1, #12]
 800f33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f33c:	079d      	lsls	r5, r3, #30
 800f33e:	4606      	mov	r6, r0
 800f340:	460c      	mov	r4, r1
 800f342:	d507      	bpl.n	800f354 <__smakebuf_r+0x1c>
 800f344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	6123      	str	r3, [r4, #16]
 800f34c:	2301      	movs	r3, #1
 800f34e:	6163      	str	r3, [r4, #20]
 800f350:	b002      	add	sp, #8
 800f352:	bd70      	pop	{r4, r5, r6, pc}
 800f354:	ab01      	add	r3, sp, #4
 800f356:	466a      	mov	r2, sp
 800f358:	f7ff ffc8 	bl	800f2ec <__swhatbuf_r>
 800f35c:	9900      	ldr	r1, [sp, #0]
 800f35e:	4605      	mov	r5, r0
 800f360:	4630      	mov	r0, r6
 800f362:	f7ff f957 	bl	800e614 <_malloc_r>
 800f366:	b948      	cbnz	r0, 800f37c <__smakebuf_r+0x44>
 800f368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f36c:	059a      	lsls	r2, r3, #22
 800f36e:	d4ef      	bmi.n	800f350 <__smakebuf_r+0x18>
 800f370:	f023 0303 	bic.w	r3, r3, #3
 800f374:	f043 0302 	orr.w	r3, r3, #2
 800f378:	81a3      	strh	r3, [r4, #12]
 800f37a:	e7e3      	b.n	800f344 <__smakebuf_r+0xc>
 800f37c:	4b0d      	ldr	r3, [pc, #52]	; (800f3b4 <__smakebuf_r+0x7c>)
 800f37e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f380:	89a3      	ldrh	r3, [r4, #12]
 800f382:	6020      	str	r0, [r4, #0]
 800f384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f388:	81a3      	strh	r3, [r4, #12]
 800f38a:	9b00      	ldr	r3, [sp, #0]
 800f38c:	6163      	str	r3, [r4, #20]
 800f38e:	9b01      	ldr	r3, [sp, #4]
 800f390:	6120      	str	r0, [r4, #16]
 800f392:	b15b      	cbz	r3, 800f3ac <__smakebuf_r+0x74>
 800f394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f398:	4630      	mov	r0, r6
 800f39a:	f000 f8d1 	bl	800f540 <_isatty_r>
 800f39e:	b128      	cbz	r0, 800f3ac <__smakebuf_r+0x74>
 800f3a0:	89a3      	ldrh	r3, [r4, #12]
 800f3a2:	f023 0303 	bic.w	r3, r3, #3
 800f3a6:	f043 0301 	orr.w	r3, r3, #1
 800f3aa:	81a3      	strh	r3, [r4, #12]
 800f3ac:	89a0      	ldrh	r0, [r4, #12]
 800f3ae:	4305      	orrs	r5, r0
 800f3b0:	81a5      	strh	r5, [r4, #12]
 800f3b2:	e7cd      	b.n	800f350 <__smakebuf_r+0x18>
 800f3b4:	0800f145 	.word	0x0800f145

0800f3b8 <_malloc_usable_size_r>:
 800f3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3bc:	1f18      	subs	r0, r3, #4
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	bfbc      	itt	lt
 800f3c2:	580b      	ldrlt	r3, [r1, r0]
 800f3c4:	18c0      	addlt	r0, r0, r3
 800f3c6:	4770      	bx	lr

0800f3c8 <_raise_r>:
 800f3c8:	291f      	cmp	r1, #31
 800f3ca:	b538      	push	{r3, r4, r5, lr}
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	d904      	bls.n	800f3dc <_raise_r+0x14>
 800f3d2:	2316      	movs	r3, #22
 800f3d4:	6003      	str	r3, [r0, #0]
 800f3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3da:	bd38      	pop	{r3, r4, r5, pc}
 800f3dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f3de:	b112      	cbz	r2, 800f3e6 <_raise_r+0x1e>
 800f3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3e4:	b94b      	cbnz	r3, 800f3fa <_raise_r+0x32>
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f000 f830 	bl	800f44c <_getpid_r>
 800f3ec:	462a      	mov	r2, r5
 800f3ee:	4601      	mov	r1, r0
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3f6:	f000 b817 	b.w	800f428 <_kill_r>
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d00a      	beq.n	800f414 <_raise_r+0x4c>
 800f3fe:	1c59      	adds	r1, r3, #1
 800f400:	d103      	bne.n	800f40a <_raise_r+0x42>
 800f402:	2316      	movs	r3, #22
 800f404:	6003      	str	r3, [r0, #0]
 800f406:	2001      	movs	r0, #1
 800f408:	e7e7      	b.n	800f3da <_raise_r+0x12>
 800f40a:	2400      	movs	r4, #0
 800f40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f410:	4628      	mov	r0, r5
 800f412:	4798      	blx	r3
 800f414:	2000      	movs	r0, #0
 800f416:	e7e0      	b.n	800f3da <_raise_r+0x12>

0800f418 <raise>:
 800f418:	4b02      	ldr	r3, [pc, #8]	; (800f424 <raise+0xc>)
 800f41a:	4601      	mov	r1, r0
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	f7ff bfd3 	b.w	800f3c8 <_raise_r>
 800f422:	bf00      	nop
 800f424:	2000010c 	.word	0x2000010c

0800f428 <_kill_r>:
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4d07      	ldr	r5, [pc, #28]	; (800f448 <_kill_r+0x20>)
 800f42c:	2300      	movs	r3, #0
 800f42e:	4604      	mov	r4, r0
 800f430:	4608      	mov	r0, r1
 800f432:	4611      	mov	r1, r2
 800f434:	602b      	str	r3, [r5, #0]
 800f436:	f7f2 fe73 	bl	8002120 <_kill>
 800f43a:	1c43      	adds	r3, r0, #1
 800f43c:	d102      	bne.n	800f444 <_kill_r+0x1c>
 800f43e:	682b      	ldr	r3, [r5, #0]
 800f440:	b103      	cbz	r3, 800f444 <_kill_r+0x1c>
 800f442:	6023      	str	r3, [r4, #0]
 800f444:	bd38      	pop	{r3, r4, r5, pc}
 800f446:	bf00      	nop
 800f448:	20002110 	.word	0x20002110

0800f44c <_getpid_r>:
 800f44c:	f7f2 be60 	b.w	8002110 <_getpid>

0800f450 <__sread>:
 800f450:	b510      	push	{r4, lr}
 800f452:	460c      	mov	r4, r1
 800f454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f458:	f000 f894 	bl	800f584 <_read_r>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	bfab      	itete	ge
 800f460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f462:	89a3      	ldrhlt	r3, [r4, #12]
 800f464:	181b      	addge	r3, r3, r0
 800f466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f46a:	bfac      	ite	ge
 800f46c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f46e:	81a3      	strhlt	r3, [r4, #12]
 800f470:	bd10      	pop	{r4, pc}

0800f472 <__swrite>:
 800f472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f476:	461f      	mov	r7, r3
 800f478:	898b      	ldrh	r3, [r1, #12]
 800f47a:	05db      	lsls	r3, r3, #23
 800f47c:	4605      	mov	r5, r0
 800f47e:	460c      	mov	r4, r1
 800f480:	4616      	mov	r6, r2
 800f482:	d505      	bpl.n	800f490 <__swrite+0x1e>
 800f484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f488:	2302      	movs	r3, #2
 800f48a:	2200      	movs	r2, #0
 800f48c:	f000 f868 	bl	800f560 <_lseek_r>
 800f490:	89a3      	ldrh	r3, [r4, #12]
 800f492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f49a:	81a3      	strh	r3, [r4, #12]
 800f49c:	4632      	mov	r2, r6
 800f49e:	463b      	mov	r3, r7
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a6:	f000 b817 	b.w	800f4d8 <_write_r>

0800f4aa <__sseek>:
 800f4aa:	b510      	push	{r4, lr}
 800f4ac:	460c      	mov	r4, r1
 800f4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b2:	f000 f855 	bl	800f560 <_lseek_r>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	bf15      	itete	ne
 800f4bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4c6:	81a3      	strheq	r3, [r4, #12]
 800f4c8:	bf18      	it	ne
 800f4ca:	81a3      	strhne	r3, [r4, #12]
 800f4cc:	bd10      	pop	{r4, pc}

0800f4ce <__sclose>:
 800f4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d2:	f000 b813 	b.w	800f4fc <_close_r>
	...

0800f4d8 <_write_r>:
 800f4d8:	b538      	push	{r3, r4, r5, lr}
 800f4da:	4d07      	ldr	r5, [pc, #28]	; (800f4f8 <_write_r+0x20>)
 800f4dc:	4604      	mov	r4, r0
 800f4de:	4608      	mov	r0, r1
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	602a      	str	r2, [r5, #0]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	f7f2 fe51 	bl	800218e <_write>
 800f4ec:	1c43      	adds	r3, r0, #1
 800f4ee:	d102      	bne.n	800f4f6 <_write_r+0x1e>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	b103      	cbz	r3, 800f4f6 <_write_r+0x1e>
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	20002110 	.word	0x20002110

0800f4fc <_close_r>:
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	4d06      	ldr	r5, [pc, #24]	; (800f518 <_close_r+0x1c>)
 800f500:	2300      	movs	r3, #0
 800f502:	4604      	mov	r4, r0
 800f504:	4608      	mov	r0, r1
 800f506:	602b      	str	r3, [r5, #0]
 800f508:	f7f2 fe5d 	bl	80021c6 <_close>
 800f50c:	1c43      	adds	r3, r0, #1
 800f50e:	d102      	bne.n	800f516 <_close_r+0x1a>
 800f510:	682b      	ldr	r3, [r5, #0]
 800f512:	b103      	cbz	r3, 800f516 <_close_r+0x1a>
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	bd38      	pop	{r3, r4, r5, pc}
 800f518:	20002110 	.word	0x20002110

0800f51c <_fstat_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	4d07      	ldr	r5, [pc, #28]	; (800f53c <_fstat_r+0x20>)
 800f520:	2300      	movs	r3, #0
 800f522:	4604      	mov	r4, r0
 800f524:	4608      	mov	r0, r1
 800f526:	4611      	mov	r1, r2
 800f528:	602b      	str	r3, [r5, #0]
 800f52a:	f7f2 fe58 	bl	80021de <_fstat>
 800f52e:	1c43      	adds	r3, r0, #1
 800f530:	d102      	bne.n	800f538 <_fstat_r+0x1c>
 800f532:	682b      	ldr	r3, [r5, #0]
 800f534:	b103      	cbz	r3, 800f538 <_fstat_r+0x1c>
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	bd38      	pop	{r3, r4, r5, pc}
 800f53a:	bf00      	nop
 800f53c:	20002110 	.word	0x20002110

0800f540 <_isatty_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4d06      	ldr	r5, [pc, #24]	; (800f55c <_isatty_r+0x1c>)
 800f544:	2300      	movs	r3, #0
 800f546:	4604      	mov	r4, r0
 800f548:	4608      	mov	r0, r1
 800f54a:	602b      	str	r3, [r5, #0]
 800f54c:	f7f2 fe57 	bl	80021fe <_isatty>
 800f550:	1c43      	adds	r3, r0, #1
 800f552:	d102      	bne.n	800f55a <_isatty_r+0x1a>
 800f554:	682b      	ldr	r3, [r5, #0]
 800f556:	b103      	cbz	r3, 800f55a <_isatty_r+0x1a>
 800f558:	6023      	str	r3, [r4, #0]
 800f55a:	bd38      	pop	{r3, r4, r5, pc}
 800f55c:	20002110 	.word	0x20002110

0800f560 <_lseek_r>:
 800f560:	b538      	push	{r3, r4, r5, lr}
 800f562:	4d07      	ldr	r5, [pc, #28]	; (800f580 <_lseek_r+0x20>)
 800f564:	4604      	mov	r4, r0
 800f566:	4608      	mov	r0, r1
 800f568:	4611      	mov	r1, r2
 800f56a:	2200      	movs	r2, #0
 800f56c:	602a      	str	r2, [r5, #0]
 800f56e:	461a      	mov	r2, r3
 800f570:	f7f2 fe50 	bl	8002214 <_lseek>
 800f574:	1c43      	adds	r3, r0, #1
 800f576:	d102      	bne.n	800f57e <_lseek_r+0x1e>
 800f578:	682b      	ldr	r3, [r5, #0]
 800f57a:	b103      	cbz	r3, 800f57e <_lseek_r+0x1e>
 800f57c:	6023      	str	r3, [r4, #0]
 800f57e:	bd38      	pop	{r3, r4, r5, pc}
 800f580:	20002110 	.word	0x20002110

0800f584 <_read_r>:
 800f584:	b538      	push	{r3, r4, r5, lr}
 800f586:	4d07      	ldr	r5, [pc, #28]	; (800f5a4 <_read_r+0x20>)
 800f588:	4604      	mov	r4, r0
 800f58a:	4608      	mov	r0, r1
 800f58c:	4611      	mov	r1, r2
 800f58e:	2200      	movs	r2, #0
 800f590:	602a      	str	r2, [r5, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	f7f2 fdde 	bl	8002154 <_read>
 800f598:	1c43      	adds	r3, r0, #1
 800f59a:	d102      	bne.n	800f5a2 <_read_r+0x1e>
 800f59c:	682b      	ldr	r3, [r5, #0]
 800f59e:	b103      	cbz	r3, 800f5a2 <_read_r+0x1e>
 800f5a0:	6023      	str	r3, [r4, #0]
 800f5a2:	bd38      	pop	{r3, r4, r5, pc}
 800f5a4:	20002110 	.word	0x20002110

0800f5a8 <_init>:
 800f5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5aa:	bf00      	nop
 800f5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ae:	bc08      	pop	{r3}
 800f5b0:	469e      	mov	lr, r3
 800f5b2:	4770      	bx	lr

0800f5b4 <_fini>:
 800f5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b6:	bf00      	nop
 800f5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ba:	bc08      	pop	{r3}
 800f5bc:	469e      	mov	lr, r3
 800f5be:	4770      	bx	lr
