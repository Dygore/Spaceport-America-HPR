
AthenaOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009374  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009598  08009598  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a0  080095a0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080095a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e18  2000010c  080096b4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f24  080096b4  00021f24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a154  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  0003a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0003dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  0003f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002713f  00000000  00000000  00040850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5df  00000000  00000000  0006798f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3520  00000000  00000000  00084f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016848e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006190  00000000  00000000  001684e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009520 	.word	0x08009520

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08009520 	.word	0x08009520

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <status_LED_Swap>:
 */

#include "stm32f4xx_hal.h"
#include "Status_LED.h"

void status_LED_Swap(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(GPIOB, Status_LED_Pin)){
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <status_LED_Swap+0x34>)
 8000512:	f001 fb1d 	bl	8001b50 <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d106      	bne.n	800052a <status_LED_Swap+0x22>
		HAL_GPIO_WritePin(GPIOB, Status_LED_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <status_LED_Swap+0x34>)
 8000524:	f001 fb2c 	bl	8001b80 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, Status_LED_Pin, GPIO_PIN_RESET);
	}
}
 8000528:	e005      	b.n	8000536 <status_LED_Swap+0x2e>
		HAL_GPIO_WritePin(GPIOB, Status_LED_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <status_LED_Swap+0x34>)
 8000532:	f001 fb25 	bl	8001b80 <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40020400 	.word	0x40020400

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_GPIO_WritePin(GPIOB, Step_PWM_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <main+0x58>)
 800054a:	f001 fb19 	bl	8001b80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Step_EN_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <main+0x5c>)
 8000556:	f001 fb13 	bl	8001b80 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fd4b 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f81f 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fa1d 	bl	80009a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000566:	f000 f887 	bl	8000678 <MX_ADC1_Init>
  MX_I2C1_Init();
 800056a:	f000 f8d7 	bl	800071c <MX_I2C1_Init>
  MX_SPI1_Init();
 800056e:	f000 f903 	bl	8000778 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000572:	f000 f933 	bl	80007dc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000576:	f000 f967 	bl	8000848 <MX_SPI3_Init>
  MX_TIM2_Init();
 800057a:	f000 f99b 	bl	80008b4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800057e:	f008 fa39 	bl	80089f4 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status_LED_Swap();
 8000582:	f7ff ffc1 	bl	8000508 <status_LED_Swap>
	  HAL_Delay(50);
 8000586:	2032      	movs	r0, #50	; 0x32
 8000588:	f000 fda6 	bl	80010d8 <HAL_Delay>
	  status_LED_Swap();
 800058c:	f7ff ffbc 	bl	8000508 <status_LED_Swap>
	  HAL_Delay(50);
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f000 fda1 	bl	80010d8 <HAL_Delay>
	  status_LED_Swap();
 8000596:	e7f4      	b.n	8000582 <main+0x42>
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f008 ffae 	bl	8009510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd4>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000618:	2348      	movs	r3, #72	; 0x48
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fd2d 	bl	800408c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000638:	f000 fa58 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f002 feb9 	bl	80033d0 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000664:	f000 fa42 	bl	8000aec <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_ADC1_Init+0x98>)
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <MX_ADC1_Init+0x9c>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ADC1_Init+0x98>)
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_ADC1_Init+0xa0>)
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_ADC1_Init+0x98>)
 80006d8:	f000 fd22 	bl	8001120 <HAL_ADC_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 fa03 	bl	8000aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_ADC1_Init+0x98>)
 80006f8:	f000 fd56 	bl	80011a8 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000702:	f000 f9f3 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000128 	.word	0x20000128
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_I2C1_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_I2C1_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_I2C1_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_I2C1_Init+0x50>)
 800075a:	f001 fa2b 	bl	8001bb4 <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 f9c2 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000170 	.word	0x20000170
 8000770:	40005400 	.word	0x40005400
 8000774:	000186a0 	.word	0x000186a0

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_SPI1_Init+0x5c>)
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_SPI1_Init+0x60>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_SPI1_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x5c>)
 80007a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI1_Init+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SPI1_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x5c>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SPI1_Init+0x5c>)
 80007c2:	f003 ff01 	bl	80045c8 <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80007cc:	f000 f98e 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001c4 	.word	0x200001c4
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_SPI2_Init+0x64>)
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <MX_SPI2_Init+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI2_Init+0x64>)
 80007e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI2_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_SPI2_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI2_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI2_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI2_Init+0x64>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_SPI2_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI2_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_SPI2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI2_Init+0x64>)
 8000828:	220a      	movs	r2, #10
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_SPI2_Init+0x64>)
 800082e:	f003 fecb 	bl	80045c8 <HAL_SPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f958 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000021c 	.word	0x2000021c
 8000844:	40003800 	.word	0x40003800

08000848 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_SPI3_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <MX_SPI3_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI3_Init+0x64>)
 8000854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI3_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_SPI3_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI3_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI3_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI3_Init+0x64>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI3_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_SPI3_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI3_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_SPI3_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI3_Init+0x64>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_SPI3_Init+0x64>)
 800089a:	f003 fe95 	bl	80045c8 <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 f922 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000274 	.word	0x20000274
 80008b0:	40003c00 	.word	0x40003c00

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_TIM2_Init+0xe8>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_TIM2_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_TIM2_Init+0xe8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_TIM2_Init+0xe8>)
 80008fa:	f04f 32ff 	mov.w	r2, #4294967295
 80008fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_TIM2_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_TIM2_Init+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090c:	4823      	ldr	r0, [pc, #140]	; (800099c <MX_TIM2_Init+0xe8>)
 800090e:	f003 fee4 	bl	80046da <HAL_TIM_Base_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000918:	f000 f8e8 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000926:	4619      	mov	r1, r3
 8000928:	481c      	ldr	r0, [pc, #112]	; (800099c <MX_TIM2_Init+0xe8>)
 800092a:	f004 f841 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000934:	f000 f8da 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000938:	4818      	ldr	r0, [pc, #96]	; (800099c <MX_TIM2_Init+0xe8>)
 800093a:	f003 ff1d 	bl	8004778 <HAL_TIM_PWM_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000944:	f000 f8d2 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4619      	mov	r1, r3
 8000956:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_TIM2_Init+0xe8>)
 8000958:	f004 fbdc 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000962:	f000 f8c3 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000966:	2360      	movs	r3, #96	; 0x60
 8000968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM2_Init+0xe8>)
 800097e:	f003 ff55 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000988:	f000 f8b0 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM2_Init+0xe8>)
 800098e:	f000 fa89 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 8000992:	bf00      	nop
 8000994:	3738      	adds	r7, #56	; 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002cc 	.word	0x200002cc

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b48      	ldr	r3, [pc, #288]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a47      	ldr	r2, [pc, #284]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b41      	ldr	r3, [pc, #260]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a40      	ldr	r2, [pc, #256]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a39      	ldr	r2, [pc, #228]	; (8000adc <MX_GPIO_Init+0x13c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b33      	ldr	r3, [pc, #204]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a32      	ldr	r2, [pc, #200]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a2b      	ldr	r2, [pc, #172]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Flash_CS_Pin|Extra_out_Pin|Step_EN_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7122 	mov.w	r1, #648	; 0x288
 8000a48:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000a4a:	f001 f899 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_Pin|Step_DIR_Pin|Step_PWM_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f249 0110 	movw	r1, #36880	; 0x9010
 8000a54:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <MX_GPIO_Init+0x144>)
 8000a56:	f001 f893 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_GPIO_Init+0x148>)
 8000a60:	f001 f88e 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Flash_CS_Pin Extra_out_Pin Step_EN_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin|Extra_out_Pin|Step_EN_Pin;
 8000a64:	f44f 7322 	mov.w	r3, #648	; 0x288
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000a7e:	f000 fed3 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : Altus_CS_Pin */
  GPIO_InitStruct.Pin = Altus_CS_Pin;
 8000a82:	2310      	movs	r3, #16
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Altus_CS_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000a96:	f000 fec7 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : Status_LED_Pin Step_DIR_Pin Step_PWM_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin|Step_DIR_Pin|Step_PWM_Pin;
 8000a9a:	f249 0310 	movw	r3, #36880	; 0x9010
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0x144>)
 8000ab4:	f000 feb8 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_GPIO_Init+0x148>)
 8000ad0:	f000 feaa 	bl	8001828 <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_ADC_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d127      	bne.n	8000bba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Batt_Pin;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Batt_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_ADC_MspInit+0x84>)
 8000bb6:	f000 fe37 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Extra_SCL_Pin|Extra_SDA_Pin;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f000 fdfd 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b090      	sub	sp, #64	; 0x40
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a72      	ldr	r2, [pc, #456]	; (8000e48 <HAL_SPI_MspInit+0x1e8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12c      	bne.n	8000cdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c86:	4b71      	ldr	r3, [pc, #452]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a70      	ldr	r2, [pc, #448]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b6e      	ldr	r3, [pc, #440]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca2:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a69      	ldr	r2, [pc, #420]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b67      	ldr	r3, [pc, #412]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Altus_SCK_Pin|Altus_MISO_Pin|Altus_MOSI_Pin;
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	485e      	ldr	r0, [pc, #376]	; (8000e50 <HAL_SPI_MspInit+0x1f0>)
 8000cd6:	f000 fda7 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cda:	e0b0      	b.n	8000e3e <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a5c      	ldr	r2, [pc, #368]	; (8000e54 <HAL_SPI_MspInit+0x1f4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d15b      	bne.n	8000d9e <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	4b58      	ldr	r3, [pc, #352]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a57      	ldr	r2, [pc, #348]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	4b51      	ldr	r3, [pc, #324]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a50      	ldr	r2, [pc, #320]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	4b4a      	ldr	r3, [pc, #296]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a49      	ldr	r2, [pc, #292]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Flash_MOSI_Pin;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Flash_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4840      	ldr	r0, [pc, #256]	; (8000e58 <HAL_SPI_MspInit+0x1f8>)
 8000d56:	f000 fd67 	bl	8001828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Flash_MISO_Pin;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Flash_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4838      	ldr	r0, [pc, #224]	; (8000e58 <HAL_SPI_MspInit+0x1f8>)
 8000d76:	f000 fd57 	bl	8001828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Flash_SCK_Pin;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Flash_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	4831      	ldr	r0, [pc, #196]	; (8000e5c <HAL_SPI_MspInit+0x1fc>)
 8000d98:	f000 fd46 	bl	8001828 <HAL_GPIO_Init>
}
 8000d9c:	e04f      	b.n	8000e3e <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <HAL_SPI_MspInit+0x200>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d14a      	bne.n	8000e3e <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_SPI_MspInit+0x1ec>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_MOSI_Pin;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <HAL_SPI_MspInit+0x1fc>)
 8000e18:	f000 fd06 	bl	8001828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin;
 8000e1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <HAL_SPI_MspInit+0x1f8>)
 8000e3a:	f000 fcf5 	bl	8001828 <HAL_GPIO_Init>
}
 8000e3e:	bf00      	nop
 8000e40:	3740      	adds	r7, #64	; 0x40
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40003800 	.word	0x40003800
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40003c00 	.word	0x40003c00

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d10d      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d11e      	bne.n	8000f04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_TIM_MspPostInit+0x68>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_TIM_MspPostInit+0x68>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_MspPostInit+0x68>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzz_PWM_Pin;
 8000ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzz_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	4804      	ldr	r0, [pc, #16]	; (8000f10 <HAL_TIM_MspPostInit+0x6c>)
 8000f00:	f000 fc92 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f89a 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <OTG_FS_IRQHandler+0x10>)
 8000f6e:	f001 f8bc 	bl	80020ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200017f8 	.word	0x200017f8

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd7 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f008 fa7b 	bl	80094c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fab5 	bl	8000540 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000fe4:	080095a8 	.word	0x080095a8
  ldr r2, =_sbss
 8000fe8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000fec:	20001f24 	.word	0x20001f24

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 fbc1 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fd66 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fbd9 	bl	800180e <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 fba1 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000314 	.word	0x20000314

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000314 	.word	0x20000314

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e033      	b.n	800119e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fd02 	bl	8000b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001166:	f023 0302 	bic.w	r3, r3, #2
 800116a:	f043 0202 	orr.w	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f94a 	bl	800140c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f023 0303 	bic.w	r3, r3, #3
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
 800118e:	e001      	b.n	8001194 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1c>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e113      	b.n	80013ec <HAL_ADC_ConfigChannel+0x244>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d925      	bls.n	8001220 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68d9      	ldr	r1, [r3, #12]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	3b1e      	subs	r3, #30
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43da      	mvns	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	400a      	ands	r2, r1
 80011f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68d9      	ldr	r1, [r3, #12]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	4603      	mov	r3, r0
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4403      	add	r3, r0
 8001212:	3b1e      	subs	r3, #30
 8001214:	409a      	lsls	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	e022      	b.n	8001266 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6919      	ldr	r1, [r3, #16]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	2207      	movs	r2, #7
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	400a      	ands	r2, r1
 8001242:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6919      	ldr	r1, [r3, #16]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	4603      	mov	r3, r0
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4403      	add	r3, r0
 800125c:	409a      	lsls	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b06      	cmp	r3, #6
 800126c:	d824      	bhi.n	80012b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	3b05      	subs	r3, #5
 8001280:	221f      	movs	r2, #31
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	400a      	ands	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	3b05      	subs	r3, #5
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
 80012b6:	e04c      	b.n	8001352 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d824      	bhi.n	800130a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b23      	subs	r3, #35	; 0x23
 80012d2:	221f      	movs	r2, #31
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43da      	mvns	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3b23      	subs	r3, #35	; 0x23
 80012fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
 8001308:	e023      	b.n	8001352 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b41      	subs	r3, #65	; 0x41
 800131c:	221f      	movs	r2, #31
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b41      	subs	r3, #65	; 0x41
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_ADC_ConfigChannel+0x250>)
 8001354:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_ADC_ConfigChannel+0x254>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d10f      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x1d8>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d10b      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_ADC_ConfigChannel+0x254>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12b      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x23a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_ADC_ConfigChannel+0x258>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d003      	beq.n	800139c <HAL_ADC_ConfigChannel+0x1f4>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b11      	cmp	r3, #17
 800139a:	d122      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_ADC_ConfigChannel+0x258>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d111      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_ADC_ConfigChannel+0x25c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_ADC_ConfigChannel+0x260>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9a      	lsrs	r2, r3, #18
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40012300 	.word	0x40012300
 80013fc:	40012000 	.word	0x40012000
 8001400:	10000012 	.word	0x10000012
 8001404:	20000000 	.word	0x20000000
 8001408:	431bde83 	.word	0x431bde83

0800140c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001414:	4b79      	ldr	r3, [pc, #484]	; (80015fc <ADC_Init+0x1f0>)
 8001416:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	431a      	orrs	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	021a      	lsls	r2, r3, #8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6899      	ldr	r1, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	4a58      	ldr	r2, [pc, #352]	; (8001600 <ADC_Init+0x1f4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d022      	beq.n	80014ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6899      	ldr	r1, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6899      	ldr	r1, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	e00f      	b.n	800150a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001508:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0202 	bic.w	r2, r2, #2
 8001518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6899      	ldr	r1, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7e1b      	ldrb	r3, [r3, #24]
 8001524:	005a      	lsls	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01b      	beq.n	8001570 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001546:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6859      	ldr	r1, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	3b01      	subs	r3, #1
 8001564:	035a      	lsls	r2, r3, #13
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e007      	b.n	8001580 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	3b01      	subs	r3, #1
 800159c:	051a      	lsls	r2, r3, #20
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c2:	025a      	lsls	r2, r3, #9
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	029a      	lsls	r2, r3, #10
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	609a      	str	r2, [r3, #8]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40012300 	.word	0x40012300
 8001600:	0f000001 	.word	0x0f000001

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e165      	b.n	8001b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8154 	bne.w	8001b0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	2b02      	cmp	r3, #2
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80ae 	beq.w	8001b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x304>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <HAL_GPIO_Init+0x308>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x21a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x216>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4d      	ldr	r2, [pc, #308]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_GPIO_Init+0x314>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x20e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <HAL_GPIO_Init+0x318>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x20a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x31c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x206>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x202>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x21c>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a86:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f ae96 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e001      	b.n	8001b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b9c:	e003      	b.n	8001ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e12b      	b.n	8001e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fff8 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c18:	f001 fccc 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8001c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a81      	ldr	r2, [pc, #516]	; (8001e28 <HAL_I2C_Init+0x274>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d807      	bhi.n	8001c38 <HAL_I2C_Init+0x84>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4a80      	ldr	r2, [pc, #512]	; (8001e2c <HAL_I2C_Init+0x278>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	bf94      	ite	ls
 8001c30:	2301      	movls	r3, #1
 8001c32:	2300      	movhi	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e006      	b.n	8001c46 <HAL_I2C_Init+0x92>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4a7d      	ldr	r2, [pc, #500]	; (8001e30 <HAL_I2C_Init+0x27c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	bf94      	ite	ls
 8001c40:	2301      	movls	r3, #1
 8001c42:	2300      	movhi	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0e7      	b.n	8001e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4a78      	ldr	r2, [pc, #480]	; (8001e34 <HAL_I2C_Init+0x280>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	0c9b      	lsrs	r3, r3, #18
 8001c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_I2C_Init+0x274>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d802      	bhi.n	8001c88 <HAL_I2C_Init+0xd4>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3301      	adds	r3, #1
 8001c86:	e009      	b.n	8001c9c <HAL_I2C_Init+0xe8>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	4a69      	ldr	r2, [pc, #420]	; (8001e38 <HAL_I2C_Init+0x284>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	495c      	ldr	r1, [pc, #368]	; (8001e28 <HAL_I2C_Init+0x274>)
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	d819      	bhi.n	8001cf0 <HAL_I2C_Init+0x13c>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e59      	subs	r1, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cca:	1c59      	adds	r1, r3, #1
 8001ccc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <HAL_I2C_Init+0x138>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e59      	subs	r1, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cea:	e051      	b.n	8001d90 <HAL_I2C_Init+0x1dc>
 8001cec:	2304      	movs	r3, #4
 8001cee:	e04f      	b.n	8001d90 <HAL_I2C_Init+0x1dc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_I2C_Init+0x168>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e012      	b.n	8001d42 <HAL_I2C_Init+0x18e>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e58      	subs	r0, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	0099      	lsls	r1, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Init+0x196>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e022      	b.n	8001d90 <HAL_I2C_Init+0x1dc>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10e      	bne.n	8001d70 <HAL_I2C_Init+0x1bc>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1e58      	subs	r0, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	440b      	add	r3, r1
 8001d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6e:	e00f      	b.n	8001d90 <HAL_I2C_Init+0x1dc>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	0099      	lsls	r1, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d86:	3301      	adds	r3, #1
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6809      	ldr	r1, [r1, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6911      	ldr	r1, [r2, #16]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	000186a0 	.word	0x000186a0
 8001e2c:	001e847f 	.word	0x001e847f
 8001e30:	003d08ff 	.word	0x003d08ff
 8001e34:	431bde83 	.word	0x431bde83
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3e:	b08f      	sub	sp, #60	; 0x3c
 8001e40:	af0a      	add	r7, sp, #40	; 0x28
 8001e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e116      	b.n	800207c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f006 ffb5 	bl	8008dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2203      	movs	r2, #3
 8001e72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fad2 	bl	8005436 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	687e      	ldr	r6, [r7, #4]
 8001e9a:	466d      	mov	r5, sp
 8001e9c:	f106 0410 	add.w	r4, r6, #16
 8001ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb0:	1d33      	adds	r3, r6, #4
 8001eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	f003 f9a9 	bl	800520c <USB_CoreInit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d7      	b.n	800207c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fac0 	bl	8005458 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e04a      	b.n	8001f74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	333d      	adds	r3, #61	; 0x3d
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	333c      	adds	r3, #60	; 0x3c
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	b298      	uxth	r0, r3
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3344      	adds	r3, #68	; 0x44
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3340      	adds	r3, #64	; 0x40
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3348      	adds	r3, #72	; 0x48
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	334c      	adds	r3, #76	; 0x4c
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3354      	adds	r3, #84	; 0x54
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3af      	bcc.n	8001ede <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e044      	b.n	800200e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3b5      	bcc.n	8001f84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	687e      	ldr	r6, [r7, #4]
 8002020:	466d      	mov	r5, sp
 8002022:	f106 0410 	add.w	r4, r6, #16
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002032:	e885 0003 	stmia.w	r5, {r0, r1}
 8002036:	1d33      	adds	r3, r6, #4
 8002038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203a:	6838      	ldr	r0, [r7, #0]
 800203c:	f003 fa58 	bl	80054f0 <USB_DevInit>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e014      	b.n	800207c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f001 f98c 	bl	8003388 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fb9a 	bl	80067ae <USB_DevDisconnect>

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002084 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_Start+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e020      	b.n	80020e2 <HAL_PCD_Start+0x5e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d109      	bne.n	80020c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f9a3 	bl	8005414 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fb4a 	bl	800676c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b08d      	sub	sp, #52	; 0x34
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fc08 	bl	8006916 <USB_GetMode>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 84b7 	bne.w	8002a7c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 fb6c 	bl	80067f0 <USB_ReadInterrupts>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 84ad 	beq.w	8002a7a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fb59 	bl	80067f0 <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b02      	cmp	r3, #2
 8002146:	d107      	bne.n	8002158 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f002 0202 	and.w	r2, r2, #2
 8002156:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fb47 	bl	80067f0 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d161      	bne.n	8002230 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0210 	bic.w	r2, r2, #16
 800217a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 020f 	and.w	r2, r3, #15
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	0c5b      	lsrs	r3, r3, #17
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d124      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d035      	beq.n	8002220 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	6a38      	ldr	r0, [r7, #32]
 80021c8:	f004 f97e 	bl	80064c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d8:	441a      	add	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	6a1a      	ldr	r2, [r3, #32]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ea:	441a      	add	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	621a      	str	r2, [r3, #32]
 80021f0:	e016      	b.n	8002220 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	0c5b      	lsrs	r3, r3, #17
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d110      	bne.n	8002220 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002204:	2208      	movs	r2, #8
 8002206:	4619      	mov	r1, r3
 8002208:	6a38      	ldr	r0, [r7, #32]
 800220a:	f004 f95d 	bl	80064c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221a:	441a      	add	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0210 	orr.w	r2, r2, #16
 800222e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 fadb 	bl	80067f0 <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002244:	f040 80a7 	bne.w	8002396 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f004 fae0 	bl	8006816 <USB_ReadDevAllOutEpInterrupt>
 8002256:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002258:	e099      	b.n	800238e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 808e 	beq.w	8002382 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fb04 	bl	800687e <USB_ReadDevOutEPInterrupt>
 8002276:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228e:	461a      	mov	r2, r3
 8002290:	2301      	movs	r3, #1
 8002292:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fef0 	bl	800307c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b2:	461a      	mov	r2, r3
 80022b4:	2308      	movs	r3, #8
 80022b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 ffc6 	bl	800324c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	461a      	mov	r2, r3
 80022d8:	2310      	movs	r3, #16
 80022da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d030      	beq.n	8002348 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	2b80      	cmp	r3, #128	; 0x80
 80022f0:	d109      	bne.n	8002306 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002304:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	78db      	ldrb	r3, [r3, #3]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d108      	bne.n	8002336 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f006 fe6d 	bl	8009010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	2302      	movs	r3, #2
 8002346:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	2320      	movs	r3, #32
 8002362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002380:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	3301      	adds	r3, #1
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	f47f af62 	bne.w	800225a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fa28 	bl	80067f0 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023aa:	f040 80db 	bne.w	8002564 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 fa49 	bl	800684a <USB_ReadDevAllInEpInterrupt>
 80023b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023be:	e0cd      	b.n	800255c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80c2 	beq.w	8002550 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fa6f 	bl	80068ba <USB_ReadDevInEPInterrupt>
 80023dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d057      	beq.n	8002498 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	2201      	movs	r2, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	69f9      	ldr	r1, [r7, #28]
 8002404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002408:	4013      	ands	r3, r2
 800240a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002418:	461a      	mov	r2, r3
 800241a:	2301      	movs	r3, #1
 800241c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d132      	bne.n	800248c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	334c      	adds	r3, #76	; 0x4c
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4403      	add	r3, r0
 8002446:	3348      	adds	r3, #72	; 0x48
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4419      	add	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	334c      	adds	r3, #76	; 0x4c
 800245c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d113      	bne.n	800248c <HAL_PCD_IRQHandler+0x3a2>
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3354      	adds	r3, #84	; 0x54
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002484:	461a      	mov	r2, r3
 8002486:	2101      	movs	r1, #1
 8002488:	f004 fa76 	bl	8006978 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f006 fd37 	bl	8008f06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ae:	461a      	mov	r2, r3
 80024b0:	2308      	movs	r3, #8
 80024b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ca:	461a      	mov	r2, r3
 80024cc:	2310      	movs	r3, #16
 80024ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e6:	461a      	mov	r2, r3
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d023      	beq.n	800253e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f8:	6a38      	ldr	r0, [r7, #32]
 80024fa:	f003 f957 	bl	80057ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	3338      	adds	r3, #56	; 0x38
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	78db      	ldrb	r3, [r3, #3]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f006 fd84 	bl	8009034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002538:	461a      	mov	r2, r3
 800253a:	2302      	movs	r3, #2
 800253c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fd08 	bl	8002f60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3301      	adds	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	f47f af2e 	bne.w	80023c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f004 f941 	bl	80067f0 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002578:	d122      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002594:	2b01      	cmp	r3, #1
 8002596:	d108      	bne.n	80025aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025a0:	2100      	movs	r1, #0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f006 fefe 	bl	80093a4 <HAL_PCDEx_LPM_Callback>
 80025a8:	e002      	b.n	80025b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f006 fd22 	bl	8008ff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 f913 	bl	80067f0 <USB_ReadInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d4:	d112      	bne.n	80025fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f006 fcde 	bl	8008fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025fa:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 f8f5 	bl	80067f0 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800260c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002610:	d121      	bne.n	8002656 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002620:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002646:	2101      	movs	r1, #1
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f006 feab 	bl	80093a4 <HAL_PCDEx_LPM_Callback>
 800264e:	e002      	b.n	8002656 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f006 fca9 	bl	8008fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 f8c8 	bl	80067f0 <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	f040 80b7 	bne.w	80027dc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2110      	movs	r1, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f003 f88f 	bl	80057ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	e046      	b.n	8002722 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b8:	0151      	lsls	r1, r2, #5
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	440a      	add	r2, r1
 80026be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	461a      	mov	r2, r3
 80026d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ec:	0151      	lsls	r1, r2, #5
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	440a      	add	r2, r1
 80026f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270c:	0151      	lsls	r1, r2, #5
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	440a      	add	r2, r1
 8002712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800271a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	3301      	adds	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	429a      	cmp	r2, r3
 800272a:	d3b3      	bcc.n	8002694 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800273e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002758:	f043 030b 	orr.w	r3, r3, #11
 800275c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276e:	f043 030b 	orr.w	r3, r3, #11
 8002772:	6453      	str	r3, [r2, #68]	; 0x44
 8002774:	e015      	b.n	80027a2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002788:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800278c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f043 030b 	orr.w	r3, r3, #11
 80027a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c6:	461a      	mov	r2, r3
 80027c8:	f004 f8d6 	bl	8006978 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 f805 	bl	80067f0 <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	d124      	bne.n	800283c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 f89b 	bl	8006932 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f003 f850 	bl	80058a6 <USB_GetDevSpeed>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	f000 fec3 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8002816:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	4620      	mov	r0, r4
 8002822:	f002 fd55 	bl	80052d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 fb95 	bl	8008f56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800283a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f003 ffd5 	bl	80067f0 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b08      	cmp	r3, #8
 800284e:	d10a      	bne.n	8002866 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f006 fb72 	bl	8008f3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f002 0208 	and.w	r2, r2, #8
 8002864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f003 ffc0 	bl	80067f0 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d122      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002886:	2301      	movs	r3, #1
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	e014      	b.n	80028b6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fb27 	bl	8002efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3e5      	bcc.n	800288c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 ff93 	bl	80067f0 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028d4:	d13b      	bne.n	800294e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e02b      	b.n	8002934 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3340      	adds	r3, #64	; 0x40
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d115      	bne.n	800292e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002902:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	da12      	bge.n	800292e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	333f      	adds	r3, #63	; 0x3f
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fae8 	bl	8002efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	429a      	cmp	r2, r3
 800293c:	d3ce      	bcc.n	80028dc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f003 ff4c 	bl	80067f0 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002962:	d155      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	e045      	b.n	80029f6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d12e      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002992:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	da2b      	bge.n	80029f0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d121      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ec:	6053      	str	r3, [r2, #4]
            break;
 80029ee:	e007      	b.n	8002a00 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3301      	adds	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3b4      	bcc.n	800296a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 feeb 	bl	80067f0 <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d10a      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f006 fb16 	bl	8009058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fed5 	bl	80067f0 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d115      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f006 fb06 	bl	8009074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	e000      	b.n	8002a7c <HAL_PCD_IRQHandler+0x992>
      return;
 8002a7a:	bf00      	nop
    }
  }
}
 8002a7c:	3734      	adds	r7, #52	; 0x34
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}

08002a82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_PCD_SetAddress+0x1a>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e013      	b.n	8002ac4 <HAL_PCD_SetAddress+0x42>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fe33 	bl	8006720 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	70fb      	strb	r3, [r7, #3]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	803b      	strh	r3, [r7, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da0f      	bge.n	8002b12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 020f 	and.w	r2, r3, #15
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	3338      	adds	r3, #56	; 0x38
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
 8002b10:	e00f      	b.n	8002b32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b3e:	883a      	ldrh	r2, [r7, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	78ba      	ldrb	r2, [r7, #2]
 8002b48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b5c:	78bb      	ldrb	r3, [r7, #2]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d102      	bne.n	8002b68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_PCD_EP_Open+0xaa>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e00e      	b.n	8002b94 <HAL_PCD_EP_Open+0xc8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 feb3 	bl	80058f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	da0f      	bge.n	8002bd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	3338      	adds	r3, #56	; 0x38
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	705a      	strb	r2, [r3, #1]
 8002bce:	e00f      	b.n	8002bf0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_PCD_EP_Close+0x6e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e00e      	b.n	8002c28 <HAL_PCD_EP_Close+0x8c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f002 fef1 	bl	8005a00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	f003 020f 	and.w	r2, r3, #15
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c72:	7afb      	ldrb	r3, [r7, #11]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6979      	ldr	r1, [r7, #20]
 8002ca4:	f003 f9d0 	bl	8006048 <USB_EP0StartXfer>
 8002ca8:	e008      	b.n	8002cbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6979      	ldr	r1, [r7, #20]
 8002cb8:	f002 ff7e 	bl	8005bb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 020f 	and.w	r2, r3, #15
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ce8:	681b      	ldr	r3, [r3, #0]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	460b      	mov	r3, r1
 8002d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	3338      	adds	r3, #56	; 0x38
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2201      	movs	r2, #1
 8002d34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	f003 f96e 	bl	8006048 <USB_EP0StartXfer>
 8002d6c:	e008      	b.n	8002d80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6979      	ldr	r1, [r7, #20]
 8002d7c:	f002 ff1c 	bl	8005bb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d901      	bls.n	8002da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e050      	b.n	8002e4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da0f      	bge.n	8002dd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	3338      	adds	r3, #56	; 0x38
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	705a      	strb	r2, [r3, #1]
 8002dce:	e00d      	b.n	8002dec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	3304      	adds	r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_PCD_EP_SetStall+0x82>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e01e      	b.n	8002e4a <HAL_PCD_EP_SetStall+0xc0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fbac 	bl	8006578 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	b2d9      	uxtb	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f003 fd9c 	bl	8006978 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d901      	bls.n	8002e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e042      	b.n	8002ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	da0f      	bge.n	8002e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	3338      	adds	r3, #56	; 0x38
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	705a      	strb	r2, [r3, #1]
 8002e96:	e00f      	b.n	8002eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_PCD_EP_ClrStall+0x86>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e00e      	b.n	8002ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fbb4 	bl	8006654 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0c      	bge.n	8002f2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	3338      	adds	r3, #56	; 0x38
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e00c      	b.n	8002f46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 f9d3 	bl	80062f8 <USB_EPStopXfer>
 8002f52:	4603      	mov	r3, r0
 8002f54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	3338      	adds	r3, #56	; 0x38
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d901      	bls.n	8002f98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e06c      	b.n	8003072 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d902      	bls.n	8002fb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3303      	adds	r3, #3
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fbc:	e02b      	b.n	8003016 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3303      	adds	r3, #3
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6978      	ldr	r0, [r7, #20]
 8002ffa:	f003 fa27 	bl	800644c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	441a      	add	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	441a      	add	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	b29b      	uxth	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	d809      	bhi.n	8003040 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003034:	429a      	cmp	r2, r3
 8003036:	d203      	bcs.n	8003040 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1be      	bne.n	8002fbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	429a      	cmp	r2, r3
 800304a:	d811      	bhi.n	8003070 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	2201      	movs	r2, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	43db      	mvns	r3, r3
 8003066:	6939      	ldr	r1, [r7, #16]
 8003068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800306c:	4013      	ands	r3, r2
 800306e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	333c      	adds	r3, #60	; 0x3c
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d17b      	bne.n	80031aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4a61      	ldr	r2, [pc, #388]	; (8003244 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	f240 80b9 	bls.w	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80b3 	beq.w	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	e0a7      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	2320      	movs	r3, #32
 8003102:	6093      	str	r3, [r2, #8]
 8003104:	e098      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 8093 	bne.w	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d90f      	bls.n	800313a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	6093      	str	r3, [r2, #8]
 8003138:	e07e      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	0159      	lsls	r1, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	440b      	add	r3, r1
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d114      	bne.n	800319c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	f003 fbf6 	bl	8006978 <USB_EP0_OutStart>
 800318c:	e006      	b.n	800319c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f005 fe94 	bl	8008ed0 <HAL_PCD_DataOutStageCallback>
 80031a8:	e046      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d124      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	6093      	str	r3, [r2, #8]
 80031d0:	e032      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	461a      	mov	r2, r3
 80031ea:	2320      	movs	r3, #32
 80031ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f005 fe6b 	bl	8008ed0 <HAL_PCD_DataOutStageCallback>
 80031fa:	e01d      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d114      	bne.n	800322c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003224:	461a      	mov	r2, r3
 8003226:	2100      	movs	r1, #0
 8003228:	f003 fba6 	bl	8006978 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f005 fe4c 	bl	8008ed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	4f54300a 	.word	0x4f54300a
 8003248:	4f54310a 	.word	0x4f54310a

0800324c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	333c      	adds	r3, #60	; 0x3c
 8003264:	3304      	adds	r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d90e      	bls.n	80032a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f005 fe03 	bl	8008eac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d90c      	bls.n	80032c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c0:	461a      	mov	r2, r3
 80032c2:	2101      	movs	r1, #1
 80032c4:	f003 fb58 	bl	8006978 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	4f54300a 	.word	0x4f54300a

080032d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032f6:	883b      	ldrh	r3, [r7, #0]
 80032f8:	0419      	lsls	r1, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	430a      	orrs	r2, r1
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
 8003304:	e028      	b.n	8003358 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4413      	add	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e00d      	b.n	8003336 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3340      	adds	r3, #64	; 0x40
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4413      	add	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	3301      	adds	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	3b01      	subs	r3, #1
 800333c:	429a      	cmp	r2, r3
 800333e:	d3ec      	bcc.n	800331a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003340:	883b      	ldrh	r3, [r7, #0]
 8003342:	0418      	lsls	r0, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	3b01      	subs	r3, #1
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	4302      	orrs	r2, r0
 8003350:	3340      	adds	r3, #64	; 0x40
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	f043 0303 	orr.w	r3, r3, #3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0cc      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d90c      	bls.n	800340c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d044      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d119      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d003      	beq.n	800348e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	2b03      	cmp	r3, #3
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e067      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4934      	ldr	r1, [pc, #208]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fd fdfe 	bl	80010c0 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fd fdfa 	bl	80010c0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e04f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d20c      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003556:	f000 fb6b 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fd5e 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	08009580 	.word	0x08009580
 8003594:	20000000 	.word	0x20000000
 8003598:	20000004 	.word	0x20000004

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000000 	.word	0x20000000

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a9b      	lsrs	r3, r3, #10
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08009590 	.word	0x08009590

080035dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800361a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	496c      	ldr	r1, [pc, #432]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003632:	2301      	movs	r3, #1
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d010      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003642:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003648:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	4960      	ldr	r1, [pc, #384]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003660:	2301      	movs	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003670:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	4955      	ldr	r1, [pc, #340]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368e:	d101      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800369c:	2301      	movs	r3, #1
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d017      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ac:	4b49      	ldr	r3, [pc, #292]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	4946      	ldr	r1, [pc, #280]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ca:	d101      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80036cc:	2301      	movs	r3, #1
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80036d8:	2301      	movs	r3, #1
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 808a 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003712:	f7fd fcd5 	bl	80010c0 <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fd fcd1 	bl	80010c0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e278      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003740:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	429a      	cmp	r2, r3
 8003754:	d028      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d114      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fc9f 	bl	80010c0 <HAL_GetTick>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fc9b 	bl	80010c0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e240      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ee      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b4:	d114      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ca:	4902      	ldr	r1, [pc, #8]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
 80037d0:	e00c      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470e40 	.word	0x42470e40
 80037e0:	4b4a      	ldr	r3, [pc, #296]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a49      	ldr	r2, [pc, #292]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ea:	6093      	str	r3, [r2, #8]
 80037ec:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	4944      	ldr	r1, [pc, #272]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003810:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003812:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003820:	4b3a      	ldr	r3, [pc, #232]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	4937      	ldr	r1, [pc, #220]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003842:	4b32      	ldr	r3, [pc, #200]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003848:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	492e      	ldr	r1, [pc, #184]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d011      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	4926      	ldr	r1, [pc, #152]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003882:	d101      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	491a      	ldr	r1, [pc, #104]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d011      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	4911      	ldr	r1, [pc, #68]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80038d6:	2301      	movs	r3, #1
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d005      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e8:	f040 80ff 	bne.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038f2:	f7fd fbe5 	bl	80010c0 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f8:	e00e      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038fa:	f7fd fbe1 	bl	80010c0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d907      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e188      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800390c:	40023800 	.word	0x40023800
 8003910:	424711e0 	.word	0x424711e0
 8003914:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003918:	4b7e      	ldr	r3, [pc, #504]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ea      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003940:	2b00      	cmp	r3, #0
 8003942:	d028      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d124      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800394c:	4b71      	ldr	r3, [pc, #452]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800394e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003952:	0c1b      	lsrs	r3, r3, #16
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	3301      	adds	r3, #1
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	0e1b      	lsrs	r3, r3, #24
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	431a      	orrs	r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	4961      	ldr	r1, [pc, #388]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d035      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c0:	d130      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	0f1b      	lsrs	r3, r3, #28
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	431a      	orrs	r2, r3
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	431a      	orrs	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	071b      	lsls	r3, r3, #28
 8003a04:	4943      	ldr	r1, [pc, #268]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a0c:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a12:	f023 021f 	bic.w	r2, r3, #31
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	493d      	ldr	r1, [pc, #244]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d029      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a38:	d124      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	019b      	lsls	r3, r3, #6
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	431a      	orrs	r2, r3
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	431a      	orrs	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	4925      	ldr	r1, [pc, #148]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	4917      	ldr	r1, [pc, #92]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fd fafc 	bl	80010c0 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003acc:	f7fd faf8 	bl	80010c0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e09f      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 8095 	bne.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fd fae2 	bl	80010c0 <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003afe:	e00f      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b00:	f7fd fade 	bl	80010c0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d908      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e085      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	42470068 	.word	0x42470068
 8003b1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2c:	d0e8      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02b      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d127      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b56:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	3301      	adds	r3, #1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	431a      	orrs	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	4928      	ldr	r1, [pc, #160]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	4922      	ldr	r1, [pc, #136]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01d      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bba:	d118      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	0e1b      	lsrs	r3, r3, #24
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	019b      	lsls	r3, r3, #6
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	4910      	ldr	r1, [pc, #64]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fa64 	bl	80010c0 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bfc:	f7fd fa60 	bl	80010c0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e007      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1a:	d1ef      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3730      	adds	r7, #48	; 0x30
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470070 	.word	0x42470070

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c34:	b0ae      	sub	sp, #184	; 0xb8
 8003c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c56:	4bcb      	ldr	r3, [pc, #812]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	f200 8204 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x43c>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	0800406d 	.word	0x0800406d
 8003c74:	0800406d 	.word	0x0800406d
 8003c78:	0800406d 	.word	0x0800406d
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	0800406d 	.word	0x0800406d
 8003c84:	0800406d 	.word	0x0800406d
 8003c88:	0800406d 	.word	0x0800406d
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	0800406d 	.word	0x0800406d
 8003c94:	0800406d 	.word	0x0800406d
 8003c98:	0800406d 	.word	0x0800406d
 8003c9c:	08003ea1 	.word	0x08003ea1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4bb9      	ldr	r3, [pc, #740]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ca6:	e1e5      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca8:	4bb7      	ldr	r3, [pc, #732]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cae:	e1e1      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb0:	4bb4      	ldr	r3, [pc, #720]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cbc:	4bb1      	ldr	r3, [pc, #708]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d071      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc8:	4bae      	ldr	r3, [pc, #696]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	0159      	lsls	r1, r3, #5
 8003cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d00:	0150      	lsls	r0, r2, #5
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4621      	mov	r1, r4
 8003d08:	1a51      	subs	r1, r2, r1
 8003d0a:	6439      	str	r1, [r7, #64]	; 0x40
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d12:	647b      	str	r3, [r7, #68]	; 0x44
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d20:	4649      	mov	r1, r9
 8003d22:	018b      	lsls	r3, r1, #6
 8003d24:	4641      	mov	r1, r8
 8003d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	018a      	lsls	r2, r1, #6
 8003d2e:	4641      	mov	r1, r8
 8003d30:	1a51      	subs	r1, r2, r1
 8003d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d34:	4649      	mov	r1, r9
 8003d36:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d48:	4649      	mov	r1, r9
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4641      	mov	r1, r8
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
 8003d62:	462b      	mov	r3, r5
 8003d64:	460a      	mov	r2, r1
 8003d66:	eb42 0303 	adc.w	r3, r2, r3
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d78:	4629      	mov	r1, r5
 8003d7a:	028b      	lsls	r3, r1, #10
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d82:	4621      	mov	r1, r4
 8003d84:	028a      	lsls	r2, r1, #10
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d9c:	f7fc fa32 	bl	8000204 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4613      	mov	r3, r2
 8003da6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003daa:	e067      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dac:	4b75      	ldr	r3, [pc, #468]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dce:	4622      	mov	r2, r4
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4621      	mov	r1, r4
 8003de8:	1a51      	subs	r1, r2, r1
 8003dea:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb63 0301 	sbc.w	r3, r3, r1
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e00:	4649      	mov	r1, r9
 8003e02:	018b      	lsls	r3, r1, #6
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	018a      	lsls	r2, r1, #6
 8003e0e:	4641      	mov	r1, r8
 8003e10:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e14:	4649      	mov	r1, r9
 8003e16:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2e:	4692      	mov	sl, r2
 8003e30:	469b      	mov	fp, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	eb1a 0303 	adds.w	r3, sl, r3
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	028b      	lsls	r3, r1, #10
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e58:	4621      	mov	r1, r4
 8003e5a:	028a      	lsls	r2, r1, #10
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e64:	2200      	movs	r2, #0
 8003e66:	673b      	str	r3, [r7, #112]	; 0x70
 8003e68:	677a      	str	r2, [r7, #116]	; 0x74
 8003e6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e6e:	f7fc f9c9 	bl	8000204 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4613      	mov	r3, r2
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e7c:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e9e:	e0e9      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d069      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eca:	663b      	str	r3, [r7, #96]	; 0x60
 8003ecc:	2300      	movs	r3, #0
 8003ece:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	0159      	lsls	r1, r3, #5
 8003ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee6:	0150      	lsls	r0, r2, #5
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4621      	mov	r1, r4
 8003eee:	1a51      	subs	r1, r2, r1
 8003ef0:	61b9      	str	r1, [r7, #24]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f06:	4659      	mov	r1, fp
 8003f08:	018b      	lsls	r3, r1, #6
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f10:	4651      	mov	r1, sl
 8003f12:	018a      	lsls	r2, r1, #6
 8003f14:	4651      	mov	r1, sl
 8003f16:	ebb2 0801 	subs.w	r8, r2, r1
 8003f1a:	4659      	mov	r1, fp
 8003f1c:	eb63 0901 	sbc.w	r9, r3, r1
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f34:	4690      	mov	r8, r2
 8003f36:	4699      	mov	r9, r3
 8003f38:	4623      	mov	r3, r4
 8003f3a:	eb18 0303 	adds.w	r3, r8, r3
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	462b      	mov	r3, r5
 8003f42:	eb49 0303 	adc.w	r3, r9, r3
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f54:	4629      	mov	r1, r5
 8003f56:	028b      	lsls	r3, r1, #10
 8003f58:	4621      	mov	r1, r4
 8003f5a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f5e:	4621      	mov	r1, r4
 8003f60:	028a      	lsls	r2, r1, #10
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f74:	f7fc f946 	bl	8000204 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f82:	e063      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x41c>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8c:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <HAL_RCC_GetSysClockFreq+0x454>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	2200      	movs	r2, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	4611      	mov	r1, r2
 8003f98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	464b      	mov	r3, r9
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	1a51      	subs	r1, r2, r1
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	1a54      	subs	r4, r2, r1
 8003fea:	4659      	mov	r1, fp
 8003fec:	eb63 0501 	sbc.w	r5, r3, r1
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	00eb      	lsls	r3, r5, #3
 8003ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffe:	00e2      	lsls	r2, r4, #3
 8004000:	4614      	mov	r4, r2
 8004002:	461d      	mov	r5, r3
 8004004:	4643      	mov	r3, r8
 8004006:	18e3      	adds	r3, r4, r3
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	464b      	mov	r3, r9
 800400c:	eb45 0303 	adc.w	r3, r5, r3
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401e:	4629      	mov	r1, r5
 8004020:	028b      	lsls	r3, r1, #10
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004028:	4621      	mov	r1, r4
 800402a:	028a      	lsls	r2, r1, #10
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004034:	2200      	movs	r2, #0
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
 8004038:	64fa      	str	r2, [r7, #76]	; 0x4c
 800403a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403e:	f7fc f8e1 	bl	8000204 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4613      	mov	r3, r2
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_GetSysClockFreq+0x454>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0f1b      	lsrs	r3, r3, #28
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800405a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800405e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800406a:	e003      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_GetSysClockFreq+0x458>)
 800406e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004072:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004078:	4618      	mov	r0, r3
 800407a:	37b8      	adds	r7, #184	; 0xb8
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400

0800408c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e28d      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8083 	beq.w	80041b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040ac:	4b94      	ldr	r3, [pc, #592]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d019      	beq.n	80040ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040b8:	4b91      	ldr	r3, [pc, #580]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040c4:	4b8e      	ldr	r3, [pc, #568]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d0:	d00c      	beq.n	80040ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d2:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d112      	bne.n	8004104 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ea:	d10b      	bne.n	8004104 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	4b84      	ldr	r3, [pc, #528]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d05b      	beq.n	80041b0 <HAL_RCC_OscConfig+0x124>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d157      	bne.n	80041b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e25a      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410c:	d106      	bne.n	800411c <HAL_RCC_OscConfig+0x90>
 800410e:	4b7c      	ldr	r3, [pc, #496]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a7b      	ldr	r2, [pc, #492]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e01d      	b.n	8004158 <HAL_RCC_OscConfig+0xcc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0xb4>
 8004126:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a75      	ldr	r2, [pc, #468]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 800412c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b73      	ldr	r3, [pc, #460]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a72      	ldr	r2, [pc, #456]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0xcc>
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fc ffae 	bl	80010c0 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fc ffaa 	bl	80010c0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e21f      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0xdc>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fc ff9a 	bl	80010c0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fc ff96 	bl	80010c0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e20b      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a2:	4b57      	ldr	r3, [pc, #348]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x104>
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d06f      	beq.n	800429e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041be:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ca:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d105      	bne.n	80041e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d11c      	bne.n	8004228 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b44      	ldr	r3, [pc, #272]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x186>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1d3      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4937      	ldr	r1, [pc, #220]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	e03a      	b.n	800429e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x278>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fc ff43 	bl	80010c0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423e:	f7fc ff3f 	bl	80010c0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1b4      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4925      	ldr	r1, [pc, #148]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x278>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fc ff22 	bl	80010c0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004280:	f7fc ff1e 	bl	80010c0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e193      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d036      	beq.n	8004318 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fc ff02 	bl	80010c0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c0:	f7fc fefe 	bl	80010c0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e173      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_OscConfig+0x274>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x234>
 80042de:	e01b      	b.n	8004318 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fc feeb 	bl	80010c0 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	e00e      	b.n	800430c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fc fee7 	bl	80010c0 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d907      	bls.n	800430c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e15c      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
 8004300:	40023800 	.word	0x40023800
 8004304:	42470000 	.word	0x42470000
 8004308:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b8a      	ldr	r3, [pc, #552]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ea      	bne.n	80042ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8097 	beq.w	8004454 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b83      	ldr	r3, [pc, #524]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	4b7f      	ldr	r3, [pc, #508]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a7e      	ldr	r2, [pc, #504]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b7c      	ldr	r3, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b79      	ldr	r3, [pc, #484]	; (800453c <HAL_RCC_OscConfig+0x4b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d118      	bne.n	8004394 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004362:	4b76      	ldr	r3, [pc, #472]	; (800453c <HAL_RCC_OscConfig+0x4b0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	; (800453c <HAL_RCC_OscConfig+0x4b0>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7fc fea7 	bl	80010c0 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004376:	f7fc fea3 	bl	80010c0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e118      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	4b6c      	ldr	r3, [pc, #432]	; (800453c <HAL_RCC_OscConfig+0x4b0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x31e>
 800439c:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	e01c      	b.n	80043e4 <HAL_RCC_OscConfig+0x358>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x340>
 80043b2:	4b61      	ldr	r3, [pc, #388]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a60      	ldr	r2, [pc, #384]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	4b5e      	ldr	r3, [pc, #376]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0x358>
 80043cc:	4b5a      	ldr	r3, [pc, #360]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a59      	ldr	r2, [pc, #356]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
 80043d8:	4b57      	ldr	r3, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4a56      	ldr	r2, [pc, #344]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043de:	f023 0304 	bic.w	r3, r3, #4
 80043e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fc fe68 	bl	80010c0 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fc fe64 	bl	80010c0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0d7      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440a:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ee      	beq.n	80043f4 <HAL_RCC_OscConfig+0x368>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fc fe52 	bl	80010c0 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fc fe4e 	bl	80010c0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0c1      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004436:	4b40      	ldr	r3, [pc, #256]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4a3a      	ldr	r2, [pc, #232]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80ad 	beq.w	80045b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	d060      	beq.n	800452c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d145      	bne.n	80044fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b33      	ldr	r3, [pc, #204]	; (8004540 <HAL_RCC_OscConfig+0x4b4>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fe22 	bl	80010c0 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004480:	f7fc fe1e 	bl	80010c0 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e093      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	491b      	ldr	r1, [pc, #108]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x4b4>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fc fdf3 	bl	80010c0 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044de:	f7fc fdef 	bl	80010c0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e064      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x452>
 80044fc:	e05c      	b.n	80045b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCC_OscConfig+0x4b4>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fc fddc 	bl	80010c0 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fc fdd8 	bl	80010c0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e04d      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x480>
 800452a:	e045      	b.n	80045b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e040      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004544:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <HAL_RCC_OscConfig+0x538>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d030      	beq.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d129      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d122      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457c:	4293      	cmp	r3, r2
 800457e:	d119      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d10f      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fb20 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0104 	and.w	r1, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0210 	and.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e041      	b.n	8004770 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fc fbaf 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 fa11 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f839 	bl	8004816 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 f9c2 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004846:	2302      	movs	r3, #2
 8004848:	e0ae      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	f200 809f 	bhi.w	8004998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004895 	.word	0x08004895
 8004864:	08004999 	.word	0x08004999
 8004868:	08004999 	.word	0x08004999
 800486c:	08004999 	.word	0x08004999
 8004870:	080048d5 	.word	0x080048d5
 8004874:	08004999 	.word	0x08004999
 8004878:	08004999 	.word	0x08004999
 800487c:	08004999 	.word	0x08004999
 8004880:	08004917 	.word	0x08004917
 8004884:	08004999 	.word	0x08004999
 8004888:	08004999 	.word	0x08004999
 800488c:	08004999 	.word	0x08004999
 8004890:	08004957 	.word	0x08004957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f9f0 	bl	8004c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]
      break;
 80048d2:	e064      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa40 	bl	8004d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	619a      	str	r2, [r3, #24]
      break;
 8004914:	e043      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa95 	bl	8004e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0208 	orr.w	r2, r2, #8
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0204 	bic.w	r2, r2, #4
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	61da      	str	r2, [r3, #28]
      break;
 8004954:	e023      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fae9 	bl	8004f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	021a      	lsls	r2, r3, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	61da      	str	r2, [r3, #28]
      break;
 8004996:	e002      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b4      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0xd4>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x172>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b70      	cmp	r3, #112	; 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xa6>
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b60      	cmp	r3, #96	; 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x11a>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b50      	cmp	r3, #80	; 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xfa>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x13a>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b30      	cmp	r3, #48	; 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f000 fb35 	bl	80050d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f000 fb1e 	bl	80050d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fa92 	bl	8004fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	; 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 faeb 	bl	800509e <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fab1 	bl	800503e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	; 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fadb 	bl	800509e <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fa72 	bl	8004fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 facb 	bl	800509e <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fac2 	bl	800509e <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d027      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d023      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <TIM_Base_SetConfig+0x138>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_Base_SetConfig+0xf8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40001800 	.word	0x40001800
 8004c78:	40001c00 	.word	0x40001c00
 8004c7c:	40002000 	.word	0x40002000

08004c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <TIM_OC1_SetConfig+0xd8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x64>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <TIM_OC1_SetConfig+0xdc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0308 	bic.w	r3, r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <TIM_OC1_SetConfig+0xd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_OC1_SetConfig+0x8e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <TIM_OC1_SetConfig+0xdc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d111      	bne.n	8004d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40010400 	.word	0x40010400

08004d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0210 	bic.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <TIM_OC2_SetConfig+0xe4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x68>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <TIM_OC2_SetConfig+0xe8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d10d      	bne.n	8004de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <TIM_OC2_SetConfig+0xe4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_OC2_SetConfig+0x94>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <TIM_OC2_SetConfig+0xe8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d113      	bne.n	8004e1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40010400 	.word	0x40010400

08004e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <TIM_OC3_SetConfig+0xe0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC3_SetConfig+0x66>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <TIM_OC3_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10d      	bne.n	8004ece <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <TIM_OC3_SetConfig+0xe0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC3_SetConfig+0x92>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <TIM_OC3_SetConfig+0xe4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d113      	bne.n	8004f06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	621a      	str	r2, [r3, #32]
}
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400

08004f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <TIM_OC4_SetConfig+0xa4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC4_SetConfig+0x68>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <TIM_OC4_SetConfig+0xa8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d109      	bne.n	8004fb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f023 0201 	bic.w	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800500a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 030a 	bic.w	r3, r3, #10
 800501c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503e:	b480      	push	{r7}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f023 0210 	bic.w	r2, r3, #16
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	031b      	lsls	r3, r3, #12
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800507a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f043 0307 	orr.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005128:	2302      	movs	r3, #2
 800512a:	e05a      	b.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d022      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005178:	d01d      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1b      	ldr	r2, [pc, #108]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10c      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40010400 	.word	0x40010400
 8005204:	40014000 	.word	0x40014000
 8005208:	40001800 	.word	0x40001800

0800520c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800520c:	b084      	sub	sp, #16
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	f107 001c 	add.w	r0, r7, #28
 800521a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b01      	cmp	r3, #1
 8005222:	d122      	bne.n	800526a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800524c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d105      	bne.n	800525e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fbe8 	bl	8006a34 <USB_CoreReset>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e01a      	b.n	80052a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 fbdc 	bl	8006a34 <USB_CoreReset>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
 8005292:	e005      	b.n	80052a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d10b      	bne.n	80052be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f043 0206 	orr.w	r2, r3, #6
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ca:	b004      	add	sp, #16
 80052cc:	4770      	bx	lr
	...

080052d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d165      	bne.n	80053b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a41      	ldr	r2, [pc, #260]	; (80053ec <USB_SetTurnaroundTime+0x11c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d906      	bls.n	80052fa <USB_SetTurnaroundTime+0x2a>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a40      	ldr	r2, [pc, #256]	; (80053f0 <USB_SetTurnaroundTime+0x120>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d202      	bcs.n	80052fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052f4:	230f      	movs	r3, #15
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e062      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4a3c      	ldr	r2, [pc, #240]	; (80053f0 <USB_SetTurnaroundTime+0x120>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d306      	bcc.n	8005310 <USB_SetTurnaroundTime+0x40>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a3b      	ldr	r2, [pc, #236]	; (80053f4 <USB_SetTurnaroundTime+0x124>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d202      	bcs.n	8005310 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800530a:	230e      	movs	r3, #14
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e057      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a38      	ldr	r2, [pc, #224]	; (80053f4 <USB_SetTurnaroundTime+0x124>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d306      	bcc.n	8005326 <USB_SetTurnaroundTime+0x56>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a37      	ldr	r2, [pc, #220]	; (80053f8 <USB_SetTurnaroundTime+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d202      	bcs.n	8005326 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005320:	230d      	movs	r3, #13
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e04c      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4a33      	ldr	r2, [pc, #204]	; (80053f8 <USB_SetTurnaroundTime+0x128>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d306      	bcc.n	800533c <USB_SetTurnaroundTime+0x6c>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4a32      	ldr	r2, [pc, #200]	; (80053fc <USB_SetTurnaroundTime+0x12c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d802      	bhi.n	800533c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005336:	230c      	movs	r3, #12
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e041      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <USB_SetTurnaroundTime+0x12c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d906      	bls.n	8005352 <USB_SetTurnaroundTime+0x82>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a2e      	ldr	r2, [pc, #184]	; (8005400 <USB_SetTurnaroundTime+0x130>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d802      	bhi.n	8005352 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800534c:	230b      	movs	r3, #11
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e036      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <USB_SetTurnaroundTime+0x130>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d906      	bls.n	8005368 <USB_SetTurnaroundTime+0x98>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a29      	ldr	r2, [pc, #164]	; (8005404 <USB_SetTurnaroundTime+0x134>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d802      	bhi.n	8005368 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005362:	230a      	movs	r3, #10
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e02b      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a26      	ldr	r2, [pc, #152]	; (8005404 <USB_SetTurnaroundTime+0x134>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d906      	bls.n	800537e <USB_SetTurnaroundTime+0xae>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <USB_SetTurnaroundTime+0x138>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d202      	bcs.n	800537e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005378:	2309      	movs	r3, #9
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e020      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4a21      	ldr	r2, [pc, #132]	; (8005408 <USB_SetTurnaroundTime+0x138>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d306      	bcc.n	8005394 <USB_SetTurnaroundTime+0xc4>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a20      	ldr	r2, [pc, #128]	; (800540c <USB_SetTurnaroundTime+0x13c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d802      	bhi.n	8005394 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800538e:	2308      	movs	r3, #8
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e015      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <USB_SetTurnaroundTime+0x13c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d906      	bls.n	80053aa <USB_SetTurnaroundTime+0xda>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <USB_SetTurnaroundTime+0x140>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d202      	bcs.n	80053aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053a4:	2307      	movs	r3, #7
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e00a      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053aa:	2306      	movs	r3, #6
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e007      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053b6:	2309      	movs	r3, #9
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e001      	b.n	80053c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053bc:	2309      	movs	r3, #9
 80053be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	00d8acbf 	.word	0x00d8acbf
 80053f0:	00e4e1c0 	.word	0x00e4e1c0
 80053f4:	00f42400 	.word	0x00f42400
 80053f8:	01067380 	.word	0x01067380
 80053fc:	011a499f 	.word	0x011a499f
 8005400:	01312cff 	.word	0x01312cff
 8005404:	014ca43f 	.word	0x014ca43f
 8005408:	016e3600 	.word	0x016e3600
 800540c:	01a6ab1f 	.word	0x01a6ab1f
 8005410:	01e84800 	.word	0x01e84800

08005414 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d115      	bne.n	80054a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005486:	2001      	movs	r0, #1
 8005488:	f7fb fe26 	bl	80010d8 <HAL_Delay>
      ms++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 fa3f 	bl	8006916 <USB_GetMode>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d01e      	beq.n	80054dc <USB_SetCurrentMode+0x84>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b31      	cmp	r3, #49	; 0x31
 80054a2:	d9f0      	bls.n	8005486 <USB_SetCurrentMode+0x2e>
 80054a4:	e01a      	b.n	80054dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fb fe0d 	bl	80010d8 <HAL_Delay>
      ms++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 fa26 	bl	8006916 <USB_GetMode>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <USB_SetCurrentMode+0x84>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b31      	cmp	r3, #49	; 0x31
 80054d4:	d9f0      	bls.n	80054b8 <USB_SetCurrentMode+0x60>
 80054d6:	e001      	b.n	80054dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e005      	b.n	80054e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b32      	cmp	r3, #50	; 0x32
 80054e0:	d101      	bne.n	80054e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f0:	b084      	sub	sp, #16
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	e009      	b.n	8005524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3340      	adds	r3, #64	; 0x40
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	2200      	movs	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b0e      	cmp	r3, #14
 8005528:	d9f2      	bls.n	8005510 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11c      	bne.n	800556a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553e:	f043 0302 	orr.w	r3, r3, #2
 8005542:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e005      	b.n	8005576 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800557c:	461a      	mov	r2, r3
 800557e:	2300      	movs	r3, #0
 8005580:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	4619      	mov	r1, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	461a      	mov	r2, r3
 8005592:	680b      	ldr	r3, [r1, #0]
 8005594:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10c      	bne.n	80055b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055a2:	2100      	movs	r1, #0
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f965 	bl	8005874 <USB_SetDevSpeed>
 80055aa:	e008      	b.n	80055be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055ac:	2101      	movs	r1, #1
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f960 	bl	8005874 <USB_SetDevSpeed>
 80055b4:	e003      	b.n	80055be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055b6:	2103      	movs	r1, #3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f95b 	bl	8005874 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055be:	2110      	movs	r1, #16
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f8f3 	bl	80057ac <USB_FlushTxFifo>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f91f 	bl	8005814 <USB_FlushRxFifo>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	461a      	mov	r2, r3
 80055e8:	2300      	movs	r3, #0
 80055ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	e043      	b.n	8005692 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005620:	d118      	bne.n	8005654 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	461a      	mov	r2, r3
 8005636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e013      	b.n	8005666 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	461a      	mov	r2, r3
 800564c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e008      	b.n	8005666 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	2300      	movs	r3, #0
 8005664:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	461a      	mov	r2, r3
 8005674:	2300      	movs	r3, #0
 8005676:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	461a      	mov	r2, r3
 8005686:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800568a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	3301      	adds	r3, #1
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3b7      	bcc.n	800560a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e043      	b.n	8005728 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b6:	d118      	bne.n	80056ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e013      	b.n	80056fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e008      	b.n	80056fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	2300      	movs	r3, #0
 80056fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	461a      	mov	r2, r3
 800571c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005720:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	3301      	adds	r3, #1
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	429a      	cmp	r2, r3
 800572e:	d3b7      	bcc.n	80056a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005742:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005750:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f043 0210 	orr.w	r2, r3, #16
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <USB_DevInit+0x2b8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f043 0208 	orr.w	r2, r3, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d107      	bne.n	8005798 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005790:	f043 0304 	orr.w	r3, r3, #4
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a4:	b004      	add	sp, #16
 80057a6:	4770      	bx	lr
 80057a8:	803c3800 	.word	0x803c3800

080057ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a13      	ldr	r2, [pc, #76]	; (8005810 <USB_FlushTxFifo+0x64>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e01b      	b.n	8005804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	daf2      	bge.n	80057ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	019b      	lsls	r3, r3, #6
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <USB_FlushTxFifo+0x64>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e006      	b.n	8005804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d0f0      	beq.n	80057e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	00030d40 	.word	0x00030d40

08005814 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <USB_FlushRxFifo+0x5c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e018      	b.n	8005864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	daf2      	bge.n	8005820 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2210      	movs	r2, #16
 8005842:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <USB_FlushRxFifo+0x5c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e006      	b.n	8005864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d0f0      	beq.n	8005844 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	00030d40 	.word	0x00030d40

08005874 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005894:	4313      	orrs	r3, r2
 8005896:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0306 	and.w	r3, r3, #6
 80058be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
 80058ca:	e00a      	b.n	80058e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d002      	beq.n	80058d8 <USB_GetDevSpeed+0x32>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	d102      	bne.n	80058de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058d8:	2302      	movs	r3, #2
 80058da:	75fb      	strb	r3, [r7, #23]
 80058dc:	e001      	b.n	80058e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058de:	230f      	movs	r3, #15
 80058e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d13a      	bne.n	8005982 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	2101      	movs	r1, #1
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	b29b      	uxth	r3, r3
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800592a:	4313      	orrs	r3, r2
 800592c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d155      	bne.n	80059f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	791b      	ldrb	r3, [r3, #4]
 800595e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005960:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	059b      	lsls	r3, r3, #22
 8005966:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005968:	4313      	orrs	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	e036      	b.n	80059f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d11a      	bne.n	80059f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	791b      	ldrb	r3, [r3, #4]
 80059d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059d6:	430b      	orrs	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d161      	bne.n	8005ae0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a32:	d11f      	bne.n	8005a74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a94:	4013      	ands	r3, r2
 8005a96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	0159      	lsls	r1, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <USB_DeactivateEndpoint+0x1b0>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]
 8005ade:	e060      	b.n	8005ba2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af6:	d11f      	bne.n	8005b38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	43db      	mvns	r3, r3
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b58:	4013      	ands	r3, r2
 8005b5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	041b      	lsls	r3, r3, #16
 8005b74:	43db      	mvns	r3, r3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	0159      	lsls	r1, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	440b      	add	r3, r1
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <USB_DeactivateEndpoint+0x1b4>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	ec337800 	.word	0xec337800
 8005bb4:	eff37800 	.word	0xeff37800

08005bb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 815c 	bne.w	8005e92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d132      	bne.n	8005c48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c40:	0cdb      	lsrs	r3, r3, #19
 8005c42:	04db      	lsls	r3, r3, #19
 8005c44:	6113      	str	r3, [r2, #16]
 8005c46:	e074      	b.n	8005d32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	0cdb      	lsrs	r3, r3, #19
 8005c64:	04db      	lsls	r3, r3, #19
 8005c66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	440b      	add	r3, r1
 8005ca4:	1e59      	subs	r1, r3, #1
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cb0:	4b9d      	ldr	r3, [pc, #628]	; (8005f28 <USB_EPStartXfer+0x370>)
 8005cb2:	400b      	ands	r3, r1
 8005cb4:	69b9      	ldr	r1, [r7, #24]
 8005cb6:	0148      	lsls	r0, r1, #5
 8005cb8:	69f9      	ldr	r1, [r7, #28]
 8005cba:	4401      	add	r1, r0
 8005cbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cda:	69b9      	ldr	r1, [r7, #24]
 8005cdc:	0148      	lsls	r0, r1, #5
 8005cde:	69f9      	ldr	r1, [r7, #28]
 8005ce0:	4401      	add	r1, r0
 8005ce2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	791b      	ldrb	r3, [r3, #4]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d11f      	bne.n	8005d32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d14b      	bne.n	8005dd0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	791b      	ldrb	r3, [r3, #4]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d128      	bne.n	8005dae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d110      	bne.n	8005d8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	e00f      	b.n	8005dae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e133      	b.n	8006038 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	791b      	ldrb	r3, [r3, #4]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d015      	beq.n	8005e24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 811b 	beq.w	8006038 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	2101      	movs	r1, #1
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	634b      	str	r3, [r1, #52]	; 0x34
 8005e22:	e109      	b.n	8006038 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d110      	bne.n	8005e56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	e00f      	b.n	8005e76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6919      	ldr	r1, [r3, #16]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	b298      	uxth	r0, r3
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4603      	mov	r3, r0
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fade 	bl	800644c <USB_WritePacket>
 8005e90:	e0d2      	b.n	8006038 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eac:	0cdb      	lsrs	r3, r3, #19
 8005eae:	04db      	lsls	r3, r3, #19
 8005eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ed0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ed4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d126      	bne.n	8005f2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	0148      	lsls	r0, r1, #5
 8005ef8:	69f9      	ldr	r1, [r7, #28]
 8005efa:	4401      	add	r1, r0
 8005efc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f00:	4313      	orrs	r3, r2
 8005f02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f22:	6113      	str	r3, [r2, #16]
 8005f24:	e03a      	b.n	8005f9c <USB_EPStartXfer+0x3e4>
 8005f26:	bf00      	nop
 8005f28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	8afa      	ldrh	r2, [r7, #22]
 8005f48:	fb03 f202 	mul.w	r2, r3, r2
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	04d9      	lsls	r1, r3, #19
 8005f62:	4b38      	ldr	r3, [pc, #224]	; (8006044 <USB_EPStartXfer+0x48c>)
 8005f64:	400b      	ands	r3, r1
 8005f66:	69b9      	ldr	r1, [r7, #24]
 8005f68:	0148      	lsls	r0, r1, #5
 8005f6a:	69f9      	ldr	r1, [r7, #28]
 8005f6c:	4401      	add	r1, r0
 8005f6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	0148      	lsls	r0, r1, #5
 8005f90:	69f9      	ldr	r1, [r7, #28]
 8005f92:	4401      	add	r1, r0
 8005f94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10d      	bne.n	8005fbe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6919      	ldr	r1, [r3, #16]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	460a      	mov	r2, r1
 8005fbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	791b      	ldrb	r3, [r3, #4]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d128      	bne.n	8006018 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d110      	bne.n	8005ff8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e00f      	b.n	8006018 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006016:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	1ff80000 	.word	0x1ff80000

08006048 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b01      	cmp	r3, #1
 8006066:	f040 80ce 	bne.w	8006206 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d132      	bne.n	80060d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	0cdb      	lsrs	r3, r3, #19
 80060d2:	04db      	lsls	r3, r3, #19
 80060d4:	6113      	str	r3, [r2, #16]
 80060d6:	e04e      	b.n	8006176 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	0cdb      	lsrs	r3, r3, #19
 80060f4:	04db      	lsls	r3, r3, #19
 80060f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800611a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800614e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006166:	6939      	ldr	r1, [r7, #16]
 8006168:	0148      	lsls	r0, r1, #5
 800616a:	6979      	ldr	r1, [r7, #20]
 800616c:	4401      	add	r1, r0
 800616e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d11e      	bne.n	80061ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e097      	b.n	80062ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8083 	beq.w	80062ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	2101      	movs	r1, #1
 80061f6:	fa01 f303 	lsl.w	r3, r1, r3
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006200:	4313      	orrs	r3, r2
 8006202:	634b      	str	r3, [r1, #52]	; 0x34
 8006204:	e071      	b.n	80062ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006220:	0cdb      	lsrs	r3, r3, #19
 8006222:	04db      	lsls	r3, r3, #19
 8006224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006248:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006298:	6939      	ldr	r1, [r7, #16]
 800629a:	0148      	lsls	r0, r1, #5
 800629c:	6979      	ldr	r1, [r7, #20]
 800629e:	4401      	add	r1, r0
 80062a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a4:	4313      	orrs	r3, r2
 80062a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10d      	bne.n	80062ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6919      	ldr	r1, [r3, #16]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	460a      	mov	r2, r1
 80062c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d14a      	bne.n	80063ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800632a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800632e:	f040 8086 	bne.w	800643e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006354:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006378:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f242 7210 	movw	r2, #10000	; 0x2710
 8006386:	4293      	cmp	r3, r2
 8006388:	d902      	bls.n	8006390 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
          break;
 800638e:	e056      	b.n	800643e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a8:	d0e7      	beq.n	800637a <USB_EPStopXfer+0x82>
 80063aa:	e048      	b.n	800643e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c4:	d13b      	bne.n	800643e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800640c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f242 7210 	movw	r2, #10000	; 0x2710
 800641a:	4293      	cmp	r3, r2
 800641c:	d902      	bls.n	8006424 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
          break;
 8006422:	e00c      	b.n	800643e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800643c:	d0e7      	beq.n	800640e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800643e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006440:	4618      	mov	r0, r3
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800644c:	b480      	push	{r7}
 800644e:	b089      	sub	sp, #36	; 0x24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	460b      	mov	r3, r1
 800645c:	71fb      	strb	r3, [r7, #7]
 800645e:	4613      	mov	r3, r2
 8006460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800646a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d123      	bne.n	80064ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006472:	88bb      	ldrh	r3, [r7, #4]
 8006474:	3303      	adds	r3, #3
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e018      	b.n	80064b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	031a      	lsls	r2, r3, #12
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648c:	461a      	mov	r2, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	3301      	adds	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	3301      	adds	r3, #1
 800649e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3301      	adds	r3, #1
 80064aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d3e2      	bcc.n	8006480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3724      	adds	r7, #36	; 0x24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b08b      	sub	sp, #44	; 0x2c
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	e014      	b.n	800651e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	3301      	adds	r3, #1
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	3301      	adds	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	3301      	adds	r3, #1
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	3301      	adds	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	3301      	adds	r3, #1
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	429a      	cmp	r2, r3
 8006524:	d3e6      	bcc.n	80064f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006526:	8bfb      	ldrh	r3, [r7, #30]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006536:	461a      	mov	r2, r3
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	701a      	strb	r2, [r3, #0]
      i++;
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	3301      	adds	r3, #1
 8006556:	623b      	str	r3, [r7, #32]
      pDest++;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	3301      	adds	r3, #1
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800655e:	8bfb      	ldrh	r3, [r7, #30]
 8006560:	3b01      	subs	r3, #1
 8006562:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006564:	8bfb      	ldrh	r3, [r7, #30]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ea      	bne.n	8006540 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800656c:	4618      	mov	r0, r3
 800656e:	372c      	adds	r7, #44	; 0x2c
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d12c      	bne.n	80065ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	db12      	blt.n	80065cc <USB_EPSetStall+0x54>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00f      	beq.n	80065cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e02b      	b.n	8006646 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	db12      	blt.n	8006626 <USB_EPSetStall+0xae>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00f      	beq.n	8006626 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006624:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006644:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d128      	bne.n	80066c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800668e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	791b      	ldrb	r3, [r3, #4]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d003      	beq.n	80066a0 <USB_EPClearStall+0x4c>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	791b      	ldrb	r3, [r3, #4]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d138      	bne.n	8006712 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	e027      	b.n	8006712 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	791b      	ldrb	r3, [r3, #4]
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d003      	beq.n	80066f2 <USB_EPClearStall+0x9e>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d10f      	bne.n	8006712 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006710:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006742:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800675a:	4313      	orrs	r3, r2
 800675c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006786:	f023 0303 	bic.w	r3, r3, #3
 800678a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679a:	f023 0302 	bic.w	r3, r3, #2
 800679e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067dc:	f043 0302 	orr.w	r3, r3, #2
 80067e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	0c1b      	lsrs	r3, r3, #16
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	b29b      	uxth	r3, r3
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068ac:	68bb      	ldr	r3, [r7, #8]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ea:	01db      	lsls	r3, r3, #7
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4013      	ands	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006908:	68bb      	ldr	r3, [r7, #8]
}
 800690a:	4618      	mov	r0, r3
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0301 	and.w	r3, r3, #1
}
 8006926:	4618      	mov	r0, r3
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006950:	f023 0307 	bic.w	r3, r3, #7
 8006954:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006968:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	460b      	mov	r3, r1
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	333c      	adds	r3, #60	; 0x3c
 800698e:	3304      	adds	r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4a26      	ldr	r2, [pc, #152]	; (8006a30 <USB_EP0_OutStart+0xb8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d90a      	bls.n	80069b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ac:	d101      	bne.n	80069b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e037      	b.n	8006a22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	461a      	mov	r2, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e0:	f043 0318 	orr.w	r3, r3, #24
 80069e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10f      	bne.n	8006a20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	4f54300a 	.word	0x4f54300a

08006a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <USB_CoreReset+0x64>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e01b      	b.n	8006a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	daf2      	bge.n	8006a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f043 0201 	orr.w	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a09      	ldr	r2, [pc, #36]	; (8006a98 <USB_CoreReset+0x64>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d901      	bls.n	8006a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e006      	b.n	8006a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d0f0      	beq.n	8006a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	00030d40 	.word	0x00030d40

08006a9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006aa8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006aac:	f002 fcc8 	bl	8009440 <USBD_static_malloc>
 8006ab0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	32b0      	adds	r2, #176	; 0xb0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0d4      	b.n	8006c76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006acc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f002 fd1c 	bl	8009510 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	32b0      	adds	r2, #176	; 0xb0
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	32b0      	adds	r2, #176	; 0xb0
 8006af2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7c1b      	ldrb	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d138      	bne.n	8006b76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b04:	4b5e      	ldr	r3, [pc, #376]	; (8006c80 <USBD_CDC_Init+0x1e4>)
 8006b06:	7819      	ldrb	r1, [r3, #0]
 8006b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 fb25 	bl	800915e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b14:	4b5a      	ldr	r3, [pc, #360]	; (8006c80 <USBD_CDC_Init+0x1e4>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3324      	adds	r3, #36	; 0x24
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b2e:	4b55      	ldr	r3, [pc, #340]	; (8006c84 <USBD_CDC_Init+0x1e8>)
 8006b30:	7819      	ldrb	r1, [r3, #0]
 8006b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b36:	2202      	movs	r2, #2
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f002 fb10 	bl	800915e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b3e:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <USBD_CDC_Init+0x1e8>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 020f 	and.w	r2, r3, #15
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b56:	2201      	movs	r2, #1
 8006b58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b5a:	4b4b      	ldr	r3, [pc, #300]	; (8006c88 <USBD_CDC_Init+0x1ec>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 020f 	and.w	r2, r3, #15
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3326      	adds	r3, #38	; 0x26
 8006b70:	2210      	movs	r2, #16
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e035      	b.n	8006be2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b76:	4b42      	ldr	r3, [pc, #264]	; (8006c80 <USBD_CDC_Init+0x1e4>)
 8006b78:	7819      	ldrb	r1, [r3, #0]
 8006b7a:	2340      	movs	r3, #64	; 0x40
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f002 faed 	bl	800915e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b84:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <USBD_CDC_Init+0x1e4>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	3324      	adds	r3, #36	; 0x24
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b9e:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <USBD_CDC_Init+0x1e8>)
 8006ba0:	7819      	ldrb	r1, [r3, #0]
 8006ba2:	2340      	movs	r3, #64	; 0x40
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 fad9 	bl	800915e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bac:	4b35      	ldr	r3, [pc, #212]	; (8006c84 <USBD_CDC_Init+0x1e8>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 020f 	and.w	r2, r3, #15
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006bc8:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <USBD_CDC_Init+0x1ec>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3326      	adds	r3, #38	; 0x26
 8006bde:	2210      	movs	r2, #16
 8006be0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006be2:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <USBD_CDC_Init+0x1ec>)
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	2308      	movs	r3, #8
 8006be8:	2203      	movs	r2, #3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f002 fab7 	bl	800915e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006bf0:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <USBD_CDC_Init+0x1ec>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	3324      	adds	r3, #36	; 0x24
 8006c06:	2201      	movs	r2, #1
 8006c08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	33b0      	adds	r3, #176	; 0xb0
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c40:	2302      	movs	r3, #2
 8006c42:	e018      	b.n	8006c76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	7c1b      	ldrb	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <USBD_CDC_Init+0x1e8>)
 8006c4e:	7819      	ldrb	r1, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f002 fb6e 	bl	800933c <USBD_LL_PrepareReceive>
 8006c60:	e008      	b.n	8006c74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <USBD_CDC_Init+0x1e8>)
 8006c64:	7819      	ldrb	r1, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6c:	2340      	movs	r3, #64	; 0x40
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 fb64 	bl	800933c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000093 	.word	0x20000093
 8006c84:	20000094 	.word	0x20000094
 8006c88:	20000095 	.word	0x20000095

08006c8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c98:	4b3a      	ldr	r3, [pc, #232]	; (8006d84 <USBD_CDC_DeInit+0xf8>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f002 fa83 	bl	80091aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ca4:	4b37      	ldr	r3, [pc, #220]	; (8006d84 <USBD_CDC_DeInit+0xf8>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3324      	adds	r3, #36	; 0x24
 8006cba:	2200      	movs	r2, #0
 8006cbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006cbe:	4b32      	ldr	r3, [pc, #200]	; (8006d88 <USBD_CDC_DeInit+0xfc>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f002 fa70 	bl	80091aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006cca:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <USBD_CDC_DeInit+0xfc>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f003 020f 	and.w	r2, r3, #15
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <USBD_CDC_DeInit+0x100>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f002 fa5c 	bl	80091aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006cf2:	4b26      	ldr	r3, [pc, #152]	; (8006d8c <USBD_CDC_DeInit+0x100>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	3324      	adds	r3, #36	; 0x24
 8006d08:	2200      	movs	r2, #0
 8006d0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d0c:	4b1f      	ldr	r3, [pc, #124]	; (8006d8c <USBD_CDC_DeInit+0x100>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	3326      	adds	r3, #38	; 0x26
 8006d22:	2200      	movs	r2, #0
 8006d24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	32b0      	adds	r2, #176	; 0xb0
 8006d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01f      	beq.n	8006d78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	33b0      	adds	r3, #176	; 0xb0
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32b0      	adds	r2, #176	; 0xb0
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 fb7e 	bl	800945c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	; 0xb0
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000093 	.word	0x20000093
 8006d88:	20000094 	.word	0x20000094
 8006d8c:	20000095 	.word	0x20000095

08006d90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	32b0      	adds	r2, #176	; 0xb0
 8006da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e0bf      	b.n	8006f40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d050      	beq.n	8006e6e <USBD_CDC_Setup+0xde>
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	f040 80af 	bne.w	8006f30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d03a      	beq.n	8006e50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da1b      	bge.n	8006e1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	33b0      	adds	r3, #176	; 0xb0
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006dfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	88d2      	ldrh	r2, [r2, #6]
 8006e00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	88db      	ldrh	r3, [r3, #6]
 8006e06:	2b07      	cmp	r3, #7
 8006e08:	bf28      	it	cs
 8006e0a:	2307      	movcs	r3, #7
 8006e0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	89fa      	ldrh	r2, [r7, #14]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fd6d 	bl	80088f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e1a:	e090      	b.n	8006f3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	785a      	ldrb	r2, [r3, #1]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	2b3f      	cmp	r3, #63	; 0x3f
 8006e2c:	d803      	bhi.n	8006e36 <USBD_CDC_Setup+0xa6>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	e000      	b.n	8006e38 <USBD_CDC_Setup+0xa8>
 8006e36:	2240      	movs	r2, #64	; 0x40
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e3e:	6939      	ldr	r1, [r7, #16]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e46:	461a      	mov	r2, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 fd7f 	bl	800894c <USBD_CtlPrepareRx>
      break;
 8006e4e:	e076      	b.n	8006f3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	33b0      	adds	r3, #176	; 0xb0
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	7850      	ldrb	r0, [r2, #1]
 8006e66:	2200      	movs	r2, #0
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4798      	blx	r3
      break;
 8006e6c:	e067      	b.n	8006f3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	d851      	bhi.n	8006f1a <USBD_CDC_Setup+0x18a>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBD_CDC_Setup+0xec>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ead 	.word	0x08006ead
 8006e80:	08006f29 	.word	0x08006f29
 8006e84:	08006f1b 	.word	0x08006f1b
 8006e88:	08006f1b 	.word	0x08006f1b
 8006e8c:	08006f1b 	.word	0x08006f1b
 8006e90:	08006f1b 	.word	0x08006f1b
 8006e94:	08006f1b 	.word	0x08006f1b
 8006e98:	08006f1b 	.word	0x08006f1b
 8006e9c:	08006f1b 	.word	0x08006f1b
 8006ea0:	08006f1b 	.word	0x08006f1b
 8006ea4:	08006ed7 	.word	0x08006ed7
 8006ea8:	08006f01 	.word	0x08006f01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d107      	bne.n	8006ec8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006eb8:	f107 030a 	add.w	r3, r7, #10
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fd17 	bl	80088f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec6:	e032      	b.n	8006f2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fca1 	bl	8008812 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed4:	e02b      	b.n	8006f2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d107      	bne.n	8006ef2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ee2:	f107 030d 	add.w	r3, r7, #13
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 fd02 	bl	80088f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ef0:	e01d      	b.n	8006f2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fc8c 	bl	8008812 <USBD_CtlError>
            ret = USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	75fb      	strb	r3, [r7, #23]
          break;
 8006efe:	e016      	b.n	8006f2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d00f      	beq.n	8006f2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fc7f 	bl	8008812 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f18:	e008      	b.n	8006f2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fc78 	bl	8008812 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	75fb      	strb	r3, [r7, #23]
          break;
 8006f26:	e002      	b.n	8006f2e <USBD_CDC_Setup+0x19e>
          break;
 8006f28:	bf00      	nop
 8006f2a:	e008      	b.n	8006f3e <USBD_CDC_Setup+0x1ae>
          break;
 8006f2c:	bf00      	nop
      }
      break;
 8006f2e:	e006      	b.n	8006f3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 fc6d 	bl	8008812 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	32b0      	adds	r2, #176	; 0xb0
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e065      	b.n	800703e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	32b0      	adds	r2, #176	; 0xb0
 8006f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f003 020f 	and.w	r2, r3, #15
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	3318      	adds	r3, #24
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d02f      	beq.n	8006ffc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	f003 020f 	and.w	r2, r3, #15
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	3318      	adds	r3, #24
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	f003 010f 	and.w	r1, r3, #15
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	440b      	add	r3, r1
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4403      	add	r3, r0
 8006fc4:	3348      	adds	r3, #72	; 0x48
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d112      	bne.n	8006ffc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3318      	adds	r3, #24
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fee:	78f9      	ldrb	r1, [r7, #3]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f002 f980 	bl	80092fa <USBD_LL_Transmit>
 8006ffa:	e01f      	b.n	800703c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	33b0      	adds	r3, #176	; 0xb0
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d010      	beq.n	800703c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	33b0      	adds	r3, #176	; 0xb0
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	32b0      	adds	r2, #176	; 0xb0
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	32b0      	adds	r2, #176	; 0xb0
 800706c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e01a      	b.n	80070ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f002 f97e 	bl	800937e <USBD_LL_GetRxDataSize>
 8007082:	4602      	mov	r2, r0
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	33b0      	adds	r3, #176	; 0xb0
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070a8:	4611      	mov	r1, r2
 80070aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32b0      	adds	r2, #176	; 0xb0
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e025      	b.n	8007124 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	33b0      	adds	r3, #176	; 0xb0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01a      	beq.n	8007122 <USBD_CDC_EP0_RxReady+0x6c>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070f2:	2bff      	cmp	r3, #255	; 0xff
 80070f4:	d015      	beq.n	8007122 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	33b0      	adds	r3, #176	; 0xb0
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800710e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007116:	b292      	uxth	r2, r2
 8007118:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	22ff      	movs	r2, #255	; 0xff
 800711e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007134:	2182      	movs	r1, #130	; 0x82
 8007136:	4818      	ldr	r0, [pc, #96]	; (8007198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007138:	f000 fd09 	bl	8007b4e <USBD_GetEpDesc>
 800713c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800713e:	2101      	movs	r1, #1
 8007140:	4815      	ldr	r0, [pc, #84]	; (8007198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007142:	f000 fd04 	bl	8007b4e <USBD_GetEpDesc>
 8007146:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007148:	2181      	movs	r1, #129	; 0x81
 800714a:	4813      	ldr	r0, [pc, #76]	; (8007198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800714c:	f000 fcff 	bl	8007b4e <USBD_GetEpDesc>
 8007150:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2210      	movs	r2, #16
 800715c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d006      	beq.n	8007172 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2200      	movs	r2, #0
 8007168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800716c:	711a      	strb	r2, [r3, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007180:	711a      	strb	r2, [r3, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2243      	movs	r2, #67	; 0x43
 800718a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000050 	.word	0x20000050

0800719c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071a4:	2182      	movs	r1, #130	; 0x82
 80071a6:	4818      	ldr	r0, [pc, #96]	; (8007208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071a8:	f000 fcd1 	bl	8007b4e <USBD_GetEpDesc>
 80071ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ae:	2101      	movs	r1, #1
 80071b0:	4815      	ldr	r0, [pc, #84]	; (8007208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071b2:	f000 fccc 	bl	8007b4e <USBD_GetEpDesc>
 80071b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071b8:	2181      	movs	r1, #129	; 0x81
 80071ba:	4813      	ldr	r0, [pc, #76]	; (8007208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071bc:	f000 fcc7 	bl	8007b4e <USBD_GetEpDesc>
 80071c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2210      	movs	r2, #16
 80071cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2200      	movs	r2, #0
 80071d8:	711a      	strb	r2, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f042 0202 	orr.w	r2, r2, #2
 80071e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	711a      	strb	r2, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f042 0202 	orr.w	r2, r2, #2
 80071f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2243      	movs	r2, #67	; 0x43
 80071fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071fc:	4b02      	ldr	r3, [pc, #8]	; (8007208 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000050 	.word	0x20000050

0800720c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007214:	2182      	movs	r1, #130	; 0x82
 8007216:	4818      	ldr	r0, [pc, #96]	; (8007278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007218:	f000 fc99 	bl	8007b4e <USBD_GetEpDesc>
 800721c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800721e:	2101      	movs	r1, #1
 8007220:	4815      	ldr	r0, [pc, #84]	; (8007278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007222:	f000 fc94 	bl	8007b4e <USBD_GetEpDesc>
 8007226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007228:	2181      	movs	r1, #129	; 0x81
 800722a:	4813      	ldr	r0, [pc, #76]	; (8007278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800722c:	f000 fc8f 	bl	8007b4e <USBD_GetEpDesc>
 8007230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2210      	movs	r2, #16
 800723c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2200      	movs	r2, #0
 8007248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800724c:	711a      	strb	r2, [r3, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007260:	711a      	strb	r2, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2243      	movs	r2, #67	; 0x43
 800726a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800726c:	4b02      	ldr	r3, [pc, #8]	; (8007278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000050 	.word	0x20000050

0800727c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	220a      	movs	r2, #10
 8007288:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800728a:	4b03      	ldr	r3, [pc, #12]	; (8007298 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	2000000c 	.word	0x2000000c

0800729c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e009      	b.n	80072c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	33b0      	adds	r3, #176	; 0xb0
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	32b0      	adds	r2, #176	; 0xb0
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e008      	b.n	8007308 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	32b0      	adds	r2, #176	; 0xb0
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e004      	b.n	8007342 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
	...

08007350 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32b0      	adds	r2, #176	; 0xb0
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32b0      	adds	r2, #176	; 0xb0
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	e018      	b.n	80073b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7c1b      	ldrb	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <USBD_CDC_ReceivePacket+0x68>)
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 ffd1 	bl	800933c <USBD_LL_PrepareReceive>
 800739a:	e008      	b.n	80073ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800739c:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <USBD_CDC_ReceivePacket+0x68>)
 800739e:	7819      	ldrb	r1, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 ffc7 	bl	800933c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000094 	.word	0x20000094

080073bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e01f      	b.n	8007414 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	79fa      	ldrb	r2, [r7, #7]
 8007406:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 fe41 	bl	8009090 <USBD_LL_Init>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e025      	b.n	8007480 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32ae      	adds	r2, #174	; 0xae
 8007446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00f      	beq.n	8007470 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	32ae      	adds	r2, #174	; 0xae
 800745a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	f107 020e 	add.w	r2, r7, #14
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	4602      	mov	r2, r0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 fe49 	bl	8009128 <USBD_LL_Start>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	4611      	mov	r1, r2
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	4798      	blx	r3
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	78fa      	ldrb	r2, [r7, #3]
 8007508:	4611      	mov	r1, r2
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f001 f932 	bl	800879e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2b02      	cmp	r3, #2
 800755c:	d01a      	beq.n	8007594 <USBD_LL_SetupStage+0x72>
 800755e:	2b02      	cmp	r3, #2
 8007560:	d822      	bhi.n	80075a8 <USBD_LL_SetupStage+0x86>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <USBD_LL_SetupStage+0x4a>
 8007566:	2b01      	cmp	r3, #1
 8007568:	d00a      	beq.n	8007580 <USBD_LL_SetupStage+0x5e>
 800756a:	e01d      	b.n	80075a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb5f 	bl	8007c38 <USBD_StdDevReq>
 800757a:	4603      	mov	r3, r0
 800757c:	73fb      	strb	r3, [r7, #15]
      break;
 800757e:	e020      	b.n	80075c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fbc7 	bl	8007d1c <USBD_StdItfReq>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
      break;
 8007592:	e016      	b.n	80075c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fc29 	bl	8007df4 <USBD_StdEPReq>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]
      break;
 80075a6:	e00c      	b.n	80075c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fe16 	bl	80091e8 <USBD_LL_StallEP>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
      break;
 80075c0:	bf00      	nop
  }

  return ret;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	460b      	mov	r3, r1
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d16e      	bne.n	80076c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	f040 8098 	bne.w	8007728 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	429a      	cmp	r2, r3
 8007602:	d913      	bls.n	800762c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	1ad2      	subs	r2, r2, r3
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	4293      	cmp	r3, r2
 800761c:	bf28      	it	cs
 800761e:	4613      	movcs	r3, r2
 8007620:	461a      	mov	r2, r3
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f001 f9ae 	bl	8008986 <USBD_CtlContinueRx>
 800762a:	e07d      	b.n	8007728 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2b02      	cmp	r3, #2
 8007638:	d014      	beq.n	8007664 <USBD_LL_DataOutStage+0x98>
 800763a:	2b02      	cmp	r3, #2
 800763c:	d81d      	bhi.n	800767a <USBD_LL_DataOutStage+0xae>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <USBD_LL_DataOutStage+0x7c>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d003      	beq.n	800764e <USBD_LL_DataOutStage+0x82>
 8007646:	e018      	b.n	800767a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	75bb      	strb	r3, [r7, #22]
            break;
 800764c:	e018      	b.n	8007680 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007654:	b2db      	uxtb	r3, r3
 8007656:	4619      	mov	r1, r3
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fa5e 	bl	8007b1a <USBD_CoreFindIF>
 800765e:	4603      	mov	r3, r0
 8007660:	75bb      	strb	r3, [r7, #22]
            break;
 8007662:	e00d      	b.n	8007680 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800766a:	b2db      	uxtb	r3, r3
 800766c:	4619      	mov	r1, r3
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fa60 	bl	8007b34 <USBD_CoreFindEP>
 8007674:	4603      	mov	r3, r0
 8007676:	75bb      	strb	r3, [r7, #22]
            break;
 8007678:	e002      	b.n	8007680 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	75bb      	strb	r3, [r7, #22]
            break;
 800767e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007680:	7dbb      	ldrb	r3, [r7, #22]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d119      	bne.n	80076ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b03      	cmp	r3, #3
 8007690:	d113      	bne.n	80076ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007692:	7dba      	ldrb	r2, [r7, #22]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	32ae      	adds	r2, #174	; 0xae
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076a2:	7dba      	ldrb	r2, [r7, #22]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076aa:	7dba      	ldrb	r2, [r7, #22]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	32ae      	adds	r2, #174	; 0xae
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f001 f974 	bl	80089a8 <USBD_CtlSendStatus>
 80076c0:	e032      	b.n	8007728 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fa31 	bl	8007b34 <USBD_CoreFindEP>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076d6:	7dbb      	ldrb	r3, [r7, #22]
 80076d8:	2bff      	cmp	r3, #255	; 0xff
 80076da:	d025      	beq.n	8007728 <USBD_LL_DataOutStage+0x15c>
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d122      	bne.n	8007728 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d117      	bne.n	800771e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076ee:	7dba      	ldrb	r2, [r7, #22]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00f      	beq.n	800771e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80076fe:	7dba      	ldrb	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007706:	7dba      	ldrb	r2, [r7, #22]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	7afa      	ldrb	r2, [r7, #11]
 8007714:	4611      	mov	r1, r2
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	4798      	blx	r3
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	e000      	b.n	800772a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	460b      	mov	r3, r1
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d16f      	bne.n	8007826 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3314      	adds	r3, #20
 800774a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007752:	2b02      	cmp	r3, #2
 8007754:	d15a      	bne.n	800780c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	429a      	cmp	r2, r3
 8007760:	d914      	bls.n	800778c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	461a      	mov	r2, r3
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f001 f8d6 	bl	800892a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800777e:	2300      	movs	r3, #0
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f001 fdd9 	bl	800933c <USBD_LL_PrepareReceive>
 800778a:	e03f      	b.n	800780c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	429a      	cmp	r2, r3
 8007796:	d11c      	bne.n	80077d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d316      	bcc.n	80077d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d20f      	bcs.n	80077d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2100      	movs	r1, #0
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f001 f8b7 	bl	800892a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077c4:	2300      	movs	r3, #0
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f001 fdb6 	bl	800933c <USBD_LL_PrepareReceive>
 80077d0:	e01c      	b.n	800780c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d10f      	bne.n	80077fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077fe:	2180      	movs	r1, #128	; 0x80
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f001 fcf1 	bl	80091e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f001 f8e1 	bl	80089ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d03a      	beq.n	800788c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff fe42 	bl	80074a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007824:	e032      	b.n	800788c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800782c:	b2db      	uxtb	r3, r3
 800782e:	4619      	mov	r1, r3
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f97f 	bl	8007b34 <USBD_CoreFindEP>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d025      	beq.n	800788c <USBD_LL_DataInStage+0x15a>
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d122      	bne.n	800788c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b03      	cmp	r3, #3
 8007850:	d11c      	bne.n	800788c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007852:	7dfa      	ldrb	r2, [r7, #23]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	32ae      	adds	r2, #174	; 0xae
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d014      	beq.n	800788c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007862:	7dfa      	ldrb	r2, [r7, #23]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800786a:	7dfa      	ldrb	r2, [r7, #23]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	32ae      	adds	r2, #174	; 0xae
 8007870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	7afa      	ldrb	r2, [r7, #11]
 8007878:	4611      	mov	r1, r2
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	4798      	blx	r3
 800787e:	4603      	mov	r3, r0
 8007880:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007882:	7dbb      	ldrb	r3, [r7, #22]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	e000      	b.n	800788e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d014      	beq.n	80078fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00e      	beq.n	80078fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6852      	ldr	r2, [r2, #4]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	4611      	mov	r1, r2
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078fc:	2340      	movs	r3, #64	; 0x40
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fc2b 	bl	800915e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2240      	movs	r2, #64	; 0x40
 8007914:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	2200      	movs	r2, #0
 800791c:	2180      	movs	r1, #128	; 0x80
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fc1d 	bl	800915e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2240      	movs	r2, #64	; 0x40
 800792e:	621a      	str	r2, [r3, #32]

  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007968:	b2da      	uxtb	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2204      	movs	r2, #4
 8007974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b04      	cmp	r3, #4
 8007998:	d106      	bne.n	80079a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d110      	bne.n	80079ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	32ae      	adds	r2, #174	; 0xae
 8007a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e01c      	b.n	8007a52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d115      	bne.n	8007a50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32ae      	adds	r2, #174	; 0xae
 8007a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	32ae      	adds	r2, #174	; 0xae
 8007a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	32ae      	adds	r2, #174	; 0xae
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e01c      	b.n	8007ab6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d115      	bne.n	8007ab4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	32ae      	adds	r2, #174	; 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	32ae      	adds	r2, #174	; 0xae
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00e      	beq.n	8007b10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6852      	ldr	r2, [r2, #4]
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	4611      	mov	r1, r2
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d920      	bls.n	8007bb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b7e:	e013      	b.n	8007ba8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b80:	f107 030a 	add.w	r3, r7, #10
 8007b84:	4619      	mov	r1, r3
 8007b86:	6978      	ldr	r0, [r7, #20]
 8007b88:	f000 f81b 	bl	8007bc2 <USBD_GetNextDesc>
 8007b8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d108      	bne.n	8007ba8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	789b      	ldrb	r3, [r3, #2]
 8007b9e:	78fa      	ldrb	r2, [r7, #3]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d008      	beq.n	8007bb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	885b      	ldrh	r3, [r3, #2]
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	897b      	ldrh	r3, [r7, #10]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d8e5      	bhi.n	8007b80 <USBD_GetEpDesc+0x32>
 8007bb4:	e000      	b.n	8007bb8 <USBD_GetEpDesc+0x6a>
          break;
 8007bb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007bb8:	693b      	ldr	r3, [r7, #16]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	881a      	ldrh	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	3301      	adds	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c1a:	8a3b      	ldrh	r3, [r7, #16]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	b21a      	sxth	r2, r3
 8007c20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d005      	beq.n	8007c5e <USBD_StdDevReq+0x26>
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d857      	bhi.n	8007d06 <USBD_StdDevReq+0xce>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00f      	beq.n	8007c7a <USBD_StdDevReq+0x42>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d153      	bne.n	8007d06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	32ae      	adds	r2, #174	; 0xae
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
      break;
 8007c78:	e04a      	b.n	8007d10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d83b      	bhi.n	8007cfa <USBD_StdDevReq+0xc2>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <USBD_StdDevReq+0x50>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cdd 	.word	0x08007cdd
 8007c8c:	08007cf1 	.word	0x08007cf1
 8007c90:	08007cfb 	.word	0x08007cfb
 8007c94:	08007ce7 	.word	0x08007ce7
 8007c98:	08007cfb 	.word	0x08007cfb
 8007c9c:	08007cbb 	.word	0x08007cbb
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cfb 	.word	0x08007cfb
 8007ca8:	08007cd3 	.word	0x08007cd3
 8007cac:	08007cc5 	.word	0x08007cc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa3c 	bl	8008130 <USBD_GetDescriptor>
          break;
 8007cb8:	e024      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fbcb 	bl	8008458 <USBD_SetAddress>
          break;
 8007cc2:	e01f      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fc0a 	bl	80084e0 <USBD_SetConfig>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
          break;
 8007cd0:	e018      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fcad 	bl	8008634 <USBD_GetConfig>
          break;
 8007cda:	e013      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fcde 	bl	80086a0 <USBD_GetStatus>
          break;
 8007ce4:	e00e      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fd0d 	bl	8008708 <USBD_SetFeature>
          break;
 8007cee:	e009      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fd31 	bl	800875a <USBD_ClrFeature>
          break;
 8007cf8:	e004      	b.n	8007d04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fd88 	bl	8008812 <USBD_CtlError>
          break;
 8007d02:	bf00      	nop
      }
      break;
 8007d04:	e004      	b.n	8007d10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fd82 	bl	8008812 <USBD_CtlError>
      break;
 8007d0e:	bf00      	nop
  }

  return ret;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d005      	beq.n	8007d42 <USBD_StdItfReq+0x26>
 8007d36:	2b40      	cmp	r3, #64	; 0x40
 8007d38:	d852      	bhi.n	8007de0 <USBD_StdItfReq+0xc4>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <USBD_StdItfReq+0x26>
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d14e      	bne.n	8007de0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d840      	bhi.n	8007dd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	889b      	ldrh	r3, [r3, #4]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d836      	bhi.n	8007dc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	889b      	ldrh	r3, [r3, #4]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fed9 	bl	8007b1a <USBD_CoreFindIF>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2bff      	cmp	r3, #255	; 0xff
 8007d70:	d01d      	beq.n	8007dae <USBD_StdItfReq+0x92>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11a      	bne.n	8007dae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d78:	7bba      	ldrb	r2, [r7, #14]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	32ae      	adds	r2, #174	; 0xae
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00f      	beq.n	8007da8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d88:	7bba      	ldrb	r2, [r7, #14]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d90:	7bba      	ldrb	r2, [r7, #14]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32ae      	adds	r2, #174	; 0xae
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007da6:	e004      	b.n	8007db2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dac:	e001      	b.n	8007db2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dae:	2303      	movs	r3, #3
 8007db0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d110      	bne.n	8007ddc <USBD_StdItfReq+0xc0>
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10d      	bne.n	8007ddc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fdf1 	bl	80089a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dc6:	e009      	b.n	8007ddc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fd21 	bl	8008812 <USBD_CtlError>
          break;
 8007dd0:	e004      	b.n	8007ddc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fd1c 	bl	8008812 <USBD_CtlError>
          break;
 8007dda:	e000      	b.n	8007dde <USBD_StdItfReq+0xc2>
          break;
 8007ddc:	bf00      	nop
      }
      break;
 8007dde:	e004      	b.n	8007dea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fd15 	bl	8008812 <USBD_CtlError>
      break;
 8007de8:	bf00      	nop
  }

  return ret;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	889b      	ldrh	r3, [r3, #4]
 8007e06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e10:	2b40      	cmp	r3, #64	; 0x40
 8007e12:	d007      	beq.n	8007e24 <USBD_StdEPReq+0x30>
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	f200 817f 	bhi.w	8008118 <USBD_StdEPReq+0x324>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d02a      	beq.n	8007e74 <USBD_StdEPReq+0x80>
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	f040 817a 	bne.w	8008118 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fe83 	bl	8007b34 <USBD_CoreFindEP>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e32:	7b7b      	ldrb	r3, [r7, #13]
 8007e34:	2bff      	cmp	r3, #255	; 0xff
 8007e36:	f000 8174 	beq.w	8008122 <USBD_StdEPReq+0x32e>
 8007e3a:	7b7b      	ldrb	r3, [r7, #13]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 8170 	bne.w	8008122 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e42:	7b7a      	ldrb	r2, [r7, #13]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e4a:	7b7a      	ldrb	r2, [r7, #13]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	32ae      	adds	r2, #174	; 0xae
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8163 	beq.w	8008122 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e5c:	7b7a      	ldrb	r2, [r7, #13]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	32ae      	adds	r2, #174	; 0xae
 8007e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e72:	e156      	b.n	8008122 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d008      	beq.n	8007e8e <USBD_StdEPReq+0x9a>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	f300 8145 	bgt.w	800810c <USBD_StdEPReq+0x318>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 809b 	beq.w	8007fbe <USBD_StdEPReq+0x1ca>
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d03c      	beq.n	8007f06 <USBD_StdEPReq+0x112>
 8007e8c:	e13e      	b.n	800810c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d002      	beq.n	8007ea0 <USBD_StdEPReq+0xac>
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d016      	beq.n	8007ecc <USBD_StdEPReq+0xd8>
 8007e9e:	e02c      	b.n	8007efa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00d      	beq.n	8007ec2 <USBD_StdEPReq+0xce>
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b80      	cmp	r3, #128	; 0x80
 8007eaa:	d00a      	beq.n	8007ec2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 f999 	bl	80091e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eb6:	2180      	movs	r1, #128	; 0x80
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 f995 	bl	80091e8 <USBD_LL_StallEP>
 8007ebe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ec0:	e020      	b.n	8007f04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fca4 	bl	8008812 <USBD_CtlError>
              break;
 8007eca:	e01b      	b.n	8007f04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	885b      	ldrh	r3, [r3, #2]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10e      	bne.n	8007ef2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <USBD_StdEPReq+0xfe>
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b80      	cmp	r3, #128	; 0x80
 8007ede:	d008      	beq.n	8007ef2 <USBD_StdEPReq+0xfe>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	88db      	ldrh	r3, [r3, #6]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f97b 	bl	80091e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fd58 	bl	80089a8 <USBD_CtlSendStatus>

              break;
 8007ef8:	e004      	b.n	8007f04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fc88 	bl	8008812 <USBD_CtlError>
              break;
 8007f02:	bf00      	nop
          }
          break;
 8007f04:	e107      	b.n	8008116 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d002      	beq.n	8007f18 <USBD_StdEPReq+0x124>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d016      	beq.n	8007f44 <USBD_StdEPReq+0x150>
 8007f16:	e04b      	b.n	8007fb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <USBD_StdEPReq+0x146>
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d00a      	beq.n	8007f3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f95d 	bl	80091e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f2e:	2180      	movs	r1, #128	; 0x80
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f959 	bl	80091e8 <USBD_LL_StallEP>
 8007f36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f38:	e040      	b.n	8007fbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fc68 	bl	8008812 <USBD_CtlError>
              break;
 8007f42:	e03b      	b.n	8007fbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	885b      	ldrh	r3, [r3, #2]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d136      	bne.n	8007fba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 f963 	bl	8009226 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fd21 	bl	80089a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fde2 	bl	8007b34 <USBD_CoreFindEP>
 8007f70:	4603      	mov	r3, r0
 8007f72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f74:	7b7b      	ldrb	r3, [r7, #13]
 8007f76:	2bff      	cmp	r3, #255	; 0xff
 8007f78:	d01f      	beq.n	8007fba <USBD_StdEPReq+0x1c6>
 8007f7a:	7b7b      	ldrb	r3, [r7, #13]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11c      	bne.n	8007fba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f80:	7b7a      	ldrb	r2, [r7, #13]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f88:	7b7a      	ldrb	r2, [r7, #13]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	32ae      	adds	r2, #174	; 0xae
 8007f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d010      	beq.n	8007fba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f98:	7b7a      	ldrb	r2, [r7, #13]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	32ae      	adds	r2, #174	; 0xae
 8007f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fae:	e004      	b.n	8007fba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fc2d 	bl	8008812 <USBD_CtlError>
              break;
 8007fb8:	e000      	b.n	8007fbc <USBD_StdEPReq+0x1c8>
              break;
 8007fba:	bf00      	nop
          }
          break;
 8007fbc:	e0ab      	b.n	8008116 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d002      	beq.n	8007fd0 <USBD_StdEPReq+0x1dc>
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d032      	beq.n	8008034 <USBD_StdEPReq+0x240>
 8007fce:	e097      	b.n	8008100 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <USBD_StdEPReq+0x1f2>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b80      	cmp	r3, #128	; 0x80
 8007fda:	d004      	beq.n	8007fe6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc17 	bl	8008812 <USBD_CtlError>
                break;
 8007fe4:	e091      	b.n	800810a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da0b      	bge.n	8008006 <USBD_StdEPReq+0x212>
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	3304      	adds	r3, #4
 8008004:	e00b      	b.n	800801e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4413      	add	r3, r2
 800801c:	3304      	adds	r3, #4
 800801e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2202      	movs	r2, #2
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fc61 	bl	80088f4 <USBD_CtlSendData>
              break;
 8008032:	e06a      	b.n	800810a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	da11      	bge.n	8008060 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	3324      	adds	r3, #36	; 0x24
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d117      	bne.n	8008086 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fbda 	bl	8008812 <USBD_CtlError>
                  break;
 800805e:	e054      	b.n	800810a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	f003 020f 	and.w	r2, r3, #15
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fbc7 	bl	8008812 <USBD_CtlError>
                  break;
 8008084:	e041      	b.n	800810a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800808a:	2b00      	cmp	r3, #0
 800808c:	da0b      	bge.n	80080a6 <USBD_StdEPReq+0x2b2>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	3310      	adds	r3, #16
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4413      	add	r3, r2
 80080a2:	3304      	adds	r3, #4
 80080a4:	e00b      	b.n	80080be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	3304      	adds	r3, #4
 80080be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <USBD_StdEPReq+0x2d8>
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b80      	cmp	r3, #128	; 0x80
 80080ca:	d103      	bne.n	80080d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e00e      	b.n	80080f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f8c3 	bl	8009264 <USBD_LL_IsStallEP>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e002      	b.n	80080f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2202      	movs	r2, #2
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fbfb 	bl	80088f4 <USBD_CtlSendData>
              break;
 80080fe:	e004      	b.n	800810a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fb85 	bl	8008812 <USBD_CtlError>
              break;
 8008108:	bf00      	nop
          }
          break;
 800810a:	e004      	b.n	8008116 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fb7f 	bl	8008812 <USBD_CtlError>
          break;
 8008114:	bf00      	nop
      }
      break;
 8008116:	e005      	b.n	8008124 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb79 	bl	8008812 <USBD_CtlError>
      break;
 8008120:	e000      	b.n	8008124 <USBD_StdEPReq+0x330>
      break;
 8008122:	bf00      	nop
  }

  return ret;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	2b0e      	cmp	r3, #14
 8008152:	f200 8152 	bhi.w	80083fa <USBD_GetDescriptor+0x2ca>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <USBD_GetDescriptor+0x2c>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	080081cd 	.word	0x080081cd
 8008160:	080081e5 	.word	0x080081e5
 8008164:	08008225 	.word	0x08008225
 8008168:	080083fb 	.word	0x080083fb
 800816c:	080083fb 	.word	0x080083fb
 8008170:	0800839b 	.word	0x0800839b
 8008174:	080083c7 	.word	0x080083c7
 8008178:	080083fb 	.word	0x080083fb
 800817c:	080083fb 	.word	0x080083fb
 8008180:	080083fb 	.word	0x080083fb
 8008184:	080083fb 	.word	0x080083fb
 8008188:	080083fb 	.word	0x080083fb
 800818c:	080083fb 	.word	0x080083fb
 8008190:	080083fb 	.word	0x080083fb
 8008194:	08008199 	.word	0x08008199
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	7c12      	ldrb	r2, [r2, #16]
 80081b0:	f107 0108 	add.w	r1, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081ba:	e126      	b.n	800840a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb27 	bl	8008812 <USBD_CtlError>
        err++;
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	3301      	adds	r3, #1
 80081c8:	72fb      	strb	r3, [r7, #11]
      break;
 80081ca:	e11e      	b.n	800840a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7c12      	ldrb	r2, [r2, #16]
 80081d8:	f107 0108 	add.w	r1, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
      break;
 80081e2:	e112      	b.n	800840a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7c1b      	ldrb	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10d      	bne.n	8008208 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	f107 0208 	add.w	r2, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	2202      	movs	r2, #2
 8008204:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008206:	e100      	b.n	800840a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	f107 0208 	add.w	r2, r7, #8
 8008214:	4610      	mov	r0, r2
 8008216:	4798      	blx	r3
 8008218:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	2202      	movs	r2, #2
 8008220:	701a      	strb	r2, [r3, #0]
      break;
 8008222:	e0f2      	b.n	800840a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	885b      	ldrh	r3, [r3, #2]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b05      	cmp	r3, #5
 800822c:	f200 80ac 	bhi.w	8008388 <USBD_GetDescriptor+0x258>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <USBD_GetDescriptor+0x108>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	08008251 	.word	0x08008251
 800823c:	08008285 	.word	0x08008285
 8008240:	080082b9 	.word	0x080082b9
 8008244:	080082ed 	.word	0x080082ed
 8008248:	08008321 	.word	0x08008321
 800824c:	08008355 	.word	0x08008355
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7c12      	ldrb	r2, [r2, #16]
 8008268:	f107 0108 	add.w	r1, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008272:	e091      	b.n	8008398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 facb 	bl	8008812 <USBD_CtlError>
            err++;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	3301      	adds	r3, #1
 8008280:	72fb      	strb	r3, [r7, #11]
          break;
 8008282:	e089      	b.n	8008398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	7c12      	ldrb	r2, [r2, #16]
 800829c:	f107 0108 	add.w	r1, r7, #8
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
 80082a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a6:	e077      	b.n	8008398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fab1 	bl	8008812 <USBD_CtlError>
            err++;
 80082b0:	7afb      	ldrb	r3, [r7, #11]
 80082b2:	3301      	adds	r3, #1
 80082b4:	72fb      	strb	r3, [r7, #11]
          break;
 80082b6:	e06f      	b.n	8008398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7c12      	ldrb	r2, [r2, #16]
 80082d0:	f107 0108 	add.w	r1, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082da:	e05d      	b.n	8008398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa97 	bl	8008812 <USBD_CtlError>
            err++;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	3301      	adds	r3, #1
 80082e8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ea:	e055      	b.n	8008398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00b      	beq.n	8008310 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	7c12      	ldrb	r2, [r2, #16]
 8008304:	f107 0108 	add.w	r1, r7, #8
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830e:	e043      	b.n	8008398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa7d 	bl	8008812 <USBD_CtlError>
            err++;
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	3301      	adds	r3, #1
 800831c:	72fb      	strb	r3, [r7, #11]
          break;
 800831e:	e03b      	b.n	8008398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7c12      	ldrb	r2, [r2, #16]
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
 8008340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008342:	e029      	b.n	8008398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa63 	bl	8008812 <USBD_CtlError>
            err++;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	3301      	adds	r3, #1
 8008350:	72fb      	strb	r3, [r7, #11]
          break;
 8008352:	e021      	b.n	8008398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	7c12      	ldrb	r2, [r2, #16]
 800836c:	f107 0108 	add.w	r1, r7, #8
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008376:	e00f      	b.n	8008398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa49 	bl	8008812 <USBD_CtlError>
            err++;
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	3301      	adds	r3, #1
 8008384:	72fb      	strb	r3, [r7, #11]
          break;
 8008386:	e007      	b.n	8008398 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa41 	bl	8008812 <USBD_CtlError>
          err++;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	3301      	adds	r3, #1
 8008394:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008396:	bf00      	nop
      }
      break;
 8008398:	e037      	b.n	800840a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7c1b      	ldrb	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	f107 0208 	add.w	r2, r7, #8
 80083ae:	4610      	mov	r0, r2
 80083b0:	4798      	blx	r3
 80083b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083b4:	e029      	b.n	800840a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa2a 	bl	8008812 <USBD_CtlError>
        err++;
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	3301      	adds	r3, #1
 80083c2:	72fb      	strb	r3, [r7, #11]
      break;
 80083c4:	e021      	b.n	800840a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7c1b      	ldrb	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10d      	bne.n	80083ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	f107 0208 	add.w	r2, r7, #8
 80083da:	4610      	mov	r0, r2
 80083dc:	4798      	blx	r3
 80083de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	2207      	movs	r2, #7
 80083e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e8:	e00f      	b.n	800840a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa10 	bl	8008812 <USBD_CtlError>
        err++;
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	3301      	adds	r3, #1
 80083f6:	72fb      	strb	r3, [r7, #11]
      break;
 80083f8:	e007      	b.n	800840a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa08 	bl	8008812 <USBD_CtlError>
      err++;
 8008402:	7afb      	ldrb	r3, [r7, #11]
 8008404:	3301      	adds	r3, #1
 8008406:	72fb      	strb	r3, [r7, #11]
      break;
 8008408:	bf00      	nop
  }

  if (err != 0U)
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d11e      	bne.n	800844e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	88db      	ldrh	r3, [r3, #6]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d016      	beq.n	8008446 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008418:	893b      	ldrh	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	88da      	ldrh	r2, [r3, #6]
 8008422:	893b      	ldrh	r3, [r7, #8]
 8008424:	4293      	cmp	r3, r2
 8008426:	bf28      	it	cs
 8008428:	4613      	movcs	r3, r2
 800842a:	b29b      	uxth	r3, r3
 800842c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800842e:	893b      	ldrh	r3, [r7, #8]
 8008430:	461a      	mov	r2, r3
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fa5d 	bl	80088f4 <USBD_CtlSendData>
 800843a:	e009      	b.n	8008450 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f9e7 	bl	8008812 <USBD_CtlError>
 8008444:	e004      	b.n	8008450 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 faae 	bl	80089a8 <USBD_CtlSendStatus>
 800844c:	e000      	b.n	8008450 <USBD_GetDescriptor+0x320>
    return;
 800844e:	bf00      	nop
  }
}
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop

08008458 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	889b      	ldrh	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d131      	bne.n	80084ce <USBD_SetAddress+0x76>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d12d      	bne.n	80084ce <USBD_SetAddress+0x76>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	2b7f      	cmp	r3, #127	; 0x7f
 8008478:	d829      	bhi.n	80084ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d104      	bne.n	800849c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f9bc 	bl	8008812 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849a:	e01d      	b.n	80084d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7bfa      	ldrb	r2, [r7, #15]
 80084a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 ff07 	bl	80092bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa7a 	bl	80089a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c2:	e009      	b.n	80084d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084cc:	e004      	b.n	80084d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f99e 	bl	8008812 <USBD_CtlError>
  }
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	4b4e      	ldr	r3, [pc, #312]	; (8008630 <USBD_SetConfig+0x150>)
 80084f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f8:	4b4d      	ldr	r3, [pc, #308]	; (8008630 <USBD_SetConfig+0x150>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d905      	bls.n	800850c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f985 	bl	8008812 <USBD_CtlError>
    return USBD_FAIL;
 8008508:	2303      	movs	r3, #3
 800850a:	e08c      	b.n	8008626 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d002      	beq.n	800851e <USBD_SetConfig+0x3e>
 8008518:	2b03      	cmp	r3, #3
 800851a:	d029      	beq.n	8008570 <USBD_SetConfig+0x90>
 800851c:	e075      	b.n	800860a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800851e:	4b44      	ldr	r3, [pc, #272]	; (8008630 <USBD_SetConfig+0x150>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d020      	beq.n	8008568 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008526:	4b42      	ldr	r3, [pc, #264]	; (8008630 <USBD_SetConfig+0x150>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008530:	4b3f      	ldr	r3, [pc, #252]	; (8008630 <USBD_SetConfig+0x150>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7fe ffbd 	bl	80074b6 <USBD_SetClassConfig>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d008      	beq.n	8008558 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f962 	bl	8008812 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008556:	e065      	b.n	8008624 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fa25 	bl	80089a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2203      	movs	r2, #3
 8008562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008566:	e05d      	b.n	8008624 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa1d 	bl	80089a8 <USBD_CtlSendStatus>
      break;
 800856e:	e059      	b.n	8008624 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008570:	4b2f      	ldr	r3, [pc, #188]	; (8008630 <USBD_SetConfig+0x150>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d112      	bne.n	800859e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008580:	4b2b      	ldr	r3, [pc, #172]	; (8008630 <USBD_SetConfig+0x150>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800858a:	4b29      	ldr	r3, [pc, #164]	; (8008630 <USBD_SetConfig+0x150>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7fe ffac 	bl	80074ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa06 	bl	80089a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800859c:	e042      	b.n	8008624 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800859e:	4b24      	ldr	r3, [pc, #144]	; (8008630 <USBD_SetConfig+0x150>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d02a      	beq.n	8008602 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7fe ff9a 	bl	80074ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085ba:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <USBD_SetConfig+0x150>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085c4:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <USBD_SetConfig+0x150>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7fe ff73 	bl	80074b6 <USBD_SetClassConfig>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00f      	beq.n	80085fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f918 	bl	8008812 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fe ff7f 	bl	80074ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085f8:	e014      	b.n	8008624 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9d4 	bl	80089a8 <USBD_CtlSendStatus>
      break;
 8008600:	e010      	b.n	8008624 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9d0 	bl	80089a8 <USBD_CtlSendStatus>
      break;
 8008608:	e00c      	b.n	8008624 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f900 	bl	8008812 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <USBD_SetConfig+0x150>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7fe ff68 	bl	80074ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	bf00      	nop
  }

  return ret;
 8008624:	7bfb      	ldrb	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000318 	.word	0x20000318

08008634 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	88db      	ldrh	r3, [r3, #6]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d004      	beq.n	8008650 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f8e2 	bl	8008812 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800864e:	e023      	b.n	8008698 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	dc02      	bgt.n	8008662 <USBD_GetConfig+0x2e>
 800865c:	2b00      	cmp	r3, #0
 800865e:	dc03      	bgt.n	8008668 <USBD_GetConfig+0x34>
 8008660:	e015      	b.n	800868e <USBD_GetConfig+0x5a>
 8008662:	2b03      	cmp	r3, #3
 8008664:	d00b      	beq.n	800867e <USBD_GetConfig+0x4a>
 8008666:	e012      	b.n	800868e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3308      	adds	r3, #8
 8008672:	2201      	movs	r2, #1
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f93c 	bl	80088f4 <USBD_CtlSendData>
        break;
 800867c:	e00c      	b.n	8008698 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	2201      	movs	r2, #1
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f934 	bl	80088f4 <USBD_CtlSendData>
        break;
 800868c:	e004      	b.n	8008698 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8be 	bl	8008812 <USBD_CtlError>
        break;
 8008696:	bf00      	nop
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	3b01      	subs	r3, #1
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d81e      	bhi.n	80086f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	88db      	ldrh	r3, [r3, #6]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d004      	beq.n	80086ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f8a5 	bl	8008812 <USBD_CtlError>
        break;
 80086c8:	e01a      	b.n	8008700 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f043 0202 	orr.w	r2, r3, #2
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	330c      	adds	r3, #12
 80086ea:	2202      	movs	r2, #2
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f900 	bl	80088f4 <USBD_CtlSendData>
      break;
 80086f4:	e004      	b.n	8008700 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f88a 	bl	8008812 <USBD_CtlError>
      break;
 80086fe:	bf00      	nop
  }
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	885b      	ldrh	r3, [r3, #2]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d107      	bne.n	800872a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f940 	bl	80089a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008728:	e013      	b.n	8008752 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d10b      	bne.n	800874a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	889b      	ldrh	r3, [r3, #4]
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	b29b      	uxth	r3, r3
 800873a:	b2da      	uxtb	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f930 	bl	80089a8 <USBD_CtlSendStatus>
}
 8008748:	e003      	b.n	8008752 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f860 	bl	8008812 <USBD_CtlError>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876a:	b2db      	uxtb	r3, r3
 800876c:	3b01      	subs	r3, #1
 800876e:	2b02      	cmp	r3, #2
 8008770:	d80b      	bhi.n	800878a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d10c      	bne.n	8008794 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f910 	bl	80089a8 <USBD_CtlSendStatus>
      }
      break;
 8008788:	e004      	b.n	8008794 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f840 	bl	8008812 <USBD_CtlError>
      break;
 8008792:	e000      	b.n	8008796 <USBD_ClrFeature+0x3c>
      break;
 8008794:	bf00      	nop
  }
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fa17 	bl	8007bfc <SWAPBYTE>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3301      	adds	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff fa0a 	bl	8007bfc <SWAPBYTE>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff f9fd 	bl	8007bfc <SWAPBYTE>
 8008802:	4603      	mov	r3, r0
 8008804:	461a      	mov	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	80da      	strh	r2, [r3, #6]
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800881c:	2180      	movs	r1, #128	; 0x80
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fce2 	bl	80091e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008824:	2100      	movs	r1, #0
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fcde 	bl	80091e8 <USBD_LL_StallEP>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d036      	beq.n	80088b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800884e:	6938      	ldr	r0, [r7, #16]
 8008850:	f000 f836 	bl	80088c0 <USBD_GetLen>
 8008854:	4603      	mov	r3, r0
 8008856:	3301      	adds	r3, #1
 8008858:	b29b      	uxth	r3, r3
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4413      	add	r3, r2
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	701a      	strb	r2, [r3, #0]
  idx++;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	3301      	adds	r3, #1
 8008872:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	4413      	add	r3, r2
 800887a:	2203      	movs	r2, #3
 800887c:	701a      	strb	r2, [r3, #0]
  idx++;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	3301      	adds	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008884:	e013      	b.n	80088ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	4413      	add	r3, r2
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	3301      	adds	r3, #1
 8008896:	613b      	str	r3, [r7, #16]
    idx++;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	3301      	adds	r3, #1
 800889c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	4413      	add	r3, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	3301      	adds	r3, #1
 80088ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e7      	bne.n	8008886 <USBD_GetString+0x52>
 80088b6:	e000      	b.n	80088ba <USBD_GetString+0x86>
    return;
 80088b8:	bf00      	nop
  }
}
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088d0:	e005      	b.n	80088de <USBD_GetLen+0x1e>
  {
    len++;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	3301      	adds	r3, #1
 80088d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	3301      	adds	r3, #1
 80088dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f5      	bne.n	80088d2 <USBD_GetLen+0x12>
  }

  return len;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2202      	movs	r2, #2
 8008904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	2100      	movs	r1, #0
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fced 	bl	80092fa <USBD_LL_Transmit>

  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	2100      	movs	r1, #0
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fcdc 	bl	80092fa <USBD_LL_Transmit>

  return USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2203      	movs	r2, #3
 800895c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	2100      	movs	r1, #0
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fce0 	bl	800933c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fccf 	bl	800933c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2204      	movs	r2, #4
 80089b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089b8:	2300      	movs	r3, #0
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fc9b 	bl	80092fa <USBD_LL_Transmit>

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2205      	movs	r2, #5
 80089da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089de:	2300      	movs	r3, #0
 80089e0:	2200      	movs	r2, #0
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fca9 	bl	800933c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089f8:	2200      	movs	r2, #0
 80089fa:	4912      	ldr	r1, [pc, #72]	; (8008a44 <MX_USB_DEVICE_Init+0x50>)
 80089fc:	4812      	ldr	r0, [pc, #72]	; (8008a48 <MX_USB_DEVICE_Init+0x54>)
 80089fe:	f7fe fcdd 	bl	80073bc <USBD_Init>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a08:	f7f8 f870 	bl	8000aec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a0c:	490f      	ldr	r1, [pc, #60]	; (8008a4c <MX_USB_DEVICE_Init+0x58>)
 8008a0e:	480e      	ldr	r0, [pc, #56]	; (8008a48 <MX_USB_DEVICE_Init+0x54>)
 8008a10:	f7fe fd04 	bl	800741c <USBD_RegisterClass>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a1a:	f7f8 f867 	bl	8000aec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a1e:	490c      	ldr	r1, [pc, #48]	; (8008a50 <MX_USB_DEVICE_Init+0x5c>)
 8008a20:	4809      	ldr	r0, [pc, #36]	; (8008a48 <MX_USB_DEVICE_Init+0x54>)
 8008a22:	f7fe fc3b 	bl	800729c <USBD_CDC_RegisterInterface>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a2c:	f7f8 f85e 	bl	8000aec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <MX_USB_DEVICE_Init+0x54>)
 8008a32:	f7fe fd29 	bl	8007488 <USBD_Start>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a3c:	f7f8 f856 	bl	8000aec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a40:	bf00      	nop
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	200000ac 	.word	0x200000ac
 8008a48:	2000031c 	.word	0x2000031c
 8008a4c:	20000018 	.word	0x20000018
 8008a50:	20000098 	.word	0x20000098

08008a54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4905      	ldr	r1, [pc, #20]	; (8008a70 <CDC_Init_FS+0x1c>)
 8008a5c:	4805      	ldr	r0, [pc, #20]	; (8008a74 <CDC_Init_FS+0x20>)
 8008a5e:	f7fe fc37 	bl	80072d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a62:	4905      	ldr	r1, [pc, #20]	; (8008a78 <CDC_Init_FS+0x24>)
 8008a64:	4803      	ldr	r0, [pc, #12]	; (8008a74 <CDC_Init_FS+0x20>)
 8008a66:	f7fe fc55 	bl	8007314 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20000df8 	.word	0x20000df8
 8008a74:	2000031c 	.word	0x2000031c
 8008a78:	200005f8 	.word	0x200005f8

08008a7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a9c:	79fb      	ldrb	r3, [r7, #7]
 8008a9e:	2b23      	cmp	r3, #35	; 0x23
 8008aa0:	d84a      	bhi.n	8008b38 <CDC_Control_FS+0xac>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <CDC_Control_FS+0x1c>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008b39 	.word	0x08008b39
 8008aac:	08008b39 	.word	0x08008b39
 8008ab0:	08008b39 	.word	0x08008b39
 8008ab4:	08008b39 	.word	0x08008b39
 8008ab8:	08008b39 	.word	0x08008b39
 8008abc:	08008b39 	.word	0x08008b39
 8008ac0:	08008b39 	.word	0x08008b39
 8008ac4:	08008b39 	.word	0x08008b39
 8008ac8:	08008b39 	.word	0x08008b39
 8008acc:	08008b39 	.word	0x08008b39
 8008ad0:	08008b39 	.word	0x08008b39
 8008ad4:	08008b39 	.word	0x08008b39
 8008ad8:	08008b39 	.word	0x08008b39
 8008adc:	08008b39 	.word	0x08008b39
 8008ae0:	08008b39 	.word	0x08008b39
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008b39 	.word	0x08008b39
 8008aec:	08008b39 	.word	0x08008b39
 8008af0:	08008b39 	.word	0x08008b39
 8008af4:	08008b39 	.word	0x08008b39
 8008af8:	08008b39 	.word	0x08008b39
 8008afc:	08008b39 	.word	0x08008b39
 8008b00:	08008b39 	.word	0x08008b39
 8008b04:	08008b39 	.word	0x08008b39
 8008b08:	08008b39 	.word	0x08008b39
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b39 	.word	0x08008b39
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	08008b39 	.word	0x08008b39
 8008b24:	08008b39 	.word	0x08008b39
 8008b28:	08008b39 	.word	0x08008b39
 8008b2c:	08008b39 	.word	0x08008b39
 8008b30:	08008b39 	.word	0x08008b39
 8008b34:	08008b39 	.word	0x08008b39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b38:	bf00      	nop
  }

  return (USBD_OK);
 8008b3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <CDC_Receive_FS+0x24>)
 8008b56:	f7fe fbdd 	bl	8007314 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b5a:	4804      	ldr	r0, [pc, #16]	; (8008b6c <CDC_Receive_FS+0x24>)
 8008b5c:	f7fe fbf8 	bl	8007350 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	2000031c 	.word	0x2000031c

08008b70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
	...

08008b94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2212      	movs	r2, #18
 8008ba4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ba6:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	200000cc 	.word	0x200000cc

08008bb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bca:	4b03      	ldr	r3, [pc, #12]	; (8008bd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	200000ec 	.word	0x200000ec

08008bdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4907      	ldr	r1, [pc, #28]	; (8008c10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bf2:	4808      	ldr	r0, [pc, #32]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bf4:	f7ff fe1e 	bl	8008834 <USBD_GetString>
 8008bf8:	e004      	b.n	8008c04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4904      	ldr	r1, [pc, #16]	; (8008c10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bfe:	4805      	ldr	r0, [pc, #20]	; (8008c14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c00:	f7ff fe18 	bl	8008834 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	200015f8 	.word	0x200015f8
 8008c14:	08009538 	.word	0x08009538

08008c18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	4904      	ldr	r1, [pc, #16]	; (8008c38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c28:	4804      	ldr	r0, [pc, #16]	; (8008c3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c2a:	f7ff fe03 	bl	8008834 <USBD_GetString>
  return USBD_StrDesc;
 8008c2e:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	200015f8 	.word	0x200015f8
 8008c3c:	08009550 	.word	0x08009550

08008c40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	221a      	movs	r2, #26
 8008c50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c52:	f000 f855 	bl	8008d00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c56:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	200000f0 	.word	0x200000f0

08008c64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d105      	bne.n	8008c82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	4907      	ldr	r1, [pc, #28]	; (8008c98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c7a:	4808      	ldr	r0, [pc, #32]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c7c:	f7ff fdda 	bl	8008834 <USBD_GetString>
 8008c80:	e004      	b.n	8008c8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	4904      	ldr	r1, [pc, #16]	; (8008c98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c86:	4805      	ldr	r0, [pc, #20]	; (8008c9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c88:	f7ff fdd4 	bl	8008834 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c8c:	4b02      	ldr	r3, [pc, #8]	; (8008c98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200015f8 	.word	0x200015f8
 8008c9c:	08009564 	.word	0x08009564

08008ca0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4907      	ldr	r1, [pc, #28]	; (8008cd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cb6:	4808      	ldr	r0, [pc, #32]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cb8:	f7ff fdbc 	bl	8008834 <USBD_GetString>
 8008cbc:	e004      	b.n	8008cc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4904      	ldr	r1, [pc, #16]	; (8008cd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cc2:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cc4:	f7ff fdb6 	bl	8008834 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc8:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200015f8 	.word	0x200015f8
 8008cd8:	08009570 	.word	0x08009570

08008cdc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	6039      	str	r1, [r7, #0]
 8008ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	220c      	movs	r2, #12
 8008cec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008cee:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	200000e0 	.word	0x200000e0

08008d00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <Get_SerialNum+0x44>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <Get_SerialNum+0x48>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d12:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <Get_SerialNum+0x4c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d009      	beq.n	8008d3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d26:	2208      	movs	r2, #8
 8008d28:	4909      	ldr	r1, [pc, #36]	; (8008d50 <Get_SerialNum+0x50>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 f814 	bl	8008d58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d30:	2204      	movs	r2, #4
 8008d32:	4908      	ldr	r1, [pc, #32]	; (8008d54 <Get_SerialNum+0x54>)
 8008d34:	68b8      	ldr	r0, [r7, #8]
 8008d36:	f000 f80f 	bl	8008d58 <IntToUnicode>
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	1fff7a10 	.word	0x1fff7a10
 8008d48:	1fff7a14 	.word	0x1fff7a14
 8008d4c:	1fff7a18 	.word	0x1fff7a18
 8008d50:	200000f2 	.word	0x200000f2
 8008d54:	20000102 	.word	0x20000102

08008d58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	4613      	mov	r3, r2
 8008d64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]
 8008d6e:	e027      	b.n	8008dc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	0f1b      	lsrs	r3, r3, #28
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d80b      	bhi.n	8008d90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	0f1b      	lsrs	r3, r3, #28
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	4619      	mov	r1, r3
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	440b      	add	r3, r1
 8008d88:	3230      	adds	r2, #48	; 0x30
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e00a      	b.n	8008da6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0f1b      	lsrs	r3, r3, #28
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	440b      	add	r3, r1
 8008da0:	3237      	adds	r2, #55	; 0x37
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	3301      	adds	r3, #1
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	4413      	add	r3, r2
 8008db6:	2200      	movs	r2, #0
 8008db8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
 8008dc0:	7dfa      	ldrb	r2, [r7, #23]
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d3d3      	bcc.n	8008d70 <IntToUnicode+0x18>
  }
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b0a0      	sub	sp, #128	; 0x80
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	609a      	str	r2, [r3, #8]
 8008dec:	60da      	str	r2, [r3, #12]
 8008dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008df0:	f107 0310 	add.w	r3, r7, #16
 8008df4:	225c      	movs	r2, #92	; 0x5c
 8008df6:	2100      	movs	r1, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fb89 	bl	8009510 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e06:	d149      	bne.n	8008e9c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e12:	f107 0310 	add.w	r3, r7, #16
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fa fbe0 	bl	80035dc <HAL_RCCEx_PeriphCLKConfig>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8008e22:	f7f7 fe63 	bl	8000aec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e30:	f043 0301 	orr.w	r3, r3, #1
 8008e34:	6313      	str	r3, [r2, #48]	; 0x30
 8008e36:	4b1b      	ldr	r3, [pc, #108]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB__Pin|USB_A12_Pin;
 8008e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e50:	2303      	movs	r3, #3
 8008e52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e54:	230a      	movs	r3, #10
 8008e56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4812      	ldr	r0, [pc, #72]	; (8008ea8 <HAL_PCD_MspInit+0xd0>)
 8008e60:	f7f8 fce2 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e68:	4a0e      	ldr	r2, [pc, #56]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6e:	6353      	str	r3, [r2, #52]	; 0x34
 8008e70:	2300      	movs	r3, #0
 8008e72:	60bb      	str	r3, [r7, #8]
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e78:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8008e80:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <HAL_PCD_MspInit+0xcc>)
 8008e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	2043      	movs	r0, #67	; 0x43
 8008e92:	f7f8 fc92 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e96:	2043      	movs	r0, #67	; 0x43
 8008e98:	f7f8 fcab 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	3780      	adds	r7, #128	; 0x80
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	40020000 	.word	0x40020000

08008eac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fe fb2d 	bl	8007522 <USBD_LL_SetupStage>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f7fe fb67 	bl	80075cc <USBD_LL_DataOutStage>
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	334c      	adds	r3, #76	; 0x4c
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f7fe fc00 	bl	8007732 <USBD_LL_DataInStage>
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fd34 	bl	80079b6 <USBD_LL_SOF>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d102      	bne.n	8008f70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
 8008f6e:	e008      	b.n	8008f82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d102      	bne.n	8008f7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
 8008f7c:	e001      	b.n	8008f82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f7e:	f7f7 fdb5 	bl	8000aec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f88:	7bfa      	ldrb	r2, [r7, #15]
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe fcd4 	bl	800793a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe fc7c 	bl	8007896 <USBD_LL_Reset>
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe fccf 	bl	800795a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	6812      	ldr	r2, [r2, #0]
 8008fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <HAL_PCD_SuspendCallback+0x48>)
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	4a03      	ldr	r2, [pc, #12]	; (8008ff0 <HAL_PCD_SuspendCallback+0x48>)
 8008fe2:	f043 0306 	orr.w	r3, r3, #6
 8008fe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	e000ed00 	.word	0xe000ed00

08008ff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fcbf 	bl	8007986 <USBD_LL_Resume>
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009022:	78fa      	ldrb	r2, [r7, #3]
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fd17 	bl	8007a5a <USBD_LL_IsoOUTIncomplete>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fcd3 	bl	80079f6 <USBD_LL_IsoINIncomplete>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fd29 	bl	8007abe <USBD_LL_DevConnected>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fd26 	bl	8007ad4 <USBD_LL_DevDisconnected>
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d13c      	bne.n	800911a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090a0:	4a20      	ldr	r2, [pc, #128]	; (8009124 <USBD_LL_Init+0x94>)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a1e      	ldr	r2, [pc, #120]	; (8009124 <USBD_LL_Init+0x94>)
 80090ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090b0:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <USBD_LL_Init+0x94>)
 80090b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80090b8:	4b1a      	ldr	r3, [pc, #104]	; (8009124 <USBD_LL_Init+0x94>)
 80090ba:	2206      	movs	r2, #6
 80090bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090be:	4b19      	ldr	r3, [pc, #100]	; (8009124 <USBD_LL_Init+0x94>)
 80090c0:	2202      	movs	r2, #2
 80090c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090c4:	4b17      	ldr	r3, [pc, #92]	; (8009124 <USBD_LL_Init+0x94>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090ca:	4b16      	ldr	r3, [pc, #88]	; (8009124 <USBD_LL_Init+0x94>)
 80090cc:	2202      	movs	r2, #2
 80090ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090d0:	4b14      	ldr	r3, [pc, #80]	; (8009124 <USBD_LL_Init+0x94>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090d6:	4b13      	ldr	r3, [pc, #76]	; (8009124 <USBD_LL_Init+0x94>)
 80090d8:	2200      	movs	r2, #0
 80090da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090dc:	4b11      	ldr	r3, [pc, #68]	; (8009124 <USBD_LL_Init+0x94>)
 80090de:	2200      	movs	r2, #0
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090e2:	4b10      	ldr	r3, [pc, #64]	; (8009124 <USBD_LL_Init+0x94>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090e8:	4b0e      	ldr	r3, [pc, #56]	; (8009124 <USBD_LL_Init+0x94>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090ee:	480d      	ldr	r0, [pc, #52]	; (8009124 <USBD_LL_Init+0x94>)
 80090f0:	f7f8 fea4 	bl	8001e3c <HAL_PCD_Init>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090fa:	f7f7 fcf7 	bl	8000aec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	4808      	ldr	r0, [pc, #32]	; (8009124 <USBD_LL_Init+0x94>)
 8009102:	f7fa f930 	bl	8003366 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009106:	2240      	movs	r2, #64	; 0x40
 8009108:	2100      	movs	r1, #0
 800910a:	4806      	ldr	r0, [pc, #24]	; (8009124 <USBD_LL_Init+0x94>)
 800910c:	f7fa f8e4 	bl	80032d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009110:	2280      	movs	r2, #128	; 0x80
 8009112:	2101      	movs	r1, #1
 8009114:	4803      	ldr	r0, [pc, #12]	; (8009124 <USBD_LL_Init+0x94>)
 8009116:	f7fa f8df 	bl	80032d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	200017f8 	.word	0x200017f8

08009128 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800913e:	4618      	mov	r0, r3
 8009140:	f7f8 ffa0 	bl	8002084 <HAL_PCD_Start>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f990 	bl	8009470 <USBD_Get_USB_Status>
 8009150:	4603      	mov	r3, r0
 8009152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009154:	7bbb      	ldrb	r3, [r7, #14]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	4608      	mov	r0, r1
 8009168:	4611      	mov	r1, r2
 800916a:	461a      	mov	r2, r3
 800916c:	4603      	mov	r3, r0
 800916e:	70fb      	strb	r3, [r7, #3]
 8009170:	460b      	mov	r3, r1
 8009172:	70bb      	strb	r3, [r7, #2]
 8009174:	4613      	mov	r3, r2
 8009176:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009186:	78bb      	ldrb	r3, [r7, #2]
 8009188:	883a      	ldrh	r2, [r7, #0]
 800918a:	78f9      	ldrb	r1, [r7, #3]
 800918c:	f7f9 fc9e 	bl	8002acc <HAL_PCD_EP_Open>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f96a 	bl	8009470 <USBD_Get_USB_Status>
 800919c:	4603      	mov	r3, r0
 800919e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4611      	mov	r1, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f9 fce7 	bl	8002b9c <HAL_PCD_EP_Close>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 f94b 	bl	8009470 <USBD_Get_USB_Status>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091de:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f7f9 fdbf 	bl	8002d8a <HAL_PCD_EP_SetStall>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f92c 	bl	8009470 <USBD_Get_USB_Status>
 8009218:	4603      	mov	r3, r0
 800921a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921c:	7bbb      	ldrb	r3, [r7, #14]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009240:	78fa      	ldrb	r2, [r7, #3]
 8009242:	4611      	mov	r1, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f7f9 fe04 	bl	8002e52 <HAL_PCD_EP_ClrStall>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	4618      	mov	r0, r3
 8009252:	f000 f90d 	bl	8009470 <USBD_Get_USB_Status>
 8009256:	4603      	mov	r3, r0
 8009258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925a:	7bbb      	ldrb	r3, [r7, #14]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800927c:	2b00      	cmp	r3, #0
 800927e:	da0b      	bge.n	8009298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	4613      	mov	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	333e      	adds	r3, #62	; 0x3e
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	e00b      	b.n	80092b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009298:	78fb      	ldrb	r3, [r7, #3]
 800929a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	4613      	mov	r3, r2
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	4611      	mov	r1, r2
 80092da:	4618      	mov	r0, r3
 80092dc:	f7f9 fbd1 	bl	8002a82 <HAL_PCD_SetAddress>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f8c2 	bl	8009470 <USBD_Get_USB_Status>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b086      	sub	sp, #24
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
 8009306:	460b      	mov	r3, r1
 8009308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009318:	7af9      	ldrb	r1, [r7, #11]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	f7f9 fcea 	bl	8002cf6 <HAL_PCD_EP_Transmit>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 f8a1 	bl	8009470 <USBD_Get_USB_Status>
 800932e:	4603      	mov	r3, r0
 8009330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009332:	7dbb      	ldrb	r3, [r7, #22]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	460b      	mov	r3, r1
 800934a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800935a:	7af9      	ldrb	r1, [r7, #11]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	f7f9 fc66 	bl	8002c30 <HAL_PCD_EP_Receive>
 8009364:	4603      	mov	r3, r0
 8009366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009368:	7dfb      	ldrb	r3, [r7, #23]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 f880 	bl	8009470 <USBD_Get_USB_Status>
 8009370:	4603      	mov	r3, r0
 8009372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009374:	7dbb      	ldrb	r3, [r7, #22]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f7f9 fc96 	bl	8002cc6 <HAL_PCD_EP_GetRxCount>
 800939a:	4603      	mov	r3, r0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_PCDEx_LPM_Callback+0x18>
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d01f      	beq.n	80093fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80093ba:	e03b      	b.n	8009434 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d007      	beq.n	80093d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80093c4:	f7f7 f8ec 	bl	80005a0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c8:	4b1c      	ldr	r3, [pc, #112]	; (800943c <HAL_PCDEx_LPM_Callback+0x98>)
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	4a1b      	ldr	r2, [pc, #108]	; (800943c <HAL_PCDEx_LPM_Callback+0x98>)
 80093ce:	f023 0306 	bic.w	r3, r3, #6
 80093d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	6812      	ldr	r2, [r2, #0]
 80093e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093e6:	f023 0301 	bic.w	r3, r3, #1
 80093ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fac7 	bl	8007986 <USBD_LL_Resume>
    break;
 80093f8:	e01c      	b.n	8009434 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fa9e 	bl	800795a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <HAL_PCDEx_LPM_Callback+0x98>)
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	4a04      	ldr	r2, [pc, #16]	; (800943c <HAL_PCDEx_LPM_Callback+0x98>)
 800942c:	f043 0306 	orr.w	r3, r3, #6
 8009430:	6113      	str	r3, [r2, #16]
    break;
 8009432:	bf00      	nop
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	e000ed00 	.word	0xe000ed00

08009440 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009448:	4b03      	ldr	r3, [pc, #12]	; (8009458 <USBD_static_malloc+0x18>)
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	20001d04 	.word	0x20001d04

0800945c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]

}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	2b03      	cmp	r3, #3
 8009482:	d817      	bhi.n	80094b4 <USBD_Get_USB_Status+0x44>
 8009484:	a201      	add	r2, pc, #4	; (adr r2, 800948c <USBD_Get_USB_Status+0x1c>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	0800949d 	.word	0x0800949d
 8009490:	080094a3 	.word	0x080094a3
 8009494:	080094a9 	.word	0x080094a9
 8009498:	080094af 	.word	0x080094af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73fb      	strb	r3, [r7, #15]
    break;
 80094a0:	e00b      	b.n	80094ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094a2:	2303      	movs	r3, #3
 80094a4:	73fb      	strb	r3, [r7, #15]
    break;
 80094a6:	e008      	b.n	80094ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094a8:	2301      	movs	r3, #1
 80094aa:	73fb      	strb	r3, [r7, #15]
    break;
 80094ac:	e005      	b.n	80094ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ae:	2303      	movs	r3, #3
 80094b0:	73fb      	strb	r3, [r7, #15]
    break;
 80094b2:	e002      	b.n	80094ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094b4:	2303      	movs	r3, #3
 80094b6:	73fb      	strb	r3, [r7, #15]
    break;
 80094b8:	bf00      	nop
  }
  return usb_status;
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <__libc_init_array>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	4d0d      	ldr	r5, [pc, #52]	; (8009500 <__libc_init_array+0x38>)
 80094cc:	4c0d      	ldr	r4, [pc, #52]	; (8009504 <__libc_init_array+0x3c>)
 80094ce:	1b64      	subs	r4, r4, r5
 80094d0:	10a4      	asrs	r4, r4, #2
 80094d2:	2600      	movs	r6, #0
 80094d4:	42a6      	cmp	r6, r4
 80094d6:	d109      	bne.n	80094ec <__libc_init_array+0x24>
 80094d8:	4d0b      	ldr	r5, [pc, #44]	; (8009508 <__libc_init_array+0x40>)
 80094da:	4c0c      	ldr	r4, [pc, #48]	; (800950c <__libc_init_array+0x44>)
 80094dc:	f000 f820 	bl	8009520 <_init>
 80094e0:	1b64      	subs	r4, r4, r5
 80094e2:	10a4      	asrs	r4, r4, #2
 80094e4:	2600      	movs	r6, #0
 80094e6:	42a6      	cmp	r6, r4
 80094e8:	d105      	bne.n	80094f6 <__libc_init_array+0x2e>
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f0:	4798      	blx	r3
 80094f2:	3601      	adds	r6, #1
 80094f4:	e7ee      	b.n	80094d4 <__libc_init_array+0xc>
 80094f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fa:	4798      	blx	r3
 80094fc:	3601      	adds	r6, #1
 80094fe:	e7f2      	b.n	80094e6 <__libc_init_array+0x1e>
 8009500:	080095a0 	.word	0x080095a0
 8009504:	080095a0 	.word	0x080095a0
 8009508:	080095a0 	.word	0x080095a0
 800950c:	080095a4 	.word	0x080095a4

08009510 <memset>:
 8009510:	4402      	add	r2, r0
 8009512:	4603      	mov	r3, r0
 8009514:	4293      	cmp	r3, r2
 8009516:	d100      	bne.n	800951a <memset+0xa>
 8009518:	4770      	bx	lr
 800951a:	f803 1b01 	strb.w	r1, [r3], #1
 800951e:	e7f9      	b.n	8009514 <memset+0x4>

08009520 <_init>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr

0800952c <_fini>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr
